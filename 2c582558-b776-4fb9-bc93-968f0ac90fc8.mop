{
  "Name": "AddSpikes",
  "_id": "2c582558-b776-4fb9-bc93-968f0ac90fc8",
  "Namespace": "lib.mesh.modify",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "f5314e18-ec28-43f7-ab92-69ef1f6b6c75",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _parameters\r",
          "float Size;",
          "float Facetize;",
          "float3 Offset;",
          "//<<< _parameters\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "\r",
          "float Lerp(float a, float b, float t)\r",
          "{\r",
          "    return a + t*(b - a);\r",
          "}\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "[maxvertexcount(9)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{   \r",
          "\r",
          "    float3 p0 = input[0].pos;\r",
          "    float3 p1 = input[1].pos;\r",
          "    float3 p2 = input[2].pos;\r",
          "    float3 n0 =  input[0].normal;\r",
          "    float3 n1 =  input[1].normal;\r",
          "    float3 n2 =  input[2].normal;\r",
          "\r",
          "    float3 n3 = normalize(input[0].normal + input[1].normal + input[2].normal) + input[0].binormal * Offset;\r",
          "    \r",
          "    \r",
          "    float3 p3 = (p0 + p1 + p2) / 3 + n3 * Size ;\r",
          "    \r",
          "    \r",
          "    \r",
          "    Vertex v3 = input[0];\r",
          "    v3.col =        (input[0].col       + input[1].col      + input[2].col) / 3;\r",
          "    v3.texCoord =   (input[0].texCoord  + input[1].texCoord + input[2].texCoord) / 3;\r",
          "    v3.tangent =    (input[0].tangent   + input[1].tangent  + input[2].tangent) / 3;;\r",
          "    v3.binormal =   (input[0].binormal  + input[1].binormal + input[2].binormal) / 3;;\r",
          "    \r",
          "    //Vertex\r",
          "    \r",
          "    v3.pos.xyz = p3;\r",
          "    v3.normal = n3;\r",
          "\r",
          "    float3 pn = -cross( p0 - p3, p3 - p1);\r",
          "    input[0].normal =lerp( n0, pn, Facetize);\r",
          "    input[1].normal =lerp( n1, pn, Facetize);\r",
          "    v3.normal = lerp( n3, pn, Facetize);\r",
          "    \r",
          "    outputStream.Append( input[0]);\r",
          "    outputStream.Append( input[1]);\r",
          "    outputStream.Append( v3 );\r",
          "    outputStream.RestartStrip();\r",
          "    \r",
          "    pn = -cross( p1 - p3, p3 - p2);\r",
          "    input[1].normal =lerp( n1, pn, Facetize);\r",
          "    input[0].normal =lerp( n0, pn, Facetize);\r",
          "    v3.normal = lerp( n3, pn, Facetize);;\r",
          "\r",
          "    outputStream.Append( input[1]);\r",
          "    outputStream.Append( input[2]);\r",
          "    outputStream.Append( v3 );\r",
          "    outputStream.RestartStrip();\r",
          "\r",
          "    pn =  -cross( p2 - p3, p3 - p0);\r",
          "    input[2].normal = lerp( n2, pn, Facetize);\r",
          "    input[0].normal = lerp( n0, pn, Facetize);\r",
          "    v3.normal = lerp( n3, pn, Facetize);\r",
          "\r",
          "    outputStream.Append( input[2]);\r",
          "    outputStream.Append( input[0]);\r",
          "    outputStream.Append( v3 );\r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Mesh",
      "MetaInstanceID": "9c31ad15-978b-4965-90c1-c9b20d715051",
      "DefaultValue": {
        "Type": "Mesh",
        "Value": "Framefield.Core.MeshValue"
      },
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size",
      "MetaInstanceID": "cd579d33-7c2c-4807-81e8-533b7032b623",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Facetize",
      "MetaInstanceID": "4fc01cf0-3210-4919-94e9-905a37ce6ba3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Offset.X",
      "MetaInstanceID": "69bfebcb-5e92-4cf3-8ed7-b1c1b70caf72",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Offset.Y",
      "MetaInstanceID": "ad346797-3167-4057-a1c8-72730557e3e3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Offset.Z",
      "MetaInstanceID": "0820c5f0-6dd6-4e30-971f-dbb792a65efd",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "dec9d117-937f-4729-a721-ae15788309d7",
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "1770aa56-005f-4667-8e2f-f273d4a80463",
      "MetaID": "4115337d-0013-490b-94e4-52d0ad033d47",
      "Name": "AddSpikesFunc",
      "Version": "c256d99b-b86f-480d-b041-7ebe00fbeeb1",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using SharpDX.Direct3D;",
        "",
        "namespace Framefield.Core.ID4115337d_0013_490b_94e4_52d0ad033d47",
        "{",
        "    public class Class_AddSpikes : FXSourceCodeFunction, IFXSceneSourceCode",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Size = 1,",
        "            Mesh = 2,",
        "            Facetize = 3,",
        "            OffsetX = 4,",
        "            OffsetY = 5,",
        "            OffsetZ = 6",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class_AddSpikes()",
        "        {",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "                context.Mesh = _mesh;",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            if (!Changed && _mesh.Vertices != null)",
        "                return;",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Size = inputs[(int)InputId.Size].Eval(context).Value;",
        "            var Mesh = inputs[(int)InputId.Mesh].Eval(context).Mesh;",
        "            var Facetize = inputs[(int)InputId.Facetize].Eval(context).Value;",
        "            var OffsetX = inputs[(int)InputId.OffsetX].Eval(context).Value;",
        "            var OffsetY = inputs[(int)InputId.OffsetY].Eval(context).Value;",
        "            var OffsetZ = inputs[(int)InputId.OffsetZ].Eval(context).Value;",
        "            var Offset = new Vector3(OffsetX, OffsetY, OffsetZ);",
        "            //<<< _params",
        "",
        "            ",
        "            if (Mesh == null)",
        "                return;",
        "",
        "            _mesh.AttributesSize = Mesh.AttributesSize;",
        "            _mesh.NumTriangles = Mesh.NumTriangles * 3;",
        "            _mesh.InputElements = Mesh.InputElements;",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != Mesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                if (_mesh.Vertices != null)",
        "                    _mesh.Vertices.Dispose();",
        "",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                    {",
        "                                                                        BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                        CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                        OptionFlags = ResourceOptionFlags.None,",
        "                                                                        SizeInBytes = _mesh.NumTriangles*Mesh.AttributesSize*3,",
        "                                                                        Usage = ResourceUsage.Default",
        "                                                                    });",
        "            }",
        "            ",
        "",
        "            ",
        "            _effect.GetVariableByName(\"Facetize\").AsScalar().Set(Facetize);",
        "            _effect.GetVariableByName(\"Offset\").AsVector().Set(new Vector3(OffsetX, OffsetY, OffsetZ));",
        "            _effect.GetVariableByName(\"Size\").AsScalar().Set(Size);",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, 0) });",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(Mesh.Vertices, Mesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw(_mesh.NumTriangles*3, 0);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1770aa56-005f-4667-8e2f-f273d4a80463",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dec9d117-937f-4729-a721-ae15788309d7"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f5314e18-ec28-43f7-ab92-69ef1f6b6c75",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1770aa56-005f-4667-8e2f-f273d4a80463"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cd579d33-7c2c-4807-81e8-533b7032b623",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1770aa56-005f-4667-8e2f-f273d4a80463"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9c31ad15-978b-4965-90c1-c9b20d715051",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1770aa56-005f-4667-8e2f-f273d4a80463"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4fc01cf0-3210-4919-94e9-905a37ce6ba3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1770aa56-005f-4667-8e2f-f273d4a80463"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "69bfebcb-5e92-4cf3-8ed7-b1c1b70caf72",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1770aa56-005f-4667-8e2f-f273d4a80463"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ad346797-3167-4057-a1c8-72730557e3e3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1770aa56-005f-4667-8e2f-f273d4a80463"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0820c5f0-6dd6-4e30-971f-dbb792a65efd",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1770aa56-005f-4667-8e2f-f273d4a80463"
    }
  ]
}