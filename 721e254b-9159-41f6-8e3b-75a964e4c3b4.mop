{
  "Name": "MeshSurfaceCenters",
  "_id": "721e254b-9159-41f6-8e3b-75a964e4c3b4",
  "Namespace": "user.cynic",
  "Description": "Generate a stream with a matrix for each triangle, which can be used for instancing.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "af75ff68-6b29-4bcd-8191-3d08447cc254",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _parameters\r",
          "float SkipSize;",
          "float3 SpinRandom;",
          "//<<< _parameters\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "struct Output\r",
          "{\r",
          "    float4 objToWorldRow0 : INSTANCE_OBJ_TO_WORLD_ROW0;\r",
          "    float4 objToWorldRow1 : INSTANCE_OBJ_TO_WORLD_ROW1;\r",
          "    float4 objToWorldRow2 : INSTANCE_OBJ_TO_WORLD_ROW2;\r",
          "    float4 objToWorldRow3 : INSTANCE_OBJ_TO_WORLD_ROW3;\r",
          "};\r",
          "\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "float4x4 rotationMatrix(float3 axis, float angle) {\r",
          "    float3 a = normalize(axis);\r",
          "    float s = sin(angle);\r",
          "    float c2 = cos(angle);\r",
          "    float oc = 1 - c2;\r",
          "    float sx = s * a.x;\r",
          "    float sy = s * a.y;\r",
          "    float sz = s * a.z;\r",
          "    float ocx = oc * a.x;\r",
          "    float ocy = oc * a.y;\r",
          "    float ocz = oc * a.z;\r",
          "    float ocxx = ocx * a.x;\r",
          "    float ocxy = ocx * a.y;\r",
          "    float ocxz = ocx * a.z;\r",
          "    float ocyy = ocy * a.y;\r",
          "    float ocyz = ocy * a.z;\r",
          "    float oczz = ocz * a.z;\r",
          "    \r",
          "    return float4x4(\r",
          "        float4(ocxx + c2, ocxy - sz, ocxz + sy, 0.0),\r",
          "        float4(ocxy + sz, ocyy + c2, ocyz - sx, 0.0),\r",
          "        float4(ocxz - sy, ocyz + sx, oczz + c2, 0.0),\r",
          "        float4( 0.0, 0.0, 0.0, 1.0)\r",
          "    );\r",
          "}\r",
          "\r",
          "float4x4 translateMatrix(float3 v) {\r",
          "\r",
          "   return float4x4(\r",
          "        float4(0,0,0,0),\r",
          "        float4(0,0,0,0),\r",
          "        float4(0,0,0,0),\r",
          "        float4(v.x, v.y, v.z, 1)\r",
          "    );        \r",
          "}\r",
          "\r",
          "\r",
          "[maxvertexcount(1)]\r",
          "void GeometryMain(triangle Vertex input[3], uint id : SV_PrimitiveID, inout PointStream<Output> outputStream)\r",
          "{\r",
          "    if (id % SkipSize == 0)\r",
          "    {\r",
          "        Vertex v0 = input[0];\r",
          "        Vertex v1 = input[1];\r",
          "        Vertex v2 = input[2];\r",
          "        Output output;\r",
          "\r",
          "        output.objToWorldRow2 = float4(v0.normal, 0);\r",
          "        \r",
          "        //v0.normal = normalize(v0.normal);\r",
          "        float flipUpVectorFactor = saturate( abs(v0.normal.z) * 2);\r",
          "        float3 up = lerp(float3(1,0,0.01),  float3(1,0,0), flipUpVectorFactor);\r",
          "        //up = abs(v0.normal.z) < 0.999 ? float3(0,0,1) : float3(1,0,0);        \r",
          "        float3 xDir = normalize(cross(v0.normal, up));\r",
          "        \r",
          "        \r",
          "        \r",
          "        output.objToWorldRow0 = float4(xDir, 0);\r",
          "        output.objToWorldRow1 = float4(normalize(cross(v0.normal, xDir)), 0);\r",
          "        output.objToWorldRow3 = (v0.pos + v1.pos + v2.pos)/3.0;\r",
          "        output.objToWorldRow3.w = 1;\r",
          "        \r",
          "        \r",
          "        /*        \r",
          "        float4x4 m = float4x4(\r",
          "            float4(xDir, 0),\r",
          "            float4(normalize(cross(v0.normal, xDir)), 0),\r",
          "            float4(0,0,0,0),\r",
          "            float4( ((v0.pos + v1.pos + v2.pos)/3.0).xyz, 1)\r",
          "        );\r",
          "        \r",
          "        output.objToWorldRow0 = m._m00_m01_m02_m03;\r",
          "        output.objToWorldRow1 = m._m10_m11_m12_m13;\r",
          "        output.objToWorldRow2 = m._m20_m21_m22_m23;\r",
          "        output.objToWorldRow3 = m._m30_m31_m32_m33;\r",
          "        */\r",
          "\r",
          "\r",
          "//output.objToWorldRow0 = float4(0,1,0, 0);\r",
          "//output.objToWorldRow1 = float4(0,0,1, 0);\r",
          "//output.objToWorldRow2 = float4(1,0,0, 0);\r",
          "//output.objToWorldRow3 = float4(id, 0, 0, 1);\r",
          "    \r",
          "        outputStream.Append(output);\r",
          "        outputStream.RestartStrip();\r",
          "    }\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"INSTANCE_OBJ_TO_WORLD_ROW0; INSTANCE_OBJ_TO_WORLD_ROW1; INSTANCE_OBJ_TO_WORLD_ROW2; INSTANCE_OBJ_TO_WORLD_ROW3;\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Mesh",
      "MetaInstanceID": "2c655095-4aa6-4952-8d37-597e2a7f599e",
      "DefaultValue": {
        "Type": "Mesh",
        "Value": "Framefield.Core.MeshValue"
      },
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SkipSize",
      "MetaInstanceID": "92985511-1ed2-404d-a909-2c770a7bf6bc",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SpinRandom.X",
      "MetaInstanceID": "f93b7037-2fea-48d3-b07e-06fbd735aad3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SpinRandom.Y",
      "MetaInstanceID": "d23c6e33-43a9-4be7-812b-06909ed40021",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SpinRandom.Z",
      "MetaInstanceID": "507485cc-eb2d-43a8-ac16-3d63a4b604fd",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "SurfacePositions",
      "MetaInstanceID": "d2b47ff5-8d70-48c4-917f-aa4be55451b5",
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "521f02b9-5025-4e6e-a685-c85af582a5bf",
      "MetaID": "62735d7a-fb00-414c-8da5-12fee49efdbe",
      "Name": "MeshSurfaceCentersFunc",
      "Version": "05701117-15b1-4e86-8b7c-e16562d60a96",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using SharpDX.Direct3D;",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using System.Dynamic;",
        "",
        "namespace Framefield.Core.ID62735d7a_fb00_414c_8da5_12fee49efdbe",
        "{",
        "    public class Class_MeshSurfaceCenters : FXSourceCodeFunction, IFXSceneSourceCode",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            SkipSize = 1,",
        "            Mesh = 2,",
        "            SpinRandomX = 3,",
        "            SpinRandomY = 4,",
        "            SpinRandomZ = 5",
        "        }",
        "        //<<< _inputids",
        "",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval) ",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "            ",
        "            if (!Changed && _mesh.Vertices != null)",
        "            {",
        "                dynamic obj = new ExpandoObject();",
        "                obj.PosBuffer = _mesh.Vertices;",
        "                context.Dynamic = obj;",
        "                return;",
        "            }",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var SkipSize = inputs[(int)InputId.SkipSize].Eval(context).Value;",
        "            var Mesh = inputs[(int)InputId.Mesh].Eval(context).Mesh;",
        "            var SpinRandomX = inputs[(int)InputId.SpinRandomX].Eval(context).Value;",
        "            var SpinRandomY = inputs[(int)InputId.SpinRandomY].Eval(context).Value;",
        "            var SpinRandomZ = inputs[(int)InputId.SpinRandomZ].Eval(context).Value;",
        "            var SpinRandom = new Vector3(SpinRandomX, SpinRandomY, SpinRandomZ);",
        "            //<<< _params",
        "",
        "            if (Mesh == null)",
        "                return;",
        "",
        "            _mesh.AttributesSize = Mesh.AttributesSize;",
        "            _mesh.NumTriangles = Mesh.NumTriangles;",
        "            _mesh.InputElements = Mesh.InputElements;",
        "            int stride = (int)SkipSize;",
        "            int targetSize = Mesh.NumTriangles / Math.Max(stride, 1);",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != targetSize)",
        "            {",
        "                Utilities.DisposeObj(ref _mesh.Vertices);",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                  {",
        "                                                                      BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                      CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                      OptionFlags = ResourceOptionFlags.None,",
        "                                                                      SizeInBytes = targetSize*16*4,",
        "                                                                      Usage = ResourceUsage.Default,                                                                      ",
        "                                                                  }) ",
        "                                     {",
        "                                         DebugName = \"SurfaceCenterBuffer\"",
        "                                     };",
        "//Logger.Info(this, \"target size: {0}\", targetSize);",
        "            }",
        "            SetScalar(\"SkipSize\", SkipSize);",
        "            SetVector(\"SpinRandom\", SpinRandom);",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, 0) });",
        "            var prevDSS = context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState;",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                      new DepthStencilStateDescription()",
        "                                                                                                          {",
        "                                                                                                              IsDepthEnabled = false,",
        "                                                                                                              IsStencilEnabled = false",
        "                                                                                                          });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(Mesh.Vertices, Mesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw((Mesh.NumTriangles)*3, 0);",
        "//Logger.Info(this, \"input mesh num vertices: {0}\", Mesh.NumTriangles*3);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = prevDSS;",
        "",
        "            //context.Mesh = _mesh;",
        "            ",
        "            dynamic obj2 = new ExpandoObject();",
        "            obj2.PosBuffer = _mesh.Vertices;",
        "            context.Dynamic = obj2;",
        "",
        "//Logger.Info(this, \"update surface positions\");",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "af75ff68-6b29-4bcd-8191-3d08447cc254",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "521f02b9-5025-4e6e-a685-c85af582a5bf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "92985511-1ed2-404d-a909-2c770a7bf6bc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "521f02b9-5025-4e6e-a685-c85af582a5bf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2c655095-4aa6-4952-8d37-597e2a7f599e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "521f02b9-5025-4e6e-a685-c85af582a5bf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f93b7037-2fea-48d3-b07e-06fbd735aad3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "521f02b9-5025-4e6e-a685-c85af582a5bf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d23c6e33-43a9-4be7-812b-06909ed40021",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "521f02b9-5025-4e6e-a685-c85af582a5bf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "507485cc-eb2d-43a8-ac16-3d63a4b604fd",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "521f02b9-5025-4e6e-a685-c85af582a5bf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "521f02b9-5025-4e6e-a685-c85af582a5bf",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d2b47ff5-8d70-48c4-917f-aa4be55451b5"
    }
  ]
}