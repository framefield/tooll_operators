{
  "Name": "ThreadSqueeze",
  "_id": "e0e9fbc9-8dc2-4724-8bb8-506b0d857815",
  "Namespace": "projects.supermedium.shaders",
  "Description": "Distorts the incoming [CylinderMesh] like a stretched rubber band.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "53578676-9726-4d68-843d-da4fa0b040d0",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _parameters\r",
          "float Facetize;",
          "float ScaleNormals;",
          "float SqueezeTop;",
          "float SqueezeCenter;",
          "float SqueezeBottom;",
          "float Wiggle;",
          "float WiggleFrequency;",
          "float WigglePhase;",
          "float SkaleUp;",
          "//<<< _parameters\r",
          "\r",
          "float2 RenderTargetSize;\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "float Lerp(float a, float b, float t)\r",
          "{\r",
          "    return a + t*(b - a);\r",
          "}\r",
          "\r",
          "\r",
          "float3 offsetAtPoint( float3 p) \r",
          "{\r",
          "        float3 pOrg = p;\r",
          "        float topFactor = p.y*2;\r",
          "        float squeezeFactor = 1;\r",
          "        \r",
          "        if(topFactor > 0) {\r",
          "            squeezeFactor *= SqueezeTop * pow(topFactor,8 )+1;\r",
          "        }\r",
          "        else if(topFactor < 0) {\r",
          "            squeezeFactor *= SqueezeBottom * pow(-topFactor,8 )+1;\r",
          "        }\r",
          "        \r",
          "        squeezeFactor -=  lerp(0.7,  pow(p.y*2 , 2), SqueezeCenter);        \r",
          "        \r",
          "        p.y = pow(p.y+0.5, SkaleUp) - 0.5;\r",
          "        \r",
          "        //float wiggleFactor =  1-pow( abs(p.y*4),1) ;\r",
          "        float wiggleFactor =  1 - abs( pow( p.y * 2, 2));\r",
          "        //p.xz *= wiggleFactor;\r",
          "        //return  p - pOut;\r",
          "        \r",
          "        \r",
          "        p.xz *= squeezeFactor;        \r",
          "        p.xz += float2( sin( p.y * WiggleFrequency+ WigglePhase ), cos(p.y * WiggleFrequency + WigglePhase)) * Wiggle * wiggleFactor; \r",
          "        \r",
          "        return p - pOrg ;\r",
          "        //return float3( p.x * topFactor * BulgeScreenTop , p;\r",
          "}\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{        \r",
          "    float3 p,pn,dn;\r",
          "\r",
          "    p = input[0].pos;\r",
          "    pn = p + input[0].normal * ScaleNormals;\r",
          "    dn = offsetAtPoint( pn );\r",
          "    input[0].pos.xyz = p+ offsetAtPoint( p );    \r",
          "    input[0].normal=  normalize(pn + dn - input[0].pos);\r",
          "\r",
          "    p = input[1].pos;\r",
          "    pn = p + input[1].normal * ScaleNormals;\r",
          "    dn = offsetAtPoint( pn );\r",
          "    input[1].pos.xyz = p+ offsetAtPoint( p );    \r",
          "    input[1].normal=  normalize(pn + dn - input[1].pos);\r",
          "\r",
          "    p = input[2].pos;\r",
          "    pn = p + input[2].normal * ScaleNormals;\r",
          "    dn = offsetAtPoint( pn );\r",
          "    input[2].pos.xyz = p + offsetAtPoint( p );    \r",
          "    input[2].normal=  normalize(pn + dn - input[2].pos);\r",
          "\r",
          "    if( abs(Facetize) > 0.001) {\r",
          "        float3 n = normalize( input[0].normal + input[1].normal + input[2].normal);\r",
          "        input[0].normal = normalize( lerp(input[0].normal,n, Facetize));\r",
          "        input[1].normal = normalize( lerp(input[1].normal,n, Facetize));\r",
          "        input[2].normal = normalize( lerp(input[2].normal,n, Facetize));\r",
          "    }\r",
          "    \r",
          "    outputStream.Append( input[0]);\r",
          "    outputStream.Append( input[1]);\r",
          "    outputStream.Append( input[2]);\r",
          "    \r",
          "    \r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Mesh",
      "MetaInstanceID": "593852eb-99de-43cf-ac93-a9c9e9af2ff4",
      "DefaultValue": {
        "Type": "Mesh",
        "Value": "Framefield.Core.MeshValue"
      },
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Facetize",
      "MetaInstanceID": "e1a26072-7b18-48fb-929d-a3a6839b02ec",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ScaleNormals",
      "MetaInstanceID": "6477ecc6-4d4b-49d6-81c3-64db20c8d43b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SqueezeTop",
      "MetaInstanceID": "a422c9e8-75e2-4500-8a79-c08c7cd9d09d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SqueezeCenter",
      "MetaInstanceID": "17b2e03b-71b6-426f-ab7e-48cc4677f7eb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SqueezeBottom",
      "MetaInstanceID": "0b3a78b8-99ce-4dc5-bc84-5d7e277981a6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Wiggle",
      "MetaInstanceID": "c7abe0a7-e2d3-47ca-8538-23ea2f55a991",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "WiggleFrequency",
      "MetaInstanceID": "bcc1c889-987d-4691-b0f3-86817c7c1702",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "WigglePhase",
      "MetaInstanceID": "cafbd75b-03b2-4467-a735-59701e76c637",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SkaleUp",
      "MetaInstanceID": "1ee25fb0-bd38-44a7-9605-2d98d5f1b716",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "2e67ef45-4ade-4694-a15f-42ccc76de264",
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "41e3128a-49ae-4c26-a417-4560bccec240",
      "MetaID": "b9868ce7-1f21-4ff6-9239-9b5942e1f182",
      "Name": "ThreadSqueezeFunc",
      "Version": "705e70e9-2129-47a1-b10e-0b36c1d2ce52",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using SharpDX.Direct3D;",
        "",
        "namespace Framefield.Core.IDb9868ce7_1f21_4ff6_9239_9b5942e1f182",
        "{",
        "    public class Class_ThreadSqueeze : FXSourceCodeFunction, IFXSceneSourceCode",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Mesh = 1,",
        "            Facetize = 2,",
        "            ScaleNormals = 3,",
        "            SqueezeTop = 4,",
        "            SqueezeCenter = 5,",
        "            SqueezeBottom = 6,",
        "            Wiggle = 7,",
        "            WiggleFrequency = 8,",
        "            WigglePhase = 9,",
        "            SkaleUp = 10",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class_ThreadSqueeze()",
        "        {",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "                context.Mesh = _mesh;",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            if (!Changed && _mesh.Vertices != null)",
        "                return;",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Mesh = inputs[(int)InputId.Mesh].Eval(context).Mesh;",
        "            var Facetize = inputs[(int)InputId.Facetize].Eval(context).Value;",
        "            var ScaleNormals = inputs[(int)InputId.ScaleNormals].Eval(context).Value;",
        "            var SqueezeTop = inputs[(int)InputId.SqueezeTop].Eval(context).Value;",
        "            var SqueezeCenter = inputs[(int)InputId.SqueezeCenter].Eval(context).Value;",
        "            var SqueezeBottom = inputs[(int)InputId.SqueezeBottom].Eval(context).Value;",
        "            var Wiggle = inputs[(int)InputId.Wiggle].Eval(context).Value;",
        "            var WiggleFrequency = inputs[(int)InputId.WiggleFrequency].Eval(context).Value;",
        "            var WigglePhase = inputs[(int)InputId.WigglePhase].Eval(context).Value;",
        "            var SkaleUp = inputs[(int)InputId.SkaleUp].Eval(context).Value;",
        "            //<<< _params",
        "",
        "",
        "            if (Mesh == null)",
        "                return;",
        "",
        "            _mesh.AttributesSize = Mesh.AttributesSize;",
        "            _mesh.NumTriangles = Mesh.NumTriangles;",
        "            _mesh.InputElements = Mesh.InputElements;",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != Mesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                if (_mesh.Vertices != null)",
        "                    _mesh.Vertices.Dispose();",
        "",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                    {",
        "                                                                        BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                        CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                        OptionFlags = ResourceOptionFlags.None,",
        "                                                                        SizeInBytes = _mesh.NumTriangles*Mesh.AttributesSize*3,",
        "                                                                        Usage = ResourceUsage.Default",
        "                                                                    });",
        "            }",
        "            ",
        "            //var textureView = new ShaderResourceView(D3DDevice, NoiseTexture);",
        "            //var noiseTextureView = new ShaderResourceView(context.D3DDevice, NoiseTexture);",
        "            //_effect.GetVariableByName(\"NoiseTexture\").AsShaderResource().SetResource(noiseTextureView);",
        "",
        "            /*",
        "            _effect.GetVariableByName(\"Facetize\").AsScalar().Set(Facetize);",
        "            _effect.GetVariableByName(\"ScaleNormals\").AsScalar().Set(ScaleNormals);",
        "            _effect.GetVariableByName(\"SqueezeTop\").AsScalar().Set(SqueezeTop);   ",
        "            _effect.GetVariableByName(\"SqueezeBottom\").AsScalar().Set(SqueezeBottom);   ",
        "            _effect.GetVariableByName(\"SqueezeCenter\").AsScalar().Set(SqueezeCenter);   ",
        "            _effect.GetVariableByName(\"Wiggle\").AsScalar().Set(Wiggle);   ",
        "            _effect.GetVariableByName(\"WiggleFrequency\").AsScalar().Set(WiggleFrequency);   ",
        "            _effect.GetVariableByName(\"WigglePhase\").AsScalar().Set(WigglePhase); ",
        "*/",
        "            var _usedViewport = context.Viewport;",
        "            //>>> _setup",
        "            {",
        "                _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                _effect.GetVariableByName(\"Facetize\").AsScalar().Set(Facetize);",
        "                _effect.GetVariableByName(\"ScaleNormals\").AsScalar().Set(ScaleNormals);",
        "                _effect.GetVariableByName(\"SqueezeTop\").AsScalar().Set(SqueezeTop);",
        "                _effect.GetVariableByName(\"SqueezeCenter\").AsScalar().Set(SqueezeCenter);",
        "                _effect.GetVariableByName(\"SqueezeBottom\").AsScalar().Set(SqueezeBottom);",
        "                _effect.GetVariableByName(\"Wiggle\").AsScalar().Set(Wiggle);",
        "                _effect.GetVariableByName(\"WiggleFrequency\").AsScalar().Set(WiggleFrequency);",
        "                _effect.GetVariableByName(\"WigglePhase\").AsScalar().Set(WigglePhase);",
        "                _effect.GetVariableByName(\"SkaleUp\").AsScalar().Set(SkaleUp);",
        "            //<<< _setup",
        "            //_effect.GetVariableByName(\"NoiseAmountXYZ\").AsVector().Set(new Vector3(NoiseAmountXYZ.X, NoiseAmountXYZ.Y, NoiseAmountXYZ.Z));",
        "            }",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, 0) });",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(Mesh.Vertices, Mesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw(_mesh.NumTriangles*3, 0);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "41e3128a-49ae-4c26-a417-4560bccec240",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2e67ef45-4ade-4694-a15f-42ccc76de264"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "53578676-9726-4d68-843d-da4fa0b040d0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "41e3128a-49ae-4c26-a417-4560bccec240"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "593852eb-99de-43cf-ac93-a9c9e9af2ff4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "41e3128a-49ae-4c26-a417-4560bccec240"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e1a26072-7b18-48fb-929d-a3a6839b02ec",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "41e3128a-49ae-4c26-a417-4560bccec240"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6477ecc6-4d4b-49d6-81c3-64db20c8d43b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "41e3128a-49ae-4c26-a417-4560bccec240"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a422c9e8-75e2-4500-8a79-c08c7cd9d09d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "41e3128a-49ae-4c26-a417-4560bccec240"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "17b2e03b-71b6-426f-ab7e-48cc4677f7eb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "41e3128a-49ae-4c26-a417-4560bccec240"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0b3a78b8-99ce-4dc5-bc84-5d7e277981a6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "41e3128a-49ae-4c26-a417-4560bccec240"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c7abe0a7-e2d3-47ca-8538-23ea2f55a991",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "41e3128a-49ae-4c26-a417-4560bccec240"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bcc1c889-987d-4691-b0f3-86817c7c1702",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "41e3128a-49ae-4c26-a417-4560bccec240"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cafbd75b-03b2-4467-a735-59701e76c637",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "41e3128a-49ae-4c26-a417-4560bccec240"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1ee25fb0-bd38-44a7-9605-2d98d5f1b716",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "41e3128a-49ae-4c26-a417-4560bccec240"
    }
  ]
}