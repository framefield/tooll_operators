{
  "Name": "BendVegetation",
  "_id": "43a2e47f-f2df-4715-a2c9-2e3f5b7ca62e",
  "Namespace": "lib.mesh.modify",
  "Description": "This Modify is useful for faking movement of ground vegation.\r\n\r\nNeeds a RGBANoise as 2nd input\r\n\r\n[NoiseDistort____________]\r\n[BackMesh]  [SetResolution]\r\n[Transform]  [RGBANoise]\r\n[Rectangle]\r\n\r\n\t",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "d86e2d64-ebba-446b-a599-122481bc6289",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _parameters\r",
          "float3 Center;",
          "float NoiseAmount;",
          "float NoiseScale;",
          "Texture2D NoiseTexture;",
          "float3 NoiseAmountXYZ;",
          "float Facetize;",
          "float ScaleNormals;",
          "float FixAtGround;",
          "//<<< _parameters\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "float Lerp(float a, float b, float t)\r",
          "{\r",
          "    return a + t*(b - a);\r",
          "}\r",
          "\r",
          "\r",
          "float3 offsetAtPoint( float3 p) \r",
          "{\r",
          "        float3 samplePos = p + Center;\r",
          "        float3 offset1 = NoiseTexture.SampleLevel(samLinear,  samplePos.xy                        / NoiseScale, 0).xyz - float3(0.5, 0.5, 0.5);\r",
          "        float3 offset2 = NoiseTexture.SampleLevel(samLinear, (samplePos.yx + samplePos.z + float2(-0.23,0.21)) / NoiseScale, 0).xyz - float3(0.5, 0.5, 0.5);\r",
          "        float3 offset3 = NoiseTexture.SampleLevel(samLinear, (samplePos.xz + float2(-0.13,0.63)) / NoiseScale, 0).xyz - float3(0.5, 0.5, 0.5);\r",
          "        return (offset1+offset2+offset3) * NoiseAmount * NoiseAmountXYZ *  smoothstep( 0 , 1, p.y / FixAtGround);\r",
          "}\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{        \r",
          "    float3 p,pn,dn;\r",
          "\r",
          "    p = input[0].pos;\r",
          "    pn = p + input[0].normal * ScaleNormals;\r",
          "    dn = offsetAtPoint( pn );\r",
          "    input[0].pos.xyz = p + offsetAtPoint( p );    \r",
          "    input[0].normal=  normalize(pn + dn - input[0].pos);\r",
          "\r",
          "    p = input[1].pos;\r",
          "    pn = p + input[1].normal * ScaleNormals;\r",
          "    dn = offsetAtPoint( pn );\r",
          "    input[1].pos.xyz = p + offsetAtPoint( p );    \r",
          "    input[1].normal=  normalize(pn + dn - input[1].pos);\r",
          "\r",
          "    p = input[2].pos;\r",
          "    pn = p + input[2].normal * ScaleNormals;\r",
          "    dn = offsetAtPoint( pn );\r",
          "    input[2].pos.xyz = p + offsetAtPoint( p );    \r",
          "    input[2].normal=  normalize(pn + dn - input[2].pos);\r",
          "\r",
          "    if( abs(Facetize) > 0.001) {\r",
          "        float3 n = normalize( input[0].normal + input[1].normal + input[2].normal);\r",
          "        input[0].normal = normalize( lerp(input[0].normal,n, Facetize));\r",
          "        input[1].normal = normalize( lerp(input[1].normal,n, Facetize));\r",
          "        input[2].normal = normalize( lerp(input[2].normal,n, Facetize));\r",
          "    }\r",
          "    \r",
          "    outputStream.Append( input[0]);\r",
          "    outputStream.Append( input[1]);\r",
          "    outputStream.Append( input[2]);\r",
          "    \r",
          "    \r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Mesh",
      "MetaInstanceID": "ae034723-38d2-4c2d-9729-59b8aec4bece",
      "DefaultValue": {
        "Type": "Mesh",
        "Value": "Framefield.Core.MeshValue"
      },
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseTexture",
      "MetaInstanceID": "193f7a1c-25c6-45a3-9d4e-ad8595049b60",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.X",
      "MetaInstanceID": "07a82ccd-50aa-4484-a874-6be85a9dc3ac",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Y",
      "MetaInstanceID": "26440e79-9838-4fda-bf91-d2e180d9b1a5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Z",
      "MetaInstanceID": "03e1f093-0ed2-4a53-8bfd-c92adc69a69a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseAmount",
      "MetaInstanceID": "502e5b1d-9c5b-4274-851e-3ec5a3b6d289",
      "DefaultValue": {
        "Type": "Float",
        "Value": "5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseScale",
      "MetaInstanceID": "ba0e6a0e-c090-4380-b2f4-d8539de4d3d1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.25"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseAmountXYZ.Width",
      "MetaInstanceID": "c800f76d-7a12-436b-a949-6a1c25f06b03",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseAmountXYZ.Height",
      "MetaInstanceID": "78236949-b2ce-4d68-adf3-e2d9a1d44369",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseAmountXYZ.Depth",
      "MetaInstanceID": "78d1e095-befa-4f42-b9d9-925b520d20ce",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Facetize",
      "MetaInstanceID": "b27b50b1-80f8-4cff-95f2-5625d9fafe43",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ScaleNormals",
      "MetaInstanceID": "533faaa2-b12b-4cf6-892f-d38bec7b6ca0",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FixAtGround",
      "MetaInstanceID": "3ffbeff0-b0cf-453a-8d4b-1057bc917ea9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "7204cadf-6120-44b3-8942-c29e993683b5",
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "dfaaf054-adec-4739-b080-1783896f5fc3",
      "MetaID": "32801b78-d5bd-483b-956e-d99ef29ee26e",
      "Name": "BendVegetationFunc",
      "Version": "9fbd6b44-b562-4503-9b2a-0fbc7ddd304e",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using SharpDX.Direct3D;",
        "",
        "namespace Framefield.Core.ID32801b78_d5bd_483b_956e_d99ef29ee26e",
        "{",
        "    public class Class_BendVegetation : FXSourceCodeFunction, IFXSceneSourceCode",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            CenterX = 1,",
        "            CenterY = 2,",
        "            CenterZ = 3,",
        "            NoiseAmount = 4,",
        "            NoiseScale = 5,",
        "            NoiseTexture = 6,",
        "            NoiseAmountXYZWidth = 7,",
        "            NoiseAmountXYZHeight = 8,",
        "            NoiseAmountXYZDepth = 9,",
        "            Mesh = 10,",
        "            Facetize = 11,",
        "            ScaleNormals = 12,",
        "            FixAtGround = 13",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class_BendVegetation()",
        "        {",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "                context.Mesh = _mesh;",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            if (!Changed && _mesh.Vertices != null)",
        "                return;",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var CenterX = inputs[(int)InputId.CenterX].Eval(context).Value;",
        "            var CenterY = inputs[(int)InputId.CenterY].Eval(context).Value;",
        "            var CenterZ = inputs[(int)InputId.CenterZ].Eval(context).Value;",
        "            var Center = new Vector3(CenterX, CenterY, CenterZ);",
        "            var NoiseAmount = inputs[(int)InputId.NoiseAmount].Eval(context).Value;",
        "            var NoiseScale = inputs[(int)InputId.NoiseScale].Eval(context).Value;",
        "            var NoiseTexture = inputs[(int)InputId.NoiseTexture].Eval(context).Image; // Needs to be checked for null!",
        "            var NoiseAmountXYZWidth = inputs[(int)InputId.NoiseAmountXYZWidth].Eval(context).Value;",
        "            var NoiseAmountXYZHeight = inputs[(int)InputId.NoiseAmountXYZHeight].Eval(context).Value;",
        "            var NoiseAmountXYZDepth = inputs[(int)InputId.NoiseAmountXYZDepth].Eval(context).Value;",
        "            var NoiseAmountXYZ = new Vector3(NoiseAmountXYZWidth, NoiseAmountXYZHeight, NoiseAmountXYZDepth);",
        "            var Mesh = inputs[(int)InputId.Mesh].Eval(context).Mesh;",
        "            var Facetize = inputs[(int)InputId.Facetize].Eval(context).Value;",
        "            var ScaleNormals = inputs[(int)InputId.ScaleNormals].Eval(context).Value;",
        "            var FixAtGround = inputs[(int)InputId.FixAtGround].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            if (NoiseTexture == null)",
        "                return;",
        "            ",
        "            //Logger.Info(this, \"collect meshes\");",
        "//            Scene.Func.Changed = false;",
        "",
        "            if (Mesh == null)",
        "                return;",
        "",
        "            _mesh.AttributesSize = Mesh.AttributesSize;",
        "            _mesh.NumTriangles = Mesh.NumTriangles;",
        "            _mesh.InputElements = Mesh.InputElements;",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != Mesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                if (_mesh.Vertices != null)",
        "                    _mesh.Vertices.Dispose();",
        "",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                    {",
        "                                                                        BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                        CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                        OptionFlags = ResourceOptionFlags.None,",
        "                                                                        SizeInBytes = _mesh.NumTriangles*Mesh.AttributesSize*3,",
        "                                                                        Usage = ResourceUsage.Default",
        "                                                                    });",
        "            }",
        "            ",
        "            //var textureView = new ShaderResourceView(D3DDevice, NoiseTexture);",
        "            var noiseTextureView = new ShaderResourceView(context.D3DDevice, NoiseTexture);",
        "            _effect.GetVariableByName(\"NoiseTexture\").AsShaderResource().SetResource(noiseTextureView);",
        "",
        "            ",
        "            _effect.GetVariableByName(\"Facetize\").AsScalar().Set(Facetize);",
        "            _effect.GetVariableByName(\"Center\").AsVector().Set(new Vector3(CenterX, CenterY, CenterZ));",
        "            _effect.GetVariableByName(\"NoiseAmount\").AsScalar().Set(NoiseAmount);",
        "            _effect.GetVariableByName(\"NoiseScale\").AsScalar().Set(NoiseScale);",
        "            _effect.GetVariableByName(\"ScaleNormals\").AsScalar().Set(ScaleNormals);   ",
        "            _effect.GetVariableByName(\"FixAtGround\").AsScalar().Set(FixAtGround);   ",
        "            _effect.GetVariableByName(\"NoiseAmountXYZ\").AsVector().Set(new Vector3(NoiseAmountXYZ.X, NoiseAmountXYZ.Y, NoiseAmountXYZ.Z));",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, 0) });",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(Mesh.Vertices, Mesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw(_mesh.NumTriangles*3, 0);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "dfaaf054-adec-4739-b080-1783896f5fc3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7204cadf-6120-44b3-8942-c29e993683b5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d86e2d64-ebba-446b-a599-122481bc6289",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dfaaf054-adec-4739-b080-1783896f5fc3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "07a82ccd-50aa-4484-a874-6be85a9dc3ac",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dfaaf054-adec-4739-b080-1783896f5fc3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "26440e79-9838-4fda-bf91-d2e180d9b1a5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dfaaf054-adec-4739-b080-1783896f5fc3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "03e1f093-0ed2-4a53-8bfd-c92adc69a69a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dfaaf054-adec-4739-b080-1783896f5fc3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "502e5b1d-9c5b-4274-851e-3ec5a3b6d289",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dfaaf054-adec-4739-b080-1783896f5fc3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ba0e6a0e-c090-4380-b2f4-d8539de4d3d1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dfaaf054-adec-4739-b080-1783896f5fc3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "193f7a1c-25c6-45a3-9d4e-ad8595049b60",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dfaaf054-adec-4739-b080-1783896f5fc3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c800f76d-7a12-436b-a949-6a1c25f06b03",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dfaaf054-adec-4739-b080-1783896f5fc3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "78236949-b2ce-4d68-adf3-e2d9a1d44369",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dfaaf054-adec-4739-b080-1783896f5fc3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "78d1e095-befa-4f42-b9d9-925b520d20ce",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dfaaf054-adec-4739-b080-1783896f5fc3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ae034723-38d2-4c2d-9729-59b8aec4bece",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dfaaf054-adec-4739-b080-1783896f5fc3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b27b50b1-80f8-4cff-95f2-5625d9fafe43",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dfaaf054-adec-4739-b080-1783896f5fc3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "533faaa2-b12b-4cf6-892f-d38bec7b6ca0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dfaaf054-adec-4739-b080-1783896f5fc3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3ffbeff0-b0cf-453a-8d4b-1057bc917ea9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "dfaaf054-adec-4739-b080-1783896f5fc3"
    }
  ]
}