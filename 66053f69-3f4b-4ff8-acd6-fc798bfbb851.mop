{
  "Name": "SceneToMesh",
  "_id": "66053f69-3f4b-4ff8-acd6-fc798bfbb851",
  "Namespace": "lib.mesh.generate",
  "Description": "Similar to [BakeMeshes] this operators converts a Scene Operators like LoadFBX or Cube into a Mesh.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "0c81e642-d783-4437-8579-38d38ed3cf35",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 objectToWorldMatrix;\r",
          "\r",
          "//>>> _parameters\r",
          "float Value;",
          "//<<< _parameters\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{\r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "        Vertex vertex = input[i];\r",
          "        vertex.pos.xyz = mul(vertex.pos, objectToWorldMatrix).xyz + input[i].normal*Value;\r",
          "        vertex.normal.xyz = mul(vertex.normal, objectToWorldMatrix).xyz;\r",
          "        outputStream.Append(vertex);\r",
          "    }\r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scene",
      "MetaInstanceID": "61b38529-6009-46af-a53d-e890a8079dc4",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "20d12b03-d9aa-427f-9fef-33c79180947f",
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "f82a232d-0706-4cf2-8a58-35ec5b479ca4",
      "MetaID": "db468523-e72e-4a3f-88a1-3ea6ee33ffc3",
      "Name": "SceneToMeshFunc",
      "Version": "76d6e4ce-686d-43a1-86c0-1d3dc97bc6e6",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using SharpDX.Direct3D;",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.IDdb468523_e72e_4a3f_88a1_3ea6ee33ffc3",
        "{",
        "    public class Class_SceneToMesh : FXSourceCodeFunction, IFXSceneSourceCode, IMeshSupplier",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scene = 1",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class_SceneToMesh()",
        "        {",
        "            _meshCollector = new MeshCollector(this);",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _bakedMesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public void AddMeshesTo(ICollection<Mesh> meshes)",
        "        {",
        "            UpdateMesh(new OperatorPartContext(), OperatorPart.Connections);",
        "            if (_bakedMesh != null)",
        "                meshes.Add(_bakedMesh);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "                context.Mesh = _bakedMesh;",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval) ",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "",
        "            //if (!Changed && _bakedMesh.Vertices != null)",
        "            //    return;",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Scene = inputs[(int)InputId.Scene];",
        "            //<<< _params",
        "",
        "            if (Scene.Func.Changed || _bakedMesh.Vertices == null)",
        "            {",
        "                //Logger.Info(this, \"collect meshes\");",
        "                _meshCollector.Collect(Scene);",
        "                Scene.Func.Changed = false;",
        "            }",
        "",
        "            var inputMesh = _meshCollector.FirstMeshOrDefault;",
        "            if (inputMesh == null)",
        "            {",
        "                Utilities.DisposeObj(ref _bakedMesh.Vertices);",
        "                return;",
        "            }",
        "",
        "            _bakedMesh.NumTriangles = (from meshesWithtransform in _meshCollector.CollectedMeshes",
        "                                  from mesh in meshesWithtransform.Value",
        "                                  select mesh.NumTriangles).Sum();",
        "",
        "            _bakedMesh.AttributesSize = inputMesh.AttributesSize;",
        "            _bakedMesh.InputElements = inputMesh.InputElements;",
        "            if (_bakedMesh.Vertices == null || _bakedMesh.Vertices.Description.SizeInBytes != inputMesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                Utilities.DisposeObj(ref _bakedMesh.Vertices);",
        "                _bakedMesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                  {",
        "                                                                      BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                      CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                      OptionFlags = ResourceOptionFlags.None,",
        "                                                                      SizeInBytes = _bakedMesh.NumTriangles*_bakedMesh.AttributesSize*3,",
        "                                                                      Usage = ResourceUsage.Default",
        "                                                                  });",
        "            }",
        "",
        "             var matrixEffectVariable = _effect.GetVariableByName(\"objectToWorldMatrix\").AsMatrix();",
        "",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "",
        "            int streamOutputOffset = 0;",
        "",
        "            foreach (var meshesWithTransform in _meshCollector.CollectedMeshes)",
        "            {",
        "                if (matrixEffectVariable != null && matrixEffectVariable.IsValid)",
        "                {",
        "                    matrixEffectVariable.SetMatrix(meshesWithTransform.Key);",
        "                }",
        "",
        "                foreach (var mesh in meshesWithTransform.Value)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_bakedMesh.Vertices, streamOutputOffset) });",
        "                    context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(mesh.Vertices, inputMesh.AttributesSize, 0));",
        "                    var technique = _effect.GetTechniqueByIndex(0);",
        "                    technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "                    context.D3DDevice.ImmediateContext.Draw(mesh.NumTriangles*3, 0);",
        "                    streamOutputOffset += mesh.AttributesSize*mesh.NumTriangles*3;",
        "                }",
        "            }",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _bakedMesh = new Mesh();",
        "        private MeshCollector _meshCollector;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0c81e642-d783-4437-8579-38d38ed3cf35",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f82a232d-0706-4cf2-8a58-35ec5b479ca4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "61b38529-6009-46af-a53d-e890a8079dc4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f82a232d-0706-4cf2-8a58-35ec5b479ca4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f82a232d-0706-4cf2-8a58-35ec5b479ca4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "20d12b03-d9aa-427f-9fef-33c79180947f"
    }
  ]
}