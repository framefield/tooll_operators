{
  "Name": "HidInput",
  "_id": "2a2d642c-28f5-4d97-824c-64a1212eba91",
  "Namespace": "lib.io",
  "Description": "Returns 1 or 0 whether the hid input element is received.\r\nTo teach the elementid just leave it empty and press button to bind to on the hid.",
  "Inputs": [
    {
      "Name": "TeachTrigger",
      "MetaInstanceID": "53bf3d1b-3245-46fd-9d09-0e0eeee70b22",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ElementID",
      "MetaInstanceID": "e4112494-a3e0-45c4-893d-c8d9ef9e3d18",
      "DefaultValue": {
        "Type": "Text",
        "Value": ""
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Output",
      "MetaInstanceID": "c61e1c7c-914f-4a24-940d-fbecc6126d96",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "e04228b3-cbc4-46f4-bde3-d6e6d853f0d4",
      "MetaID": "5efe8985-1194-4dc2-aff0-7b904c04ba43",
      "Name": "HidInputFunc",
      "Version": "43c0fccf-2470-4917-9be9-3a5bccd6c7e0",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "using Framefield.Core;",
        "using Framefield.Core.Inputs;",
        "",
        "",
        "namespace Framefield.Core.ID5efe8985_1194_4dc2_aff0_7b904c04ba43",
        "{",
        "    public class Class_HidInput : OperatorPart.Function, Framefield.Core.OperatorPartTraits.IAsyncDependend",
        "    {",
        "        public bool AsyncChanged { get { return _asyncChanged; } }",
        "",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            TeachTrigger = 0,",
        "            ElementID = 1",
        "        }",
        "        //<<< _inputids ",
        "",
        "        public Class_HidInput()",
        "        {",
        "            Input.Hid.HidInputEvent += HandleHidInputEvent;",
        "        }",
        "        public override void Dispose()",
        "        {",
        "            Input.Hid.HidInputEvent -= HandleHidInputEvent;",
        "        }",
        "",
        "        void HandleHidInputEvent(object o, HidInput.HidEventArgs e)",
        "        {",
        "            _lastEventArgs = e;",
        "            _asyncChanged = true;",
        "        }",
        "         ",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var TeachTrigger = inputs[(int)InputId.TeachTrigger].Eval(context).Value;",
        "            var ElementID = inputs[(int)InputId.ElementID].Eval(context).Text;",
        "            //<<< _params",
        "",
        "            _asyncChanged = false;",
        "",
        "            bool teachTriggerFlankUp = _oldTeachTrigger < 0.5f && TeachTrigger > 0.5f;",
        "            _oldTeachTrigger = TeachTrigger;",
        "            if (teachTriggerFlankUp)",
        "            {",
        "                Logger.Info(this, \"teaching mode active\");",
        "                _teachingActive = true;",
        "                _lastEventArgs = null;",
        "                _dataIDHistory.Clear();",
        "            }",
        "",
        "            if (_lastEventArgs == null)",
        "            {",
        "                context.Value = 0;",
        "                return context;",
        "            }",
        "",
        "            long receivedDataID = ConvertByteArrayToLong(_lastEventArgs.RawData);",
        "",
        "            if (_teachingActive)",
        "            {",
        "                if (!_dataIDHistory.Contains(receivedDataID))",
        "                    _dataIDHistory.Add(receivedDataID);",
        "                if (_dataIDHistory.Count == 2)",
        "                {",
        "                    long pressID = _dataIDHistory[0];",
        "                    long noPressID = _dataIDHistory[1];",
        "                    long valID = pressID & ~noPressID;",
        "",
        "                    String valIDAsString = String.Format(\"{0:X}\", valID);",
        "                    inputs[(int)InputId.ElementID].Func = Utilities.CreateValueFunction(new Text(valIDAsString));",
        "                    context.Value = 0;",
        "                    Logger.Info(this, \"teached finished with {0:X}\", valID);",
        "                    _dataIDHistory.Clear();",
        "                    _teachingActive = false;",
        "                }",
        "            }",
        "            else",
        "            {",
        "                long elementIDLong = ConvertHexStringToLong(ElementID);",
        "                context.Value = (receivedDataID & elementIDLong) != 0 ? 1 : 0;",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        long ConvertByteArrayToLong(byte[] data)",
        "        {",
        "            if (data == null)",
        "                return 0;",
        "",
        "            String hexStr = BitConverter.ToString(data).Replace(\"-\", \"\");",
        "            return long.Parse(hexStr, System.Globalization.NumberStyles.AllowHexSpecifier);",
        "        }",
        "",
        "        long ConvertHexStringToLong(String hexStr)",
        "        {",
        "            if (String.IsNullOrEmpty(hexStr))",
        "                return 0;",
        "",
        "            return long.Parse(hexStr, System.Globalization.NumberStyles.AllowHexSpecifier);",
        "        }",
        "",
        "",
        "        bool _asyncChanged = false;",
        "        float _oldTeachTrigger;",
        "        bool _teachingActive;",
        "        HidInput.HidEventArgs _lastEventArgs = null;",
        "        List<long> _dataIDHistory = new List<long>();",
        "    }",
        "",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e04228b3-cbc4-46f4-bde3-d6e6d853f0d4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "c61e1c7c-914f-4a24-940d-fbecc6126d96"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "53bf3d1b-3245-46fd-9d09-0e0eeee70b22",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e04228b3-cbc4-46f4-bde3-d6e6d853f0d4"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e4112494-a3e0-45c4-893d-c8d9ef9e3d18",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e04228b3-cbc4-46f4-bde3-d6e6d853f0d4"
    }
  ]
}