{
  "Name": "RiftDistortShader",
  "_id": "be82b1cd-e905-4c5e-aff3-b1e4143b7b62",
  "Namespace": "lib.io.rift",
  "Description": "Rift Distortion Shader",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "17edbd18-ce41-4aeb-a659-95a2cfde868e",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "\r",
          "uniform extern texture ScreenTexture;    \r",
          "uniform extern bool drawLeftLens = true;\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D Image;",
          "float distK0;",
          "float distK1;",
          "float distK2;",
          "float distK3;",
          "float imageScaleFactor;",
          "float4 chromaAb;",
          "//<<< _parameters\r",
          "float widthToHeight;\r",
          "float2 direction;\r",
          "\r",
          "//>>> __setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< __setup\r",
          "\r",
          "//>>> __declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< __declarations\r",
          "\r",
          "\r",
          "\r",
          "",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "\r",
          "\r",
          "/*\r",
          "static const int NUMWT = 10;\r",
          "static const float Gauss[NUMWT] = { 0.93, 0.86, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1 };\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float2 dir = direction;\r",
          "    dir *= 0.01*Size/NumberOfSamples;\r",
          "    dir.y *= widthToHeight;\r",
          "\r",
          "    float2 pos = dir;\r",
          "    float4 c = txDiffuse.Sample(samLinear, input.texCoord);\r",
          "    float totalWeight = 1;\r",
          "    for (int i = 0; i < NumberOfSamples; ++i)\r",
          "    {\r",
          "        float index = (float)i*(NUMWT - 1)/NumberOfSamples;\r",
          "        float weight = lerp(Gauss[(int)index], Gauss[(int)index + 1], frac(index));\r",
          "        c += txDiffuse.Sample(samLinear, input.texCoord + pos)*weight;\r",
          "        c += txDiffuse.Sample(samLinear, input.texCoord - pos)*weight;\r",
          "        pos += dir;\r",
          "        totalWeight += 2*weight;\r",
          "    }\r",
          "\r",
          "    //c.rgb = float3(Offset, Offset, Offset) + c.rgb/totalWeight*Glow;\r",
          "    //c.a = 1.0;\r",
          "    c = float4(Offset, Offset, Offset, Offset) + c/totalWeight*Glow;\r",
          "\r",
          "    return c;\r",
          "}\r",
          "*/\r",
          "\r",
          "/*\r",
          "sampler ScreenS = sampler_state\r",
          "{\r",
          "\tTexture = <ScreenTexture>;    \r",
          "};\r",
          "*/\r",
          "\r",
          "SamplerState ScreenSampler\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "//float4 texColor = diffuseMap.Sample(DiffuseSampler, In.texCoord);\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "//float4 OculusPixelShaderFunction(float2 texCoord: TEXCOORD0) : SV_Target\r",
          "{\r",
          "\tfloat3 outColor;\r",
          "\tfloat lensOffset = -0.0635;\r",
          "\tfloat2 lensCenter;\r",
          "\tfloat2 scaleIn;\r",
          "\tfloat2 scale;\r",
          "\tfloat xShift = -0.08;    \r",
          "\tfloat aspectRatio = 0.8888f;\r",
          "\tfloat scaleFactor = 0.5f;//0.5/2.0;\r",
          "\tfloat scaleInFactor = 2.0f;//2.0/0.5;\r",
          "\t\r",
          "\t//return Image.Sample(ScreenSampler, input.texCoord);\r",
          "\t//return float4( input.texCoord.y *1, 0,0,1);\r",
          "\t\r",
          "\tif (drawLeftLens)\r",
          "\t{\r",
          "\t\tlensCenter.x = 0.5f + lensOffset * 0.5;\r",
          "\t\tinput.texCoord.x = input.texCoord.x + xShift;\r",
          "\t}\r",
          "\telse\r",
          "\t{\r",
          "\t\tlensCenter.x = 0.5f - lensOffset * 0.5;\r",
          "\t\tinput.texCoord.x = input.texCoord.x - xShift;\r",
          "\t}\r",
          "\tlensCenter.y = 0.5;\r",
          "\tscaleFactor = 0.5f;//1.0/2.0;\r",
          "\tscaleInFactor = 2.0f;//2.0/1.0;\r",
          "\tscale.x = scaleFactor * imageScaleFactor;\r",
          "\tscale.y = scaleFactor * aspectRatio * imageScaleFactor;\r",
          "\tscaleIn.x = scaleInFactor;\r",
          "\tscaleIn.y = scaleInFactor / aspectRatio;\r",
          "\t\r",
          "\tfloat2 theta = (input.texCoord - lensCenter ) * scaleIn;\r",
          "\tfloat rSq = pow(theta.x ,2) + pow (theta.y, 2);\r",
          "\t\r",
          "\tfloat2 rvector = theta * (chromaAb.x + chromaAb.y * rSq) * (distK1 + distK2 * rSq  +  distK3 * pow(rSq,2) );\r",
          "\tfloat2 gvector = theta * (1.0f + chromaAb.w * rSq) * (distK1 + distK2 * rSq  +  distK3 * pow(rSq,2) );\r",
          "\tfloat2 bvector = theta * (chromaAb.z + chromaAb.w * rSq) * (distK1 + distK2 * rSq  +  distK3 * pow(rSq,2) );\r",
          "\t\r",
          "\tfloat2 rNewVector = lensCenter + scale * rvector;\r",
          "\tfloat2 gNewVector = lensCenter + scale * gvector;\r",
          "\tfloat2 bNewVector = lensCenter + scale * bvector;\r",
          "\t\r",
          "\t//float2 newVector =  lensCenter + scale * rvector;\r",
          "\t\r",
          "\tif (bNewVector.x < 0.0 || bNewVector.x > 1.0f || bNewVector.y < 0.0 || bNewVector.y > 1.0f)\r",
          "\t{\r",
          "\t\treturn float4(0,0.0,0.0,1.0);\r",
          "\t}\r",
          "\telse\r",
          "\t{\r",
          "\t\t//float4 target = tex2D(ScreenS, newVector);\r",
          "\t\toutColor.r = Image.Sample(ScreenSampler, rNewVector).r;\r",
          "\t\toutColor.g = Image.Sample(ScreenSampler, rNewVector).g;\r",
          "\t\toutColor.b = Image.Sample(ScreenSampler, rNewVector).b;\r",
          "\t\toutColor.r = rNewVector.y;\r",
          "\t\t\r",
          "\t\t//outColor.r = tex2D(ScreenS, rNewVector).r;\r",
          "\t\t//outColor.g = tex2D(ScreenS, gNewVector).g;\r",
          "\t\t//outColor.b = tex2D(ScreenS, bNewVector).b;\r",
          "\t\t\r",
          "\t\treturn float4(outColor.r, outColor.g, outColor.b, 1.0f);\r",
          "\t\t//return float4(target.r * 1.0f, target.g *1.0f, target.b * 1.0f, 1.0f); \r",
          "\t}\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "\r",
          "\r",
          "/*\r",
          "technique10 Render  \r",
          "{\r",
          "\tpass Pass1\r",
          "\t{\r",
          "\t\tPixelShader = compile ps_5_0 OculusPixelShaderFunction();\r",
          "\t}\r",
          "}\r",
          "*/"
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "88f701b3-c2cb-4411-adf0-d114313df17c",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "distK0",
      "MetaInstanceID": "30821ca6-4688-496d-968c-f5ae3995e3fe",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10",
      "Max": "10",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "distK1",
      "MetaInstanceID": "ba1ca952-d846-4db2-b91f-29ba322ab8f8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10",
      "Max": "10",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "distK2",
      "MetaInstanceID": "5c6d684f-d029-43e6-b692-746350107e8d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "distK3",
      "MetaInstanceID": "1c8ff58b-e2f9-4be8-bad9-3075d4e4d2ca",
      "DefaultValue": {
        "Type": "Float",
        "Value": "9"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "imageScaleFactor",
      "MetaInstanceID": "6c7b5a77-79f4-48bc-89c5-630588f92c75",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "chromaAb.X",
      "MetaInstanceID": "c0fbb67d-1f04-4ba1-b707-b044acbaa755",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "chromaAb.Y",
      "MetaInstanceID": "4becf8fb-191e-4917-bf64-e60774c44a43",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "chromaAb.Z",
      "MetaInstanceID": "62e8e4d1-07c7-4bf8-818e-2d0498d3a7b1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "chromaAb.W",
      "MetaInstanceID": "e959e31c-af47-4915-a6d9-722f0738b786",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "60f6ac8f-fe06-4127-a109-c92a13a38e11",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "670d36d9-ec3b-4d56-99ad-25a0aa5fa7ed",
      "MetaID": "41f9de8f-51a5-4b41-89c8-feeee2ddeff0",
      "Name": "RiftDistortShaderFunc",
      "Version": "1af97178-3fc9-44d9-bf29-8961cce1b2cf",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using SharpDX.DXGI;",
        "",
        "namespace Framefield.Core.ID41f9de8f_51a5_4b41_89c8_feeee2ddeff0",
        "{",
        "    public class Class_RiftDistortShader : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            distK0 = 2,",
        "            distK1 = 3,",
        "            distK2 = 4,",
        "            distK3 = 5,",
        "            imageScaleFactor = 6,",
        "            chromaAbX = 7,",
        "            chromaAbY = 8,",
        "            chromaAbZ = 9,",
        "            chromaAbW = 10",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Image = inputs[(int)InputId.Image].Eval(context).Image; if (Image == null) return context;",
        "            var distK0 = inputs[(int)InputId.distK0].Eval(context).Value;",
        "            var distK1 = inputs[(int)InputId.distK1].Eval(context).Value;",
        "            var distK2 = inputs[(int)InputId.distK2].Eval(context).Value;",
        "            var distK3 = inputs[(int)InputId.distK3].Eval(context).Value;",
        "            var imageScaleFactor = inputs[(int)InputId.imageScaleFactor].Eval(context).Value;",
        "            var chromaAbX = inputs[(int)InputId.chromaAbX].Eval(context).Value;",
        "            var chromaAbY = inputs[(int)InputId.chromaAbY].Eval(context).Value;",
        "            var chromaAbZ = inputs[(int)InputId.chromaAbZ].Eval(context).Value;",
        "            var chromaAbW = inputs[(int)InputId.chromaAbW].Eval(context).Value;",
        "            var chromaAb = new Vector4(chromaAbX, chromaAbY, chromaAbZ, chromaAbW);",
        "            //<<< _params",
        "",
        "",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 1));",
        "",
        "                //>>> _setup",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"distK0\").AsScalar().Set(distK0);",
        "                    _effect.GetVariableByName(\"distK1\").AsScalar().Set(distK1);",
        "                    _effect.GetVariableByName(\"distK2\").AsScalar().Set(distK2);",
        "                    _effect.GetVariableByName(\"distK3\").AsScalar().Set(distK3);",
        "                    _effect.GetVariableByName(\"imageScaleFactor\").AsScalar().Set(imageScaleFactor);",
        "                    _effect.GetVariableByName(\"chromaAb\").AsVector().Set(new Vector4(chromaAbX, chromaAbY, chromaAbZ, chromaAbW));",
        "                //<<< _setup",
        "",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "670d36d9-ec3b-4d56-99ad-25a0aa5fa7ed",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "60f6ac8f-fe06-4127-a109-c92a13a38e11"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "17edbd18-ce41-4aeb-a659-95a2cfde868e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "670d36d9-ec3b-4d56-99ad-25a0aa5fa7ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "88f701b3-c2cb-4411-adf0-d114313df17c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "670d36d9-ec3b-4d56-99ad-25a0aa5fa7ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "30821ca6-4688-496d-968c-f5ae3995e3fe",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "670d36d9-ec3b-4d56-99ad-25a0aa5fa7ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ba1ca952-d846-4db2-b91f-29ba322ab8f8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "670d36d9-ec3b-4d56-99ad-25a0aa5fa7ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5c6d684f-d029-43e6-b692-746350107e8d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "670d36d9-ec3b-4d56-99ad-25a0aa5fa7ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1c8ff58b-e2f9-4be8-bad9-3075d4e4d2ca",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "670d36d9-ec3b-4d56-99ad-25a0aa5fa7ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6c7b5a77-79f4-48bc-89c5-630588f92c75",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "670d36d9-ec3b-4d56-99ad-25a0aa5fa7ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c0fbb67d-1f04-4ba1-b707-b044acbaa755",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "670d36d9-ec3b-4d56-99ad-25a0aa5fa7ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4becf8fb-191e-4917-bf64-e60774c44a43",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "670d36d9-ec3b-4d56-99ad-25a0aa5fa7ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "62e8e4d1-07c7-4bf8-818e-2d0498d3a7b1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "670d36d9-ec3b-4d56-99ad-25a0aa5fa7ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e959e31c-af47-4915-a6d9-722f0738b786",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "670d36d9-ec3b-4d56-99ad-25a0aa5fa7ed"
    }
  ]
}