{
  "Name": "BeatTapper (OLD)",
  "_id": "982a79d4-75f9-4080-a9a4-1e089bd33484",
  "Namespace": "lib.time",
  "Description": "Generates a coherent timing-signal that can be used for VJ like projects. It's best used with [KeyInput] or [MidiInput].\r\n\r\n.TriggerImpact - small values are more precise but will take longer to adjust sync.\r\n\r\n.OutputDamping - How long it takes for the output-signal to blend to new sync. Use values close to 1 to avoid jumps in timing.\r\n\r\nSee [BeatTappingExample] for more details how to use this operator.",
  "Inputs": [
    {
      "Name": "TapTrigger",
      "MetaInstanceID": "d7309887-62db-4811-a192-9fb0ee3c50a4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ResyncTrigger",
      "MetaInstanceID": "64efc115-e30b-4d77-b116-2966ee0738fc",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DefaultBPM",
      "MetaInstanceID": "de1f3b79-7082-4f66-b8a1-26ae16e61f2f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "120.02"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TriggerImpact",
      "MetaInstanceID": "3e2e1b75-0643-4b6e-bc64-141759bab2f2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.15"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SmoothSyncChanges",
      "MetaInstanceID": "c6e186a5-0cf5-4aad-8a7a-b63efafc1367",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.95"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BeatsPerBar",
      "MetaInstanceID": "b1f2b591-6b09-4c82-96cf-c0950bdb938c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "4"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ResetTotalTrigger",
      "MetaInstanceID": "ebc768fd-88e9-498f-92ec-fed84f1dd6f2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SmoothBPMChanges",
      "MetaInstanceID": "38810f63-c574-4fc7-b26f-9feb18069923",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.975"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Fragment",
      "MetaInstanceID": "a527c51c-ecd1-4edc-98e5-8617233323c5",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "BPM",
      "MetaInstanceID": "5062984b-b83e-4db2-8ad3-a54a3b916198",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "SyncedTime",
      "MetaInstanceID": "c5573791-b63e-4bba-8e92-d86d7318dc1f",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "6012ed21-89de-4df6-8ee1-9729a0784377",
      "MetaID": "afd15543-cb40-4792-aec0-285294dae611",
      "Name": "BeatTapper (OLD)Func",
      "Version": "dcce9eaa-f1b0-4859-83d1-e502e4188de3",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.IDafd15543_cb40_4792_aec0_285294dae611",
        "{",
        "    public class Class_BeatTapper__OLD_ : OperatorPart.Function, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            TapTrigger = 0,",
        "            ResyncTrigger = 1,",
        "            DefaultBPM = 2,",
        "            TriggerImpact = 3,",
        "            SmoothSyncChanges = 4,",
        "            BeatsPerBar = 5,",
        "            ResetTotalTrigger = 6,",
        "            SmoothBPMChanges = 7",
        "        }",
        "        //<<< _inputids",
        "        ",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            Fragment = 0,",
        "            BPM = 1,",
        "            SyncedTime = 2",
        "        }",
        "        //<<< _outputids",
        "                ",
        "        /*",
        "            This code seems much too complicated, but getting flexible and conherent beat detection",
        "            seems to be much trickier, than I though. After playing with a couple of methods, it ",
        "            finally settled on keeping a \"fragmentTime\" counter wrapping over the _beatDuration.",
        "            The fragmentTime is than additionaly offset with. Maybe there is a method that works",
        "            without the separate offset-variable, but since I wanted to have damped transition is",
        "            syncing (no jumps please), keeping both seperated seemed to work.",
        "        */",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) ",
        "        {",
        "            //>>> _params",
        "            var TapTrigger = inputs[(int)InputId.TapTrigger].Eval(context).Value;",
        "            var ResyncTrigger = inputs[(int)InputId.ResyncTrigger].Eval(context).Value;",
        "            var DefaultBPM = inputs[(int)InputId.DefaultBPM].Eval(context).Value;",
        "            var TriggerImpact = inputs[(int)InputId.TriggerImpact].Eval(context).Value;",
        "            var SmoothSyncChanges = inputs[(int)InputId.SmoothSyncChanges].Eval(context).Value;",
        "            var BeatsPerBar = inputs[(int)InputId.BeatsPerBar].Eval(context).Value;",
        "            var ResetTotalTrigger = inputs[(int)InputId.ResetTotalTrigger].Eval(context).Value;",
        "            var SmoothBPMChanges = inputs[(int)InputId.SmoothBPMChanges].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            if( _dampedBeatDuration == 0 || DefaultBPM !=_lastDefaultBpm)  {",
        "                _lastDefaultBpm = DefaultBPM;",
        "                _dampedBeatDuration = 60 / DefaultBPM;",
        "            }",
        "            ",
        "           ",
        "",
        "            var timeDelta = context.GlobalTime - _lastFragmentUpdateTime;",
        "",
        "            if(timeDelta != 0) ",
        "            {            ",
        "                _lastFragmentUpdateTime = context.GlobalTime;",
        "                            ",
        "                _fragmentTime += timeDelta;",
        "                var barDuration = _dampedBeatDuration * BeatsPerBar;",
        "                ",
        "                _fragmentTime %= barDuration;",
        "                //if( _fragmentTime > barDuration)",
        "                //    _fragmentTime -= barDuration;",
        "                            ",
        "                // Detect Flanks",
        "                bool justTapped = (TapTrigger - _oldTapTrigger > 0.5f);",
        "                _oldTapTrigger =TapTrigger;",
        "    ",
        "                bool justResynced = (ResyncTrigger - _oldResyncTrigger > 0.5f);",
        "                _oldResyncTrigger =ResyncTrigger;",
        "                ",
        "                if(ResetTotalTrigger > 0.5f) {",
        "                    _barCounter = 0;",
        "                }",
        "                ",
        "                ",
        "                if(justTapped) ",
        "                {                ",
        "                    bool newSeriesStarted = _tapTimes.Count == 0 || Math.Abs(context.GlobalTime - _tapTimes.Last()) > 4* _beatDuration;",
        "                    ",
        "                    if(newSeriesStarted) {",
        "                        Logger.Info(\"New Tap Series started\");",
        "                        _tapTimes.Clear();",
        "                    }",
        "    ",
        "                    _tapTimes.Add( context.GlobalTime );",
        "                    ",
        "                    var zonesCount = _tapTimes.Count - 1; ",
        "                    if( zonesCount > 1) {",
        "                        ",
        "                        var lastDuration = _tapTimes[_tapTimes.Count-1] - _tapTimes[_tapTimes.Count-2];",
        "                                            ",
        "                        _beatDuration = _beatDuration * (1-TriggerImpact) + lastDuration * TriggerImpact;                        ",
        "                        var stepOffset = ( (_fragmentTime - _dampedBeatOffset + _dampedBeatDuration/2) % _dampedBeatDuration ) ",
        "                                       - _dampedBeatDuration /2 ;",
        "                        ",
        "                        _offset += stepOffset * TriggerImpact * 2;",
        "                        Logger.Info(this, \"stepOffset {0:0.00}  FragmentTime {1:0.00} Offset {2:0.00}   BeatDuration {3:0.00} \", stepOffset, _fragmentTime, _offset, _dampedBeatDuration);",
        "                    }",
        "                }",
        "",
        "                ",
        "                if(justResynced) {                    ",
        "                    _offset = _fragmentTime;",
        "                    if( _offset > barDuration / 2)",
        "                        _offset -= barDuration;",
        "                }",
        "                ",
        "                // Smooth offset and beatduration to avoid jumps",
        "                _dampedBeatDuration = _dampedBeatDuration * SmoothBPMChanges + _beatDuration * (1-SmoothBPMChanges);",
        "                _dampedBeatOffset = _dampedBeatOffset * SmoothSyncChanges + _offset * (1-SmoothSyncChanges);",
        "",
        "              ",
        "                var lastBarTime = _barTime;",
        "                ",
        "                _barTime = (_fragmentTime - _dampedBeatOffset) % barDuration;",
        "                if(_barTime < 0)",
        "                    _barTime += barDuration;",
        "                _barTime /= barDuration;",
        "                ",
        "                var nextBarStarted =  _barTime - lastBarTime < -barDuration / 16 ;",
        "                if (nextBarStarted) {",
        "                    _barCounter++;",
        "                }",
        "            }            ",
        "                       ",
        "            switch(outputIdx) ",
        "            {",
        "                case (int)OutputId.Fragment:                                 ",
        "                    context.Value = 1-(float)_barTime;                    ",
        "                    break;",
        "                    ",
        "                case (int)OutputId.BPM:",
        "                    context.Value =  (float)(60.0f/_dampedBeatDuration);",
        "                    break;",
        "                    ",
        "                case (int)OutputId.SyncedTime:",
        "                    context.Value = (float)(_barCounter + _barTime);",
        "                    break;",
        "                    ",
        "//                case (int)OutputId.Offset:",
        "//                    context.Value = (float)(_offset);",
        "//                    break;",
        "            }            ",
        "            ",
        "            return context;",
        "        }",
        "        ",
        "        //double _bpm =0;",
        "        double _offset;",
        "        double _barTime;",
        "        double _dampedBeatDuration= 0.5;",
        "        double _dampedBeatOffset = 0;",
        "        ",
        "        int _barCounter = 0;",
        "        ",
        "        double _fragmentTime;",
        "        double _lastFragmentUpdateTime;",
        "        ",
        "        float _lastDefaultBpm;",
        "        float _oldTapTrigger;",
        "        float _oldResyncTrigger;",
        "        double _beatDuration=1;",
        "        double _syncedTime = 0;",
        "        ",
        "        List<double> _tapTimes = new List<double>();",
        "        ",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d7309887-62db-4811-a192-9fb0ee3c50a4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6012ed21-89de-4df6-8ee1-9729a0784377"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "64efc115-e30b-4d77-b116-2966ee0738fc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6012ed21-89de-4df6-8ee1-9729a0784377"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "de1f3b79-7082-4f66-b8a1-26ae16e61f2f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6012ed21-89de-4df6-8ee1-9729a0784377"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3e2e1b75-0643-4b6e-bc64-141759bab2f2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6012ed21-89de-4df6-8ee1-9729a0784377"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c6e186a5-0cf5-4aad-8a7a-b63efafc1367",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6012ed21-89de-4df6-8ee1-9729a0784377"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b1f2b591-6b09-4c82-96cf-c0950bdb938c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6012ed21-89de-4df6-8ee1-9729a0784377"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ebc768fd-88e9-498f-92ec-fed84f1dd6f2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6012ed21-89de-4df6-8ee1-9729a0784377"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "38810f63-c574-4fc7-b26f-9feb18069923",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6012ed21-89de-4df6-8ee1-9729a0784377"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6012ed21-89de-4df6-8ee1-9729a0784377",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a527c51c-ecd1-4edc-98e5-8617233323c5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6012ed21-89de-4df6-8ee1-9729a0784377",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5062984b-b83e-4db2-8ad3-a54a3b916198"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6012ed21-89de-4df6-8ee1-9729a0784377",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "c5573791-b63e-4bba-8e92-d86d7318dc1f"
    }
  ]
}