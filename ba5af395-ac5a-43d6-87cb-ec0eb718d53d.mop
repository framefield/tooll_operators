{
  "Name": "FindFlanksInValueRange",
  "_id": "ba5af395-ac5a-43d6-87cb-ec0eb718d53d",
  "Namespace": "lib.math.helper",
  "Description": "Samples the incoming value over a time range and find and count value changes by index. This can be useful for finding and counting beats in a sound track.\r\n\r\nIt samples the incoming value ones and should be fast.",
  "Inputs": [
    {
      "Name": "AnimatedValue",
      "MetaInstanceID": "e4e302ed-6bac-42ca-9ae8-548391dc6e5b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TimeRange.Start",
      "MetaInstanceID": "a24fbe1d-beed-4e38-82cb-d5d173f7e27c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TimeRange.End",
      "MetaInstanceID": "ae45041e-ad4b-460f-adda-ea5e4590ac31",
      "DefaultValue": {
        "Type": "Float",
        "Value": "500"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TimeResolution",
      "MetaInstanceID": "13c4d302-5d75-48a7-84b6-145fce88df20",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "120",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ResampleTrigger",
      "MetaInstanceID": "26e6e08c-9adf-420e-8d4c-44c7e7036a7e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Product",
      "MetaInstanceID": "b72c72c0-5e26-43c8-bedd-965db53beb24",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "b70ebc1c-a3ec-4f04-8f62-3071078f770e",
      "MetaID": "a06919b3-0638-4ad7-a30c-2296c0e5d500",
      "Name": "FindFlanksInValueRangeFunc",
      "Version": "9abeb0be-f2ec-4fe6-8cf5-2256b6e6927c",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.IDa06919b3_0638_4ad7_a30c_2296c0e5d500",
        "{",
        "    public class Class_FindFlanksInValueRange : OperatorPart.Function, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            AnimatedValue = 0,",
        "            TimeRangeStart = 1,",
        "            TimeRangeEnd = 2,",
        "            TimeResolution = 3,",
        "            ResampleTrigger = 4",
        "        }",
        "        //<<< _inputids",
        "        ",
        "        ",
        "        ",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var AnimatedValue = inputs[(int)InputId.AnimatedValue].Eval(context).Value;",
        "            var TimeRangeStart = inputs[(int)InputId.TimeRangeStart].Eval(context).Value;",
        "            var TimeRangeEnd = inputs[(int)InputId.TimeRangeEnd].Eval(context).Value;",
        "            var TimeRange = new Vector2(TimeRangeStart, TimeRangeEnd);",
        "            var TimeResolution = inputs[(int)InputId.TimeResolution].Eval(context).Value;",
        "            var ResampleTrigger = inputs[(int)InputId.ResampleTrigger].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            ",
        "            if(Changed) ",
        "            {",
        "            ",
        "                var needsResampling =  (TimeRangeStart != _startTime)",
        "                                    || (TimeRangeEnd != _endTime)",
        "                                    || (TimeResolution != _timeResolution)",
        "                                    || ResampleTrigger > 0.5f;",
        "                ",
        "                if( needsResampling) ",
        "                {",
        "                    _startTime = TimeRangeStart;",
        "                    _endTime = TimeRangeEnd;",
        "                    _timeResolution = TimeResolution;",
        "                    UpdateSampleCount();",
        "                    Logger.Info(this, \"Resample \" + _sampleCount + \" Samples\");",
        "                    ",
        "                    var valueInput = inputs[(int)InputId.AnimatedValue];                    ",
        "                    FindFlankIndexesInValue(valueInput,  context);                                        ",
        "                }",
        "",
        "                Changed =false;",
        "            }",
        "            ",
        "            var sampleIndex = (int)Utilities.Clamp( (context.Time - _startTime) * TimeResolution, 0, _sampleCount-1);",
        "            context.Value = _bufferA[sampleIndex];",
        "            return context;",
        "        }",
        "        ",
        "",
        "        ",
        "        ",
        "        private void UpdateSampleCount() ",
        "        {",
        "            _sampleCount = (int) Utilities.Clamp( (_endTime - _startTime) * _timeResolution, 2, MAX_SAMPLE_STEPS);",
        "            if( _bufferA == null ||  _bufferA.Length != _sampleCount) ",
        "            {",
        "                _bufferA = new float[_sampleCount];",
        "                //_bufferB = new float[_sampleCount];",
        "            }        ",
        "        }",
        "",
        "",
        "        private void FindFlankIndexesInValue(OperatorPart valueInput, OperatorPartContext context) ",
        "        {",
        "            var previousTime = context.Time;",
        "",
        "            OperatorPart.ChangedPropagationEnabled = false;",
        "            ",
        "            var invalidator = new OperatorPart.InvalidateTimeAccessors();",
        "            var lastV = 0f;",
        "            var valueChangeIndex = 0f;",
        "            ",
        "            for (var i = 0; i < _sampleCount - 1; i++)",
        "            {   ",
        "                var f = i/(float)_sampleCount;",
        "                var t = Utilities.Lerp(_startTime, _endTime, f);                 ",
        "                context.Time = t;",
        "                var v = valueInput.Eval(context).Value;",
        "                if( Math.Abs( v - lastV) > 0.001f) {",
        "                    valueChangeIndex++;",
        "                }",
        "                lastV = v;",
        "                _bufferA[i] = valueChangeIndex;",
        "",
        "                // Invalidate all time accessors",
        "                valueInput.TraverseWithFunction(null, invalidator);                                        ",
        "            }",
        "            ",
        "            OperatorPart.ChangedPropagationEnabled = true;",
        "            context.Time = previousTime;            ",
        "            valueInput.TraverseWithFunction(null, invalidator);          ",
        "        }",
        "        ",
        "        ",
        "        private float _startTime;",
        "        private float _endTime;",
        "        private float _timeResolution;",
        "        private const int MAX_SAMPLE_STEPS = 100000;",
        "        private int _sampleCount= 1;",
        "        private int _smoothSamples = 2;",
        "        ",
        "        private float[] _bufferA;",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e4e302ed-6bac-42ca-9ae8-548391dc6e5b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b70ebc1c-a3ec-4f04-8f62-3071078f770e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a24fbe1d-beed-4e38-82cb-d5d173f7e27c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b70ebc1c-a3ec-4f04-8f62-3071078f770e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ae45041e-ad4b-460f-adda-ea5e4590ac31",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b70ebc1c-a3ec-4f04-8f62-3071078f770e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "13c4d302-5d75-48a7-84b6-145fce88df20",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b70ebc1c-a3ec-4f04-8f62-3071078f770e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "26e6e08c-9adf-420e-8d4c-44c7e7036a7e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b70ebc1c-a3ec-4f04-8f62-3071078f770e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b70ebc1c-a3ec-4f04-8f62-3071078f770e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b72c72c0-5e26-43c8-bedd-965db53beb24"
    }
  ]
}