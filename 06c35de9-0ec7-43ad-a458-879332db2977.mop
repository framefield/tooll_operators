{
  "Name": "LoadImgWithoutCaching",
  "_id": "06c35de9-0ec7-43ad-a458-879332db2977",
  "Namespace": "user.pixtur.research",
  "Description": "This loads an image bypassind tooll.io's Resource Manager. This can be faster can loading images from an image sequrence.",
  "Inputs": [
    {
      "Name": "ImagePath",
      "MetaInstanceID": "c57f02b3-46ad-4ecf-9a64-08a50ec23011",
      "DefaultValue": {
        "Type": "Text",
        "Value": "assets-common/image/chipmunk.jpg"
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "1c7cb862-1d85-4130-a18b-df51b5babc9f",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    },
    {
      "Name": "Size.X",
      "MetaInstanceID": "eeff5cfa-4129-4ad1-be6a-7280469f742d",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "Size.Y",
      "MetaInstanceID": "b2bf3aa0-4cd1-4920-8c49-75f28436f45b",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "73cbf301-ab95-46da-8f23-6258097cf4ae",
      "MetaID": "b9c5480d-835e-4cc9-b1e2-477ef584630f",
      "Name": "LoadImgWithoutCachingFunc",
      "Version": "87c95453-a995-4f6e-81b3-9e85596c0566",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using System.IO;",
        "",
        "namespace Framefield.Core.IDb9c5480d_835e_4cc9_b1e2_477ef584630f",
        "{",
        "    public class Class_LoadImageFromSequence : OperatorPart.Function",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            ImagePath = 0",
        "        }",
        "        //<<< _inputids",
        "",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            Image = 0,",
        "            SizeX = 1,",
        "            SizeY = 2",
        "        }",
        "        //<<< _outputids",
        "",
        "        public override void Dispose() {",
        "            Utilities.DisposeObj(ref _imageTexture);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) ",
        "        {",
        "            //>>> _params",
        "            var ImagePath = inputs[(int)InputId.ImagePath].Eval(context).Text;",
        "            //<<< _params",
        "",
        "            if (ImagePath == _lastImage)",
        "                Changed = false;",
        "",
        "            _lastImage = ImagePath;",
        "",
        "            if (Changed)",
        "            {",
        "                Dispose();",
        "                if (File.Exists(ImagePath))",
        "                {",
        "                    //_imageResource = ResourceManager.ReadImage(ImagePath);",
        "                    _imageTexture = SharpDX.Direct3D11.Resource.FromFile<Texture2D>(D3DDevice.Device, ImagePath); ",
        "                    //Texture2D.ToFile(context.D3DDevice.ImmediateContext, _imageTexture, ImageFileFormat.Dds, ImagePath + \".dds\");",
        "                    _size = new Vector2(_imageTexture.Description.Width, _imageTexture.Description.Height); ",
        "                    //Logger.Info(\"loaded:\" + ImagePath);",
        "                }",
        "                else",
        "                {",
        "                    Logger.Error(this,\"Imagefile not found '{0}'\", ImagePath);",
        "                }",
        "",
        "                //somehow this will cause an exception",
        "                //FileInfo fi = new FileInfo(ImagePath);",
        "                //var depthFilename = fi.DirectoryName + \"\\\\\" + Path.GetFileNameWithoutExtension(fi.Name) + \"_depth.dds\";",
        "                //Logger.Error(this,\"'{0}'\", depthFilename);",
        "                //if (File.Exists(depthFilename))",
        "                //{",
        "                //    _depthImageResource = ResourceManager.ReadImage(depthFilename);",
        "                //}",
        "                Changed = false;",
        "            }",
        "",
        "            if (_imageTexture != null)",
        "            {",
        "                switch ((OutputId)outputIdx)",
        "                {",
        "                    case OutputId.Image:",
        "                        context.Image = _imageTexture;",
        "                        break;",
        "                    case OutputId.SizeX:",
        "                        context.Value = _size.X;",
        "                        break;",
        "                    case OutputId.SizeY:",
        "                        context.Value = _size.Y;",
        "                        break;",
        "                }",
        "            }",
        "            else",
        "            {",
        "                switch (outputIdx)",
        "                {",
        "                    case (int)OutputId.Image:",
        "                        context.Image = null;",
        "                        context.DepthImage = null;",
        "                        break;",
        "                    case (int)OutputId.SizeX:",
        "                        context.Value = 0;",
        "                        break;",
        "                    case (int)OutputId.SizeY:",
        "                        context.Value = 0;",
        "                        break;",
        "                }",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        //ImageResource _imageResource;",
        "        //ImageResource _depthImageResource;",
        "        Texture2D _imageTexture;",
        "        Vector2 _size;",
        "        String _lastImage = String.Empty;",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "73cbf301-ab95-46da-8f23-6258097cf4ae",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1c7cb862-1d85-4130-a18b-df51b5babc9f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c57f02b3-46ad-4ecf-9a64-08a50ec23011",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "73cbf301-ab95-46da-8f23-6258097cf4ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "73cbf301-ab95-46da-8f23-6258097cf4ae",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "eeff5cfa-4129-4ad1-be6a-7280469f742d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "73cbf301-ab95-46da-8f23-6258097cf4ae",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b2bf3aa0-4cd1-4920-8c49-75f28436f45b"
    }
  ]
}