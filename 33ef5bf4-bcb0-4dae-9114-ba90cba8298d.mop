{
  "Name": "_PointRenderer",
  "_id": "33ef5bf4-bcb0-4dae-9114-ba90cba8298d",
  "Namespace": "user.cynic",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "8dc3c329-19bc-4bbb-b543-607e6375959f",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "float4x4 cameraToObjectMatrix; // modelview inverse\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D Image;",
          "//<<< _parameters\r",
          "\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "BlendState SrcAlphaBlendingAdd\r",
          "{\r",
          "    BlendEnable[0] = TRUE;\r",
          "    SrcBlend = SRC_ALPHA;\r",
          "    DestBlend = DEST_ALPHA;\r",
          "    BlendOp = ADD;\r",
          "    SrcBlendAlpha = SRC_ALPHA;\r",
          "    DestBlendAlpha = DEST_ALPHA;\r",
          "    BlendOpAlpha = ADD;\r",
          "    RenderTargetWriteMask[0] = 0x0F;\r",
          "};\r",
          "\r",
          "DepthStencilState DisabledDepth\r",
          "{\r",
          "    DepthEnable = FALSE;\r",
          "};\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float3 pos : POSITION;\r",
          "};\r",
          "\r",
          "struct GS_IN\r",
          "{\r",
          "    float3 pos : Position;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "};\r",
          "\r",
          "\r",
          "//>>> VS\r",
          "GS_IN VS( VS_IN input )\r",
          "{\r",
          "    GS_IN output = (GS_IN)0;\r",
          "\r",
          "    output.pos = input.pos;\r",
          "\r",
          "    return output;\r",
          "}\r",
          "//<<< VS\r",
          "\r",
          "static const float scale = 0.03f;\r",
          "\r",
          "[maxvertexcount(4)]\r",
          "void GS(point GS_IN input[1], inout TriangleStream<PS_IN> spriteStream)\r",
          "{\r",
          "\tPS_IN output = (PS_IN)0;    \r",
          "    \r",
          "    float4 viewposition = mul(float4(input[0].pos, 1.0f), objectToWorldMatrix);\r",
          "    viewposition = mul(viewposition, worldToCameraMatrix);\r",
          "\r",
          "    float2 up = float2(0, 1);\r",
          "    float2 right = float2(1, 0);\r",
          "    \r",
          "    float4 positions[4] =\r",
          "    {\r",
          "        float4(-scale*right +  scale*up, 0, 0),\r",
          "        float4( scale*right +  scale*up, 0, 0),\r",
          "        float4(-scale*right + -scale*up, 0, 0),\r",
          "        float4( scale*right + -scale*up, 0, 0),\r",
          "    };\r",
          "\r",
          "    for (int i = 0; i < 4; ++i)\r",
          "    {\r",
          "\t\toutput.pos = mul(viewposition + positions[i], projMatrix);\r",
          "        spriteStream.Append(output);\r",
          "    }\r",
          "\r",
          "\tspriteStream.RestartStrip();\r",
          "}\r",
          "//<<< __GS\r",
          "\r",
          "\r",
          "float4 PS(PS_IN input) : SV_Target\r",
          "{\r",
          "    return float4(1,0,0,0.5f);\r",
          "}\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass P0\r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VS()));\r",
          "        SetGeometryShader(CompileShader(gs_5_0, GS()));\r",
          "        SetPixelShader(CompileShader(ps_5_0, PS()));\r",
          "    }\r",
          "} "
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "bb1c2144-0354-4e24-bbcb-58a61f09bd00",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Points",
      "MetaInstanceID": "421933e7-fbaa-4744-bff8-bdb825656acf",
      "DefaultValue": {
        "Type": "Dynamic",
        "Value": "Framefield.Core.Dynamic"
      },
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "fe5bfdfd-620a-403f-8604-a992cdad875f",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "bf69aca5-2b42-4a6e-a659-ab8456785d9e",
      "MetaID": "7612629f-f10e-4f05-9218-49945aba12f0",
      "Name": "_PointRendererFunc",
      "Version": "d81b98a2-0daa-4d5f-80fc-a2265d56e304",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using SharpDX;",
        "using SharpDX.Direct3D;",
        "using SharpDX.Direct3D11;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.ID7612629f_f10e_4f05_9218_49945aba12f0",
        "{",
        "    public class Class_PointRenderer : FXSourceCodeFunction, IFXSceneSourceCode",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Points = 2",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _inputLayout);",
        "            base.Dispose();",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            if (_firstEval) ",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "            ",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Image = inputs[(int)InputId.Image].Eval(context).Image; // Needs to be checked for null!",
        "            var Points = inputs[(int)InputId.Points].Eval(context).Dynamic;  // Needs to be checked for null!",
        "            //<<< _params",
        "            ",
        "            if (Image == null)",
        "            {",
        "                Logger.Error(this, \"No input image set.\");",
        "                return context;",
        "            }",
        "            ",
        "            if (Points == null)",
        "            {",
        "                Logger.Error(this, \"No input points set.\");",
        "                return context;",
        "            }",
        "            ",
        "            if (Changed || _inputElements == null)",
        "            {",
        "               _inputElements = new InputElement[]",
        "                                    {",
        "                                        new InputElement(\"POSITION\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 0, 0),",
        "                                    };",
        "",
        "",
        "                Utilities.DisposeObj(ref _inputLayout);",
        "                if (_effect != null)",
        "                {",
        "                    var technique = _effect.GetTechniqueByIndex(0);",
        "                    var pass = technique.GetPassByIndex(0);",
        "                    _inputLayout = new InputLayout(Core.D3DDevice.Device, pass.Description.Signature, _inputElements);",
        "                }",
        "            }",
        "",
        "",
        "            Changed = false;",
        "",
        "            var D3DDevice = context.D3DDevice;",
        "",
        "            try ",
        "            {",
        "                context.D3DDevice.ImmediateContext.ClearState();",
        "",
        "                context.ObjectTWorld = Matrix.Identity;",
        "                var matrixVariable = _effect.GetVariableByName(\"objectToWorldMatrix\").AsMatrix();",
        "                matrixVariable.SetMatrix(context.ObjectTWorld);",
        "                matrixVariable = _effect.GetVariableByName(\"worldToCameraMatrix\").AsMatrix();",
        "                matrixVariable.SetMatrix(context.WorldToCamera);",
        "                matrixVariable = _effect.GetVariableByName(\"cameraToObjectMatrix\").AsMatrix();",
        "                var cameraToObject = Matrix.Invert(/*context.ObjectTWorld */ context.WorldToCamera);",
        "                matrixVariable.SetMatrix(cameraToObject);",
        "                matrixVariable = _effect.GetVariableByName(\"projMatrix\").AsMatrix();",
        "                matrixVariable.SetMatrix(context.CameraProjection);",
        "                ",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                {",
        "                    if (context.DepthStencilView != null)",
        "                        context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.DepthStencilView, context.RenderTargetView);",
        "                    else",
        "                        context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.RenderTargetView);",
        "    ",
        "                    if (context.BlendState != null)",
        "                    {",
        "                        context.D3DDevice.ImmediateContext.OutputMerger.BlendState = context.BlendState;",
        "                    }",
        "    ",
        "                    if (context.DepthStencilState != null)",
        "                    {",
        "                        context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = context.DepthStencilState;",
        "                    }",
        "    ",
        "                    if (context.RasterizerState != null)",
        "                    {",
        "                        context.D3DDevice.ImmediateContext.Rasterizer.State = context.RasterizerState;",
        "                    }",
        "",
        "                    context.D3DDevice.ImmediateContext.Rasterizer.SetViewports(new [] { context.Viewport });",
        "                    context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = _inputLayout;",
        "                    context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.PointList;",
        "                    var pointsBuffer = Points.PosBuffer;",
        "                    context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(pointsBuffer, 64, 48));",
        "    ",
        "                    int numPoints = pointsBuffer.Description.SizeInBytes/12;",
        "                    var technique = _effect.GetTechniqueByIndex(0);",
        "                    for (int i = 0; i < technique.Description.PassCount; ++i)",
        "                    {",
        "                        technique.GetPassByIndex(i).Apply(context.D3DDevice.ImmediateContext);",
        "                        context.D3DDevice.ImmediateContext.Draw(numPoints, 0);",
        "                    }",
        "                }",
        "            }",
        "            catch (Exception exception) ",
        "            {",
        "                Logger.Error(this,\"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        InputLayout _inputLayout = null;",
        "        InputElement[] _inputElements = null;",
        "        Texture2D _image = null;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bf69aca5-2b42-4a6e-a659-ab8456785d9e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "fe5bfdfd-620a-403f-8604-a992cdad875f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8dc3c329-19bc-4bbb-b543-607e6375959f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "bf69aca5-2b42-4a6e-a659-ab8456785d9e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bb1c2144-0354-4e24-bbcb-58a61f09bd00",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "bf69aca5-2b42-4a6e-a659-ab8456785d9e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "421933e7-fbaa-4744-bff8-bdb825656acf",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "bf69aca5-2b42-4a6e-a659-ab8456785d9e"
    }
  ]
}