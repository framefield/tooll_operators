{
  "Name": "ReflectivePhongShader",
  "_id": "e8274e48-5e79-4469-8aa8-db3d783039cf",
  "Namespace": "lib.geometry.material",
  "Description": "Experimental Material that reflects the primary texture with a refraction like look. ",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "3525ee9f-e62a-4904-a62a-ac79d8d86e8e",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 objectToWorldMatrix;\r",
          "float4x4 worldToCameraMatrix;\r",
          "float4x4 cameraToObjectMatrix; // modelview inverse\r",
          "float4x4 projMatrix;\r",
          "float4x4 textureMatrix;\r",
          "\r",
          "float Refraction;\r",
          "float FallOff;\r",
          "float4 ReflectionColor;\r",
          "float2 RenderTargetSize;\r",
          "float4 BlendFactor;\r",
          "\r",
          "\r",
          "struct PointLight\r",
          "{\r",
          "    float4 position;\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float4 attenuation;\r",
          "};\r",
          "\r",
          "struct SpotLight\r",
          "{\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float constantAttenuation;\r",
          "    float linearAttenuation;\r",
          "    float quadraticAttenuation;\r",
          "    float spotCutoff;\r",
          "    float spotCosCutoff;\r",
          "    float spotExponent;\r",
          "};\r",
          "\r",
          "cbuffer FogSettings\r",
          "{\r",
          "    float4 fogColor;\r",
          "    float fogStart;\r",
          "    float fogEnd;\r",
          "    float fogScale;\r",
          "}\r",
          "\r",
          "cbuffer MaterialBuffer\r",
          "{\r",
          "    float4 materialAmbient;\r",
          "    float4 materialDiffuse;\r",
          "    float4 materialSpecular;\r",
          "    float4 materialEmission;\r",
          "    float materialShininess;\r",
          "};\r",
          "\r",
          "\r",
          "cbuffer PointLightsBuffer\r",
          "{\r",
          "    int numPointLights;\r",
          "    PointLight pointLights[3];\r",
          "};\r",
          "\r",
          "\r",
          "Texture2D txDiffuse;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Clamp;\r",
          "    AddressV = Clamp;\r",
          "};\r",
          "\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float4 posInWorld  : WORLD_POS;\r",
          "    float3 normal : NORMAL;   \r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float4 vertexColor : COLOR;\r",
          "    float3 fragPosToCamPos : POS;\r",
          "    float fogFragCoord : FALLO;\r",
          "};\r",
          "\r",
          "\r",
          "float mod(float a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "float3 mod(float3 a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "//>>>> VS2\r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.posInWorld = mul(input.pos, objectToWorldMatrix);",
          "    output.pos = mul(output.posInWorld, worldToCameraMatrix);",
          "    output.normal = mul(input.normal, (float3x3)objectToWorldMatrix);",
          "    output.fogFragCoord = abs(output.pos.z / input.pos.w);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = mul(float4(input.texCoord, 0, 1), textureMatrix).xy;",
          "    output.fragPosToCamPos = normalize(mul(cameraToObjectMatrix[3], objectToWorldMatrix) - output.posInWorld);",
          "    output.vertexColor = input.col;",
          "      ",
          "    return output;",
          "}",
          "//<<< VS\r",
          "\r",
          "float4 calcLightSource(float3 fragPosInWorld, int lightIdx, float3 cameraVector, float3 norm, float4 baseColor)\r",
          "{\r",
          "    float3 lightVector = pointLights[lightIdx].position - fragPosInWorld;\r",
          "    float dist = length(lightVector);\r",
          "    lightVector = normalize(lightVector);\r",
          "    float nxDir = max(0.0, dot(norm, lightVector));\r",
          "    float4 diffuse = pointLights[lightIdx].diffuse * nxDir;\r",
          "    float specularPower = 0.0;\r",
          "    if (nxDir > 0.0)\r",
          "    {\r",
          "        float3 r = reflect(-lightVector, norm);\r",
          "        float rl = max(0.0, dot(r, cameraVector));\r",
          "        specularPower = pow(rl, materialShininess);\r",
          "    }\r",
          "\r",
          "    float attenuation = 1.0 / (pointLights[lightIdx].attenuation.x +\r",
          "                               pointLights[lightIdx].attenuation.y * dist +\r",
          "                               pointLights[lightIdx].attenuation.z * dist * dist);\r",
          "    float4 color = materialAmbient * pointLights[lightIdx].ambient * attenuation +\r",
          "                   materialDiffuse * (diffuse * baseColor * attenuation) +\r",
          "                   materialSpecular * pointLights[lightIdx].specular * specularPower * attenuation;\r",
          "\r",
          "    return color;\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "//>>>> PS\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float2 newTexCoords = input.texCoord;\r",
          "    float3 norm = normalize(input.normal);\r",
          "    float4 baseColor = input.vertexColor;\r",
          "    \r",
          "    //return float4(normalAngle/10+0.5,0,0,1);\r",
          "\r",
          "        \r",
          "    float4 color = materialEmission*baseColor;\r",
          "    for (int lightIdx = 0; lightIdx < numPointLights; ++lightIdx)\r",
          "    {\r",
          "        color += calcLightSource(input.posInWorld, lightIdx, input.fragPosToCamPos, norm, baseColor);\r",
          "    }\r",
          "        \r",
          "    //float normalAngle = pow( dot( normalize(input.fragPosToCamPos), normalize(input.normal)) , FallOff);\r",
          "    float d= dot( normalize(input.fragPosToCamPos), normalize(input.normal)) ;\r",
          "    \r",
          "    float normalAngle = d < 0 ?  pow( -d, FallOff*2) : pow(d, FallOff);\r",
          "    \r",
          "    //return float4( normalAngle,0,0,1);\r",
          "    \r",
          "    float2 bgPos = float2(input.pos.x / RenderTargetSize.x, input.pos.y / RenderTargetSize.y);\r",
          "    //float2 displacedBgPos = bgPos + normalAngle* input.normal.xy * Refraction;\r",
          "    float2 displacedBgPos = bgPos + normalAngle * Refraction;\r",
          "    \r",
          "    displacedBgPos = mul(float4(displacedBgPos, 0, 1), textureMatrix).xy;\r",
          "    \r",
          "    float4 glassColor= txDiffuse.Sample(samLinear, float2(displacedBgPos.x , displacedBgPos.y )); \r",
          "    color= lerp( glassColor * BlendFactor, color, BlendFactor.a) + glassColor * ReflectionColor * ReflectionColor.a;\r",
          "\r",
          "    float fog = (fogEnd - input.fogFragCoord) * fogScale;\r",
          "    fog = clamp(fog, 0.0, 1.0);\r",
          "    return float4(lerp(fogColor.rgb, color.rgb, fog), materialDiffuse.a * baseColor.a);\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "technique10 Render\r",
          "{\r",
          "    pass P0\r",
          "    {\r",
          "        SetGeometryShader( 0 );\r",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );\r",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );\r",
          "    }\r",
          "} "
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scene",
      "MetaInstanceID": "5f54df64-6f11-4985-8118-ece55b84a275",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Refraction",
      "MetaInstanceID": "6092d39d-53e0-480a-855e-2a5fee6fdbb5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FallOff",
      "MetaInstanceID": "f75068e6-82f0-482a-a791-94d679011b39",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ReflectionColor.R",
      "MetaInstanceID": "2b1719ed-cefd-4d0a-9faa-b5afd30d9b70",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ReflectionColor.G",
      "MetaInstanceID": "dc7347b9-5ec0-4006-bb8f-e2dcc7ebef60",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ReflectionColor.B",
      "MetaInstanceID": "4e8af21e-1445-4839-93b1-964597d67cec",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ReflectionColor.A",
      "MetaInstanceID": "bb84a574-a854-4b5b-96b4-f572b4b0458c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BlendFactor.R",
      "MetaInstanceID": "428060d5-a21e-4c00-a5c7-fad91bd0c63e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BlendFactor.G",
      "MetaInstanceID": "cc7745f8-0765-41c8-9dd4-38744b4f0d34",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BlendFactor.B",
      "MetaInstanceID": "25ca9dbe-c16c-4c46-97e2-83e14fdeb73f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BlendFactor.A",
      "MetaInstanceID": "c4267d2b-a875-4a39-81d5-7d715d825d32",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "eb7899c7-42b1-4315-9e7f-4787d388d050",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "d7f67196-2c53-40f7-a770-cc9f5a97b049",
      "MetaID": "1c5514cd-799d-46c1-ac4a-bac2f933b816",
      "Name": "ReflectivePhongShaderFunc",
      "Version": "5a359359-d262-456e-b7a6-1adaf9ef8349",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.Rendering;",
        "",
        "namespace Framefield.Core.ID1c5514cd_799d_46c1_ac4a_bac2f933b816",
        "{",
        "    public class Class_ReflectivePhongShader : FXSourceCodeFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scene = 1,",
        "            Refraction = 2,",
        "            FallOff = 3,",
        "            ReflectionColorR = 4,",
        "            ReflectionColorG = 5,",
        "            ReflectionColorB = 6,",
        "            ReflectionColorA = 7,",
        "            BlendFactorR = 8,",
        "            BlendFactorG = 9,",
        "            BlendFactorB = 10,",
        "            BlendFactorA = 11",
        "        }",
        "        //<<< _inputids",
        "",
        "        #region Renderer",
        "        public class Renderer : BaseRenderer",
        "        {",
        "            public override void SetupEffect(OperatorPartContext context)",
        "            {",
        "                base.SetupEffect(context);",
        "                try",
        "                {",
        "                    SetupMaterialConstBuffer(context);",
        "                    SetupFogSettingsConstBuffer(context);",
        "                    SetupPointLightsConstBuffer(context);",
        "                }",
        "                catch (Exception e)",
        "                {",
        "                    Logger.Error(ParentFunc, \"Error building constant buffer: {0} - Source: {1}\", e.Message, e.Source);",
        "                }",
        "            }",
        "            public OperatorPart.Function ParentFunc {get;set;}",
        "        }",
        "        #endregion",
        "",
        "        public Class_ReflectivePhongShader()",
        "        {",
        "            _renderer = new Renderer(){ParentFunc = this};",
        "        }",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _renderer);",
        "            base.Dispose();",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Scene = inputs[(int)InputId.Scene];",
        "            var Refraction = inputs[(int)InputId.Refraction].Eval(context).Value;",
        "            var FallOff = inputs[(int)InputId.FallOff].Eval(context).Value;",
        "            var ReflectionColorR = inputs[(int)InputId.ReflectionColorR].Eval(context).Value;",
        "            var ReflectionColorG = inputs[(int)InputId.ReflectionColorG].Eval(context).Value;",
        "            var ReflectionColorB = inputs[(int)InputId.ReflectionColorB].Eval(context).Value;",
        "            var ReflectionColorA = inputs[(int)InputId.ReflectionColorA].Eval(context).Value;",
        "            var ReflectionColor = new Color4(ReflectionColorR, ReflectionColorG, ReflectionColorB, ReflectionColorA);",
        "            var BlendFactorR = inputs[(int)InputId.BlendFactorR].Eval(context).Value;",
        "            var BlendFactorG = inputs[(int)InputId.BlendFactorG].Eval(context).Value;",
        "            var BlendFactorB = inputs[(int)InputId.BlendFactorB].Eval(context).Value;",
        "            var BlendFactorA = inputs[(int)InputId.BlendFactorA].Eval(context).Value;",
        "            var BlendFactor = new Color4(BlendFactorR, BlendFactorG, BlendFactorB, BlendFactorA);",
        "            //<<< _params",
        "",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            using (new PropertyStasher<OperatorPartContext>(context, \"Effect\", \"Renderer\"))",
        "            {",
        "                _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(context.Viewport.Width, context.Viewport.Height));",
        "                _effect.GetVariableByName(\"Refraction\").AsScalar().Set(Refraction);",
        "                _effect.GetVariableByName(\"FallOff\").AsScalar().Set(FallOff);",
        "                _effect.GetVariableByName(\"ReflectionColor\").AsVector().Set(new Vector4(ReflectionColorR, ReflectionColorG, ReflectionColorB, ReflectionColorA));",
        "                _effect.GetVariableByName(\"BlendFactor\").AsVector().Set(new Vector4(BlendFactorR, BlendFactorG, BlendFactorB, BlendFactorA));",
        "                //_effect.GetVariableByName(\"BlendFactor\").AsScalar().Set(BlendFactor);",
        "                context.Effect = _effect;",
        "                context.Renderer = _renderer;",
        "",
        "                Scene.Eval(context);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        Renderer _renderer;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d7f67196-2c53-40f7-a770-cc9f5a97b049",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "eb7899c7-42b1-4315-9e7f-4787d388d050"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3525ee9f-e62a-4904-a62a-ac79d8d86e8e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d7f67196-2c53-40f7-a770-cc9f5a97b049"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5f54df64-6f11-4985-8118-ece55b84a275",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d7f67196-2c53-40f7-a770-cc9f5a97b049"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6092d39d-53e0-480a-855e-2a5fee6fdbb5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d7f67196-2c53-40f7-a770-cc9f5a97b049"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f75068e6-82f0-482a-a791-94d679011b39",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d7f67196-2c53-40f7-a770-cc9f5a97b049"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2b1719ed-cefd-4d0a-9faa-b5afd30d9b70",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d7f67196-2c53-40f7-a770-cc9f5a97b049"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "dc7347b9-5ec0-4006-bb8f-e2dcc7ebef60",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d7f67196-2c53-40f7-a770-cc9f5a97b049"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4e8af21e-1445-4839-93b1-964597d67cec",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d7f67196-2c53-40f7-a770-cc9f5a97b049"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bb84a574-a854-4b5b-96b4-f572b4b0458c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d7f67196-2c53-40f7-a770-cc9f5a97b049"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "428060d5-a21e-4c00-a5c7-fad91bd0c63e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d7f67196-2c53-40f7-a770-cc9f5a97b049"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cc7745f8-0765-41c8-9dd4-38744b4f0d34",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d7f67196-2c53-40f7-a770-cc9f5a97b049"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "25ca9dbe-c16c-4c46-97e2-83e14fdeb73f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d7f67196-2c53-40f7-a770-cc9f5a97b049"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c4267d2b-a875-4a39-81d5-7d715d825d32",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d7f67196-2c53-40f7-a770-cc9f5a97b049"
    }
  ]
}