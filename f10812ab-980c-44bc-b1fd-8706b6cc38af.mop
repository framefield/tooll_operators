{
  "Name": "PointOnCatRomCurve",
  "_id": "f10812ab-980c-44bc-b1fd-8706b6cc38af",
  "Namespace": "lib.basic.curve",
  "Description": "interpolates the incoming points into a cubic curve. This can be used to define movement curves for particles or cameras.",
  "Inputs": [
    {
      "Name": "Points",
      "MetaInstanceID": "1e7ab2b0-61f9-434c-a3c6-90a3eba6c4db",
      "DefaultValue": {
        "Type": "Dynamic",
        "Value": "Framefield.Core.Dynamic"
      },
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76",
      "IsMultiInput": "True",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "U",
      "MetaInstanceID": "bc6d8b04-cd4b-40ec-a4c6-f58774d530a7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Resolution",
      "MetaInstanceID": "baf678ac-2fff-45e9-9447-d3e359271d95",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1000"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "X",
      "MetaInstanceID": "3d13bfe3-36fb-4d05-b20f-5eaa90a3ca2c",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "Y",
      "MetaInstanceID": "0ea4eaba-52b4-405c-8754-35645de4c6bc",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "Z",
      "MetaInstanceID": "e8a5f5a4-0a38-40fa-9c02-2d709447594a",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "This",
      "MetaInstanceID": "12f3d248-f9ae-4980-9e38-f3d00382b669",
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "f66573e3-dd8a-4784-a931-c3da78ad91ae",
      "MetaID": "89c11108-1fee-49f5-999e-0f521679b1d5",
      "Name": "PointOnCatRomCurveFunc",
      "Version": "983f0dc7-7f58-4db2-ba48-0ba88eded649",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "using Framefield.Core.IDb03022e3_8b4f_4d33_b749_ef30a03ef098; // CurveProviderFunc",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID89c11108_1fee_49f5_999e_0f521679b1d5",
        "{",
        "    public class Class_PointOnCatRomCurve : OperatorPart.Function, ICurveProvider",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Points = 0,",
        "            U = 1,",
        "            Resolution = 2",
        "        }",
        "        //<<< _inputids",
        "        ",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            X = 0,",
        "            Y = 1,",
        "            Z = 2,",
        "            This = 3",
        "        }",
        "        //<<< _outputids",
        "        ",
        "        public List<Vector4> GetPoints() ",
        "        {",
        "            return _controlPoints.ToList();",
        "        }",
        "        ",
        "        ",
        "        ",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) ",
        "        {",
        "            //>>> _params",
        "            var Points = inputs[(int)InputId.Points].Eval(context).Dynamic;  // Needs to be checked for null!",
        "            var U = inputs[(int)InputId.U].Eval(context).Value;",
        "            var Resolution = inputs[(int)InputId.Resolution].Eval(context).Value;",
        "            //<<< _params",
        "                        ",
        "            var needsRebuild = false;",
        "            var pointConnections = inputs[(int)InputId.Points].Connections;",
        "            ",
        "            if( _resolution != (int) Resolution) {",
        "                _resolution = (int)Resolution;",
        "                needsRebuild = true;",
        "            }",
        "",
        "            // Reinit List (1st and last Points are reused)",
        "            if( _controlPoints == null || _controlPoints.Count() != pointConnections.Count() + 2)  {",
        "                _controlPoints = new Vector4[pointConnections.Count() + 2];",
        "                needsRebuild = true;",
        "            }",
        "            ",
        "            ",
        "            if(Changed) ",
        "            {",
        "                //var newControlPoints = new Vector4[ pointConnections.Count ];",
        "                ",
        "                for(var i=0; i < pointConnections.Count ; ++i) {",
        "                    var c = pointConnections[i];",
        "                    var p = c.Eval(context).Dynamic; ",
        "                    Vector4 pp = p;",
        "                    ",
        "                    if( pp != _controlPoints[i+1] )",
        "                    {",
        "                        _controlPoints[i+1]=pp;",
        "                        if(i ==0 ) {",
        "                            _controlPoints[0]=pp;",
        "                        }",
        "                        else if(i == pointConnections.Count - 1) {",
        "                            _controlPoints[pointConnections.Count]=pp;",
        "                        }",
        "                        needsRebuild = true;",
        "                    }                    ",
        "                }",
        "                ",
        "                if(needsRebuild) {",
        "                    UpdateDrawingPointsWithCatmullRom( _controlPoints, out _drawingPoints, _resolution );",
        "                }",
        "                                    ",
        "            ",
        "                if( U != _u || needsRebuild) {                ",
        "                    _p = SampleAt( U );",
        "                    _u = U;",
        "                }",
        "                Changed= false;",
        "            }",
        "            ",
        "            switch( (int) outputIdx) {",
        "                case (int)OutputId.X: context.Value= _p.X; break;",
        "                case (int)OutputId.Y: context.Value= _p.Y; break;",
        "                case (int)OutputId.Z: context.Value= _p.Z; break;",
        "                case (int)OutputId.This: context.Dynamic= this; break;",
        "            }",
        "                       ",
        "            return context;",
        "        }",
        "",
        "        private float _u;",
        "        private Vector4 _p = Vector4.Zero;",
        "        private int _resolution = 1000;",
        "        private const float EPSILON = 0.0001f;",
        "        private int _numPoints;",
        "        private Vector4[] _controlPoints;",
        "        private Vector4[] _drawingPoints;",
        "        const int SEGMENTS_PER_CURVE = 10;",
        "        ",
        "        public Vector4 SampleAt(double u) ",
        "        {",
        "            if(_drawingPoints == null || _drawingPoints.Count() <2)",
        "                return Vector4.Zero;",
        "                ",
        "            u *= _resolution;",
        "            u  =  (float)Utilities.Clamp(u  , 0, _drawingPoints.Count()-2);",
        "            var i = (int)u;",
        "            ",
        "            return  Vector4.Lerp( _drawingPoints[i], _drawingPoints[i+1], (float)(u-i));",
        "        }",
        "        ",
        "        /// <summary>",
        "        /// Takes an array of input coordinates used to define a Catmull-Rom spline, and then",
        "        /// samples the resulting spline according to the specified sample count (per span),",
        "        /// populating the output array with the newly sampled coordinates. The returned boolean",
        "        /// indicates whether the operation was successful (true) or not (false).",
        "        /// NOTE: The first and last points specified are used to describe curvature and will be dropped",
        "        /// from the resulting spline. Duplicate them if you wish to include them in the curve.",
        "        /// </summary>",
        "        public bool UpdateDrawingPointsWithCatmullRom(Vector4[] inCoordinates, out Vector4[] outCoordinates, int samples)",
        "        {",
        "        \tif (inCoordinates.Length < 4)",
        "        \t{",
        "        \t\toutCoordinates = null;",
        "        \t\treturn false;",
        "        \t}",
        "         ",
        "        \tList<Vector4> results = new List<Vector4>();",
        "         ",
        "        \tfor (int n = 1; n < inCoordinates.Length - 2; n++)",
        "        \t\tfor (int i = 0; i < samples; i++)",
        "        \t\t\tresults.Add(PointOnCurve(inCoordinates[n - 1], inCoordinates[n], inCoordinates[n + 1], inCoordinates[n + 2], (1f / samples) * i ));",
        "         ",
        "        \tresults.Add(inCoordinates[inCoordinates.Length - 2]);",
        "         ",
        "        \toutCoordinates = results.ToArray();",
        "        \treturn true;",
        "        }",
        "         ",
        "        /// <summary>",
        "        /// Return a point on the curve between P1 and P2 with P0 and P4 describing curvature, at",
        "        /// the normalized distance t.",
        "        /// </summary>",
        "         ",
        "        public static Vector4 PointOnCurve(Vector4 p0, Vector4 p1, Vector4 p2, Vector4 p3, float t)",
        "        {",
        "        \tVector4 result = Vector4.One;",
        "         ",
        "        \tfloat t0 = ((-t + 2f) * t - 1f) * t * 0.5f;",
        "        \tfloat t1 = (((3f * t - 5f) * t) * t + 2f) * 0.5f;",
        "        \tfloat t2 = ((-3f * t + 4f) * t + 1f) * t * 0.5f;",
        "        \tfloat t3 = ((t - 1f) * t * t) * 0.5f;",
        "          \tresult = p0 * t0 + p1 * t1 + p2 * t2 + p3 * t3;",
        "          \t         ",
        "        \treturn result;",
        "        }        ",
        "    }    ",
        "    ",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [
    {
      "Name": "CurveProvider",
      "MetaInstanceID": "a0f38f6a-fbd8-4a98-83df-daccbe3b015a",
      "MetaID": "6a030fc7-b200-478e-84a1-dd4825b8d5cc",
      "OperatorProperties": {
        "Name": "",
        "PosX": "100",
        "PosY": "100",
        "Width": "100",
        "Visible": "True",
        "Disabled": "False",
        "Inputs": [],
        "States": []
      }
    }
  ],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1e7ab2b0-61f9-434c-a3c6-90a3eba6c4db",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f66573e3-dd8a-4784-a931-c3da78ad91ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bc6d8b04-cd4b-40ec-a4c6-f58774d530a7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f66573e3-dd8a-4784-a931-c3da78ad91ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "baf678ac-2fff-45e9-9447-d3e359271d95",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f66573e3-dd8a-4784-a931-c3da78ad91ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f66573e3-dd8a-4784-a931-c3da78ad91ae",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3d13bfe3-36fb-4d05-b20f-5eaa90a3ca2c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f66573e3-dd8a-4784-a931-c3da78ad91ae",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0ea4eaba-52b4-405c-8754-35645de4c6bc"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f66573e3-dd8a-4784-a931-c3da78ad91ae",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e8a5f5a4-0a38-40fa-9c02-2d709447594a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f66573e3-dd8a-4784-a931-c3da78ad91ae",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "12f3d248-f9ae-4980-9e38-f3d00382b669"
    }
  ]
}