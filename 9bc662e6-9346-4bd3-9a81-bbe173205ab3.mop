{
  "Name": "MotionBlur",
  "_id": "9bc662e6-9346-4bd3-9a81-bbe173205ab3",
  "Namespace": "lib.image.blur",
  "Description": "Applies motion blur to the input from parameters of a camera in the subtree.\r\n\r\nPotential pitfalls:\r\n- Make sure, depth information are written (do not set DepthStencilState OFF)\r\n- Be sure, you camera is animated. (Do not add additional static cameras in the sub tree). This might not be obvious, because Cameras might be hidden inside Combined Opkerators in the subtree. Consider the following example:\r\n\r\n[Layer2d]\r\n[MotionBlur]\r\n[RenderToImage]\r\n[Camera1 |]\r\n[Group                     ]\r\n[Camera2] [Cube2   ]\r\n[Cube1]\r\n\r\nCamera2 will overwrite the motion information of Camera1 even for Cube2.\r\n\r\n",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "d7bfbd29-2f41-4d2c-a832-1ce74a2c44a6",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> __parameters\r",
          "Texture2D Image;",
          "float Strength;",
          "float Clamp_;",
          "float NumberOfSamples;",
          "//<<< __parameters\r",
          "Texture2D txDepth;\r",
          "float4x4 viewToWorld;\r",
          "float4x4 previousWorldToView;\r",
          " \r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> _declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float2 texCoord : TEXCOORD;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "};",
          "//<<< _declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> VS \r",
          "PS_IN VS( VS_IN input )\r",
          "{\r",
          "    PS_IN output = (PS_IN)0;\r",
          "\r",
          "    input.pos = mul(input.pos, objectToWorldMatrix); \r",
          "    output.pos = mul(input.pos, worldToCameraMatrix);\r",
          "    output.pos = mul(output.pos, projMatrix);\r",
          "    output.texCoord = input.texCoord;\r",
          "\r",
          "    return output;\r",
          "}\r",
          "//<<< VS\r",
          "\r",
          "//static const int NUMWT = 10;\r",
          "//static const float Gauss[NUMWT] = { 0.93, 0.86, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1 };\r",
          "\r",
          "//>>> PS\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float4 c = Image.Sample(samLinear, input.texCoord);\r",
          "    float depth = txDepth.Sample(samLinear, input.texCoord).r;\r",
          "    depth = min( depth, 0.999);\r",
          "\r",
          "    float4 viewTFragPos = float4(-input.texCoord.x*2.0 + 1.0, input.texCoord.y*2.0 - 1.0, depth, 1.0);\r",
          "    float4 worldTFragPos = mul(viewTFragPos, viewToWorld);\r",
          "    worldTFragPos /= worldTFragPos.w;\r",
          "\r",
          "    float4 viewTPreviousFragPos = mul(worldTFragPos, previousWorldToView);\r",
          "    viewTPreviousFragPos /= viewTPreviousFragPos.w;\r",
          "  \r",
          "    float2 velocity = (viewTFragPos.xy - viewTPreviousFragPos.xy)*Strength;\r",
          "    velocity.x = -velocity.x;\r",
          "    if (abs(velocity.x) < 0.0001)\r",
          "        velocity.x = 0.0;\r",
          "    if (abs(velocity.y) < 0.0001)\r",
          "        velocity.y = 0.0;\r",
          "\r",
          "    float l = length(velocity);\r",
          "    if (l > 0 && l > Clamp_)\r",
          "        velocity *= Clamp_/l;\r",
          "\r",
          "    float2 dir = velocity*10.0/NumberOfSamples;\r",
          "    float2 pos = dir;\r",
          "    float totalWeight = 1;\r",
          "    \r",
          "    float weight=1;\r",
          "    for (int i = 0; i < NumberOfSamples; ++i)\r",
          "    {\r",
          "        c += Image.SampleLevel(samLinear, input.texCoord + pos, 0)*weight;\r",
          "        c += Image.SampleLevel(samLinear, input.texCoord - pos, 0)*weight;\r",
          "        pos += dir;\r",
          "        totalWeight += 2*weight;\r",
          "    }\r",
          "    c.rgb /= totalWeight;\r",
          "    c.a = 1.0;\r",
          "\r",
          "    return c;\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "a21cdf02-1f17-43eb-95d1-c5f24108adf1",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Camera",
      "MetaInstanceID": "ed0f47e7-3713-4f3f-aa35-f057cd68f09f",
      "DefaultValue": {
        "Type": "Dynamic",
        "Value": "Framefield.Core.Dynamic"
      },
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Strength",
      "MetaInstanceID": "8fff9174-f632-4be0-a780-1d06d0f5e90e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Clamp",
      "MetaInstanceID": "3e5e3181-8052-4ae9-9272-d7de1c1bb419",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.02"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NumberOfSamples",
      "MetaInstanceID": "b500817e-853a-4dd3-84b8-06bc8fab11d9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "100",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "42c89448-0bdd-42d3-b7d0-c029476c1d41",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "ea7492f5-e41c-40ea-aec0-e60a948d15b3",
      "MetaID": "5bde13cc-1a1b-4d76-925a-a20b1959bbf9",
      "Name": "MotionBlurFunc",
      "Version": "04b9df0d-acc8-43bb-bc0b-485ddd7bb5ad",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using SharpDX.DXGI;",
        "using SharpDX.D3DCompiler;",
        "using SharpDX.Direct3D; ",
        "using Framefield.Core.Rendering;",
        "",
        "namespace Framefield.Core.ID5bde13cc_1a1b_4d76_925a_a20b1959bbf9",
        "{",
        "    public class Class_MotionBlur : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Camera = 2,",
        "            Strength = 3,",
        "            Clamp = 4,",
        "            NumberOfSamples = 5",
        "        }",
        "        //<<< _inputids",
        "",
        "        protected override bool NeedsDepth { get { return false; } }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            return PrepareAndEvalOnChange(context, () =>",
        "            {",
        "                //>>> __params",
        "                var imageInput = inputs[(int)InputId.Image].Eval(context);",
        "                var Strength = inputs[(int)InputId.Strength].Eval(context).Value;",
        "                var Clamp = inputs[(int)InputId.Clamp].Eval(context).Value;",
        "                var NumberOfSamples = inputs[(int)InputId.NumberOfSamples].Eval(context).Value;",
        "                var Camera = inputs[(int)InputId.Camera].Eval(context).Dynamic;",
        "                //<<< __params",
        "    ",
        "                var image = imageInput.Image;",
        "                var depthImage = imageInput.DepthImage;",
        "                if (image == null || depthImage == null || Camera == null)",
        "                {",
        "                    Logger.Error(this,\"{0}: conditions not fulfilled\", OperatorPart.Parent);",
        "                    return;",
        "                }",
        "                Framefield.Core.OperatorPartTraits.ICameraProvider camProvider = Camera.This as Framefield.Core.OperatorPartTraits.ICameraProvider;",
        "                if (camProvider == null)",
        "                {",
        "                    Logger.Error(this,\"{0}: camera not defined\", OperatorPart.Parent);",
        "                    return;",
        "                }",
        "",
        "                var viewToWorld = Matrix.Identity;",
        "                var previousWorldToView = Matrix.Identity;",
        "",
        "                var worldToCamera = camProvider.CalculateWorldToCamera(context);",
        "                var cameraToView = camProvider.CalculateCameraToView(context);",
        "                viewToWorld = Matrix.Invert(worldToCamera*cameraToView);",
        "",
        "                using (new PropertyStasher<OperatorPartContext>(context, \"Time\")) {",
        "                    context.Time -= 0.01f;",
        "                    OperatorPart.ChangedPropagationEnabled = false;",
        "",
        "                    // Invalidate all time accessors",
        "                    var subTree= inputs[(int)InputId.Camera];",
        "                    var invalidator = new OperatorPart.InvalidateTimeAccessors();",
        "                    subTree.TraverseWithFunctionUseSpecificBehavior(null, invalidator);",
        "            ",
        "                    var previousWorldToCamera = camProvider.CalculateWorldToCamera(context);",
        "                    var previousCameraToView = camProvider.CalculateCameraToView(context);",
        "                    previousWorldToView = previousWorldToCamera*previousCameraToView;",
        "                    OperatorPart.ChangedPropagationEnabled = true;",
        "",
        "                }",
        "",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 1));",
        "",
        "                var shaderDesc = new ShaderResourceViewDescription();",
        "                shaderDesc.Format = Format.R32_Float;",
        "                shaderDesc.Dimension = ShaderResourceViewDimension.Texture2D;",
        "                shaderDesc.Texture2D.MipLevels = 1;",
        "",
        "                using (var depthTexture = new ShaderResourceView(context.D3DDevice, depthImage, shaderDesc))",
        "                //>>> __setup",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, image))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"Strength\").AsScalar().Set(Strength);",
        "                    _effect.GetVariableByName(\"Clamp_\").AsScalar().Set(Clamp);",
        "                    _effect.GetVariableByName(\"NumberOfSamples\").AsScalar().Set(NumberOfSamples);",
        "                    //<<< __setup",
        "    ",
        "                    _effect.GetVariableByName(\"viewToWorld\").AsMatrix().SetMatrix(viewToWorld);",
        "                    _effect.GetVariableByName(\"previousWorldToView\").AsMatrix().SetMatrix(previousWorldToView);",
        "                    _effect.GetVariableByName(\"txDepth\").AsShaderResource().SetResource(depthTexture); ",
        "    ",
        "                    Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ea7492f5-e41c-40ea-aec0-e60a948d15b3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "42c89448-0bdd-42d3-b7d0-c029476c1d41"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d7bfbd29-2f41-4d2c-a832-1ce74a2c44a6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ea7492f5-e41c-40ea-aec0-e60a948d15b3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a21cdf02-1f17-43eb-95d1-c5f24108adf1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ea7492f5-e41c-40ea-aec0-e60a948d15b3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ed0f47e7-3713-4f3f-aa35-f057cd68f09f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ea7492f5-e41c-40ea-aec0-e60a948d15b3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8fff9174-f632-4be0-a780-1d06d0f5e90e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ea7492f5-e41c-40ea-aec0-e60a948d15b3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3e5e3181-8052-4ae9-9272-d7de1c1bb419",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ea7492f5-e41c-40ea-aec0-e60a948d15b3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b500817e-853a-4dd3-84b8-06bc8fab11d9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ea7492f5-e41c-40ea-aec0-e60a948d15b3"
    }
  ]
}