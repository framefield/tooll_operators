{
  "Name": "SampleAndBlurValue",
  "_id": "67db4701-342c-49cd-b5ab-672ff7d5b1e5",
  "Namespace": "lib.math.helper",
  "Description": "Samples the incoming value over a time range and blurs it.\r\n",
  "Inputs": [
    {
      "Name": "AnimatedValue",
      "MetaInstanceID": "cfc9f59a-9f4c-42fb-8b64-0cf7c1a5a80e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TimeRange.Start",
      "MetaInstanceID": "f9055366-08ec-4c97-82a3-779d8a9dc5fe",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TimeRange.End",
      "MetaInstanceID": "ac41d08d-05db-4cc7-b43c-608a3532d390",
      "DefaultValue": {
        "Type": "Float",
        "Value": "500"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TimeResolution",
      "MetaInstanceID": "52592e5c-ad38-45ea-9f99-335309e116b1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "120",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ResampleTrigger",
      "MetaInstanceID": "7c9a8173-fcc8-413f-8b23-4a841fc46801",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SmoothSamples",
      "MetaInstanceID": "05774cff-fbe0-4b4c-b11d-7ce7484832af",
      "DefaultValue": {
        "Type": "Float",
        "Value": "2"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Product",
      "MetaInstanceID": "f77b57ac-c825-4d30-ac3b-dba9ae463152",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "d6b4206b-6394-455a-889e-b0e80c3b86ac",
      "MetaID": "44592105-1be1-4900-8ff6-8dbd8fca9392",
      "Name": "SampleAndBlurValueFunc",
      "Version": "e6a12306-15b4-48ee-a3d7-1c3d7c35d810",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID44592105_1be1_4900_8ff6_8dbd8fca9392",
        "{",
        "    public class Class_SampleAndBlurValue : OperatorPart.Function, ",
        "        Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            AnimatedValue = 0,",
        "            TimeRangeStart = 1,",
        "            TimeRangeEnd = 2,",
        "            TimeResolution = 3,",
        "            ResampleTrigger = 4,",
        "            SmoothSamples = 5",
        "        }",
        "        //<<< _inputids",
        "        ",
        "        ",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var AnimatedValue = inputs[(int)InputId.AnimatedValue].Eval(context).Value;",
        "            var TimeRangeStart = inputs[(int)InputId.TimeRangeStart].Eval(context).Value;",
        "            var TimeRangeEnd = inputs[(int)InputId.TimeRangeEnd].Eval(context).Value;",
        "            var TimeRange = new Vector2(TimeRangeStart, TimeRangeEnd);",
        "            var TimeResolution = inputs[(int)InputId.TimeResolution].Eval(context).Value;",
        "            var ResampleTrigger = inputs[(int)InputId.ResampleTrigger].Eval(context).Value;",
        "            var SmoothSamples = inputs[(int)InputId.SmoothSamples].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            ",
        "            if(Changed) ",
        "            {",
        "                int smoothSamplesClamped = (int)Utilities.Clamp( SmoothSamples, 1, 10);",
        "            ",
        "                var needsResampling =  (TimeRangeStart != _startTime)",
        "                                    || (TimeRangeEnd != _endTime)",
        "                                    || (TimeResolution != _timeResolution)",
        "                                    || (smoothSamplesClamped != _smoothSamples)",
        "                                    || ResampleTrigger > 0.5f;",
        "                ",
        "                if( needsResampling) ",
        "                {",
        "                    _startTime = TimeRangeStart;",
        "                    _endTime = TimeRangeEnd;",
        "                    _timeResolution = TimeResolution;",
        "                    _smoothSamples = smoothSamplesClamped;",
        "",
        "                    UpdateSampleCount();",
        "                    Logger.Info(\"Resample \" + _sampleCount + \"samples\");",
        "                    ",
        "                    ",
        "                    var valueInput = inputs[(int)InputId.AnimatedValue];                    ",
        "                    SampleValueRange(valueInput,  context);",
        "                    ",
        "                    ",
        "                    SmoothBuffer( ref _bufferA, ref _bufferB, _smoothSamples, 1);",
        "                    SmoothBuffer( ref _bufferB, ref _bufferA, _smoothSamples, 2);",
        "                    //SmoothBuffer( ref _bufferB, ref _bufferA, _smoothSamples , 2);",
        "                    //SmoothBuffer( ref _bufferA, ref _bufferB, _smoothSamples , 4);",
        "                    //SmoothBuffer( ref _bufferB, ref _bufferA, _smoothSamples , 8);                    ",
        "                }",
        "",
        "                Changed =false;",
        "            }",
        "            //Logger.Info(\"\" +context.Time);",
        "            ",
        "            var sampleIndex = (int)Utilities.Clamp( (context.Time - _startTime) * TimeResolution, 0, _sampleCount-1);",
        "            context.Value = _bufferA[sampleIndex];",
        "            return context;",
        "        }",
        "        ",
        "",
        "        ",
        "        ",
        "        private void UpdateSampleCount() ",
        "        {",
        "            _sampleCount = (int) Utilities.Clamp( (_endTime - _startTime) * _timeResolution, 2, MAX_SAMPLE_STEPS);",
        "            if( _bufferA == null ||  _bufferA.Length != _sampleCount) ",
        "            {",
        "                _bufferA = new float[_sampleCount];",
        "                _bufferB = new float[_sampleCount];",
        "            }        ",
        "        }",
        "",
        "",
        "        private void SampleValueRange(OperatorPart valueInput, OperatorPartContext context) ",
        "        {",
        "            var previousTime = context.Time;",
        "",
        "            OperatorPart.ChangedPropagationEnabled = false;",
        "            ",
        "            var invalidator = new OperatorPart.InvalidateTimeAccessors();",
        "            ",
        "            for (var i = 0; i < _sampleCount - 1; i++)",
        "            {   ",
        "                var f = i/(float)_sampleCount;",
        "                var t = Utilities.Lerp(_startTime, _endTime, f);                 ",
        "                context.Time = t;",
        "                _bufferA[i] = valueInput.Eval(context).Value;",
        "",
        "                // Invalidate all time accessors",
        "                valueInput.TraverseWithFunction(null, invalidator);                                        ",
        "            }",
        "            ",
        "            OperatorPart.ChangedPropagationEnabled = true;",
        "            context.Time = previousTime;            ",
        "            valueInput.TraverseWithFunction(null, invalidator);          ",
        "        }",
        "        ",
        "        ",
        "        ",
        "        private void SmoothBuffer(ref float[] inBuffer, ref float[] outBuffer, int sampleCount, int stepWidth =1) ",
        "        {",
        "            for(var i = 0; i < inBuffer.Length; i++ ) ",
        "            {",
        "                var average =0f;",
        "                var count = 0f;",
        "                ",
        "                for(var ds = 0 ; ds < sampleCount; ds++ ) ",
        "                {",
        "                    var smoothI = i + (-sampleCount / 2 + ds) * stepWidth  ;",
        "                    ",
        "                    if(smoothI < 0 || smoothI >= inBuffer.Length)",
        "                        continue;",
        "                        ",
        "                    average+= inBuffer[smoothI];",
        "                    count ++;",
        "                }",
        "                outBuffer[i] = average/count;                    ",
        "            }",
        "        }",
        "        ",
        "        private float _startTime;",
        "        private float _endTime;",
        "        private float _timeResolution;",
        "        private const int MAX_SAMPLE_STEPS = 100000;",
        "        private int _sampleCount= 1;",
        "        private int _smoothSamples = 2;",
        "        ",
        "        private float[] _bufferA;",
        "        private float[] _bufferB;",
        "        //private float _targetValue = 0;",
        "        //private float _sum = 0;",
        "        //private SmoothInterpolator _smoothInterpolator = new SmoothInterpolator(defaultValue:0, acceleration:0.4, delta:0.001);",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cfc9f59a-9f4c-42fb-8b64-0cf7c1a5a80e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d6b4206b-6394-455a-889e-b0e80c3b86ac"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f9055366-08ec-4c97-82a3-779d8a9dc5fe",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d6b4206b-6394-455a-889e-b0e80c3b86ac"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ac41d08d-05db-4cc7-b43c-608a3532d390",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d6b4206b-6394-455a-889e-b0e80c3b86ac"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "52592e5c-ad38-45ea-9f99-335309e116b1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d6b4206b-6394-455a-889e-b0e80c3b86ac"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7c9a8173-fcc8-413f-8b23-4a841fc46801",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d6b4206b-6394-455a-889e-b0e80c3b86ac"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "05774cff-fbe0-4b4c-b11d-7ce7484832af",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d6b4206b-6394-455a-889e-b0e80c3b86ac"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d6b4206b-6394-455a-889e-b0e80c3b86ac",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f77b57ac-c825-4d30-ac3b-dba9ae463152"
    }
  ]
}