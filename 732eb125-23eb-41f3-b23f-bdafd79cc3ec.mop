{
  "Name": "PickDepth",
  "_id": "732eb125-23eb-41f3-b23f-bdafd79cc3ec",
  "Namespace": "lib.geometry.experimental",
  "Description": "gets the color and the world position of the intersection point between a view ray, defined by the view position (lower left: -1, -1, upper right: 1, 1), and the image buffer with depth.\r\nnote: a camera must be defined within the subtree.",
  "Inputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "22d268a5-b597-4530-8ade-9207250660eb",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ScreenPosition.X",
      "MetaInstanceID": "d3574866-666e-46c3-ba1e-5154dd6dfa69",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-1",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ScreenPosition.Y",
      "MetaInstanceID": "2fa4ee36-7e40-4c24-a243-a28e542c5818",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-1",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Depth",
      "MetaInstanceID": "9ba89f6f-1cc7-4662-91e4-29ba00375372",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "40b2df97-f3c5-4cd4-8f83-4e1f3f6d525d",
      "MetaID": "b07a8577-3147-4c05-a584-0efbcb2a8b47",
      "Name": "PickDepthFunc",
      "Version": "05a64b6d-6e73-4850-8c38-0667508db53a",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using SharpDX.DXGI;",
        "",
        "namespace Framefield.Core.IDb07a8577_3147_4c05_a584_0efbcb2a8b47",
        "{",
        "    public class Class_PickDepth : OperatorPart.Function",
        "    {",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            Depth = 0",
        "        }",
        "        //<<< _outputids",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Image = 0,",
        "            ScreenPositionX = 1,",
        "            ScreenPositionY = 2",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override void Dispose()",
        "        {",
        "            foreach (var image in _depthImagesWithCpuAccess)",
        "                image.Dispose();",
        "            _depthImagesWithCpuAccess.Clear();",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) ",
        "        {",
        "            //>>> __params",
        "            var ScreenPositionX = inputs[(int)InputId.ScreenPositionX].Eval(context).Value;",
        "            var ScreenPositionY = inputs[(int)InputId.ScreenPositionY].Eval(context).Value;",
        "            var ScreenPosition = new Vector2(ScreenPositionX, ScreenPositionY);",
        "            //<<< __params",
        "",
        "            if (Changed)",
        "            {",
        "                var depthImage = inputs[(int)InputId.Image].Eval(context).DepthImage;",
        "                _lastEvaluationSucceeded = DoPicking(context, ScreenPosition, depthImage);",
        "                if (_lastEvaluationSucceeded)",
        "                    Changed = false;",
        "            }",
        "",
        "            context.Value = 0.0f;",
        "            if (!_lastEvaluationSucceeded)",
        "                return context;",
        "",
        "            switch (outputIdx)",
        "            {",
        "                case (int)OutputId.Depth: context.Value = _lastEvaluatedDepth; break;",
        "            }            ",
        "            return context;",
        "        }",
        "",
        "        bool DoPicking(OperatorPartContext context, Vector2 screenPosition, Texture2D depthImage)",
        "        {",
        "            if (screenPosition.X < -1 || screenPosition.X > 1 ||",
        "                screenPosition.Y < -1 || screenPosition.Y > 1)",
        "                return false;",
        "",
        "            if (depthImage == null)",
        "                return false;",
        "",
        "            var currentDesc = depthImage.Description;",
        "            if (_depthImagesWithCpuAccess.Count == 0 ||",
        "                _depthImagesWithCpuAccess[0].Description.Format != currentDesc.Format ||",
        "                _depthImagesWithCpuAccess[0].Description.Width != currentDesc.Width ||",
        "                _depthImagesWithCpuAccess[0].Description.Height != currentDesc.Height ||",
        "                _depthImagesWithCpuAccess[0].Description.MipLevels != currentDesc.MipLevels)",
        "            {    ",
        "                var depthImageDesc = new Texture2DDescription",
        "                                         {",
        "                                             BindFlags = BindFlags.None,",
        "                                             Format = currentDesc.Format,                                           ",
        "                                             Width = currentDesc.Width,",
        "                                             Height = currentDesc.Height,",
        "                                             MipLevels = currentDesc.MipLevels,",
        "                                             SampleDescription = new SampleDescription(1, 0),",
        "                                             Usage = ResourceUsage.Staging,",
        "                                             OptionFlags = ResourceOptionFlags.None,",
        "                                             CpuAccessFlags = CpuAccessFlags.Read,",
        "                                             ArraySize = 1",
        "                                         };",
        "",
        "                Dispose();",
        "                for (int i = 0; i < NUM_TEXTURE_ENTRIES; ++i)",
        "                {",
        "                    _depthImagesWithCpuAccess.Add(new Texture2D(D3DDevice.Device, depthImageDesc));",
        "                }",
        "                _currentIdx = 0;",
        "                _currentUsage = 0;",
        "            }",
        "",
        "            var immediateContext = D3DDevice.Device.ImmediateContext;",
        "            immediateContext.CopyResource(depthImage, _depthImagesWithCpuAccess[_currentIdx]);",
        "            _currentIdx = ++_currentIdx % NUM_TEXTURE_ENTRIES;",
        "            ++_currentUsage;",
        "",
        "            if (_currentUsage >= NUM_TEXTURE_ENTRIES)",
        "            {",
        "                int x = (int)Utilities.Clamp(currentDesc.Width*(screenPosition.X + 1.0f)*0.5f, 0, currentDesc.Width - 1);",
        "                int y = (int)Utilities.Clamp(currentDesc.Height*(screenPosition.Y - 1.0f)*-0.5f, 0, currentDesc.Height - 1);",
        "",
        "                DataStream imageStream;",
        "                immediateContext.UnmapSubresource(_depthImagesWithCpuAccess[_currentIdx], 0);",
        "                DataBox dataBox = immediateContext.MapSubresource(_depthImagesWithCpuAccess[_currentIdx], 0, 0, MapMode.Read, SharpDX.Direct3D11.MapFlags.None, out imageStream);",
        "                using (imageStream)",
        "                {",
        "                    imageStream.Position = (long)(y - 1)*dataBox.RowPitch + (long)(x - 1)*4;",
        "                    _lastEvaluatedDepth = imageStream.Read<float>();",
        "                    imageStream.Position = (long)(y - 1)*dataBox.RowPitch + (long)(x + 1)*4;",
        "                    _lastEvaluatedDepth += imageStream.Read<float>();",
        "                    imageStream.Position = (long)y*dataBox.RowPitch + (long)x*4;",
        "                    _lastEvaluatedDepth += imageStream.Read<float>();",
        "                    imageStream.Position = (long)(y + 1)*dataBox.RowPitch + (long)(x - 1)*4;",
        "                    _lastEvaluatedDepth += imageStream.Read<float>();",
        "                    imageStream.Position = (long)(y + 1)*dataBox.RowPitch + (long)(x + 1)*4;",
        "                    _lastEvaluatedDepth += imageStream.Read<float>();",
        "                    _lastEvaluatedDepth /= 5;",
        "                    immediateContext.UnmapSubresource(_depthImagesWithCpuAccess[_currentIdx], 0);",
        "                }",
        "            }",
        "            return true;",
        "        }",
        "",
        "        const int NUM_TEXTURE_ENTRIES = 2;",
        "        bool _lastEvaluationSucceeded;",
        "        Texture2D _depthImageWithCPUAccess;",
        "        float _lastEvaluatedDepth;",
        "        List<Texture2D> _depthImagesWithCpuAccess = new List<Texture2D>();",
        "        int _currentIdx;",
        "        int _currentUsage;",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "40b2df97-f3c5-4cd4-8f83-4e1f3f6d525d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9ba89f6f-1cc7-4662-91e4-29ba00375372"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "22d268a5-b597-4530-8ade-9207250660eb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40b2df97-f3c5-4cd4-8f83-4e1f3f6d525d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d3574866-666e-46c3-ba1e-5154dd6dfa69",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40b2df97-f3c5-4cd4-8f83-4e1f3f6d525d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2fa4ee36-7e40-4c24-a243-a28e542c5818",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "40b2df97-f3c5-4cd4-8f83-4e1f3f6d525d"
    }
  ]
}