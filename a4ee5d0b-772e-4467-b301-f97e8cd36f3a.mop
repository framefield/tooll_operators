{
  "Name": "RectMesh",
  "_id": "a4ee5d0b-772e-4467-b301-f97e8cd36f3a",
  "Namespace": "lib.mesh.generate",
  "Description": "Defines a rectangle in the x-y plane with specific extends and color.\r\nalso known as \"Plane\", \"Rect\" or \"Quad\".\r\n\r\nThis operators is exensively used to build more complex objects like [TextRect].",
  "Inputs": [
    {
      "Name": "Color.R",
      "MetaInstanceID": "04bd4a7e-b557-4d68-b15e-079988791316",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.G",
      "MetaInstanceID": "b1fa6455-9be7-477e-a8c0-b8be0bdbaaeb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.B",
      "MetaInstanceID": "398f7ca4-a8e2-4932-8f96-780b6255f56d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.A",
      "MetaInstanceID": "ba1d8873-f4fe-4eaa-a419-122efa260c67",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size.Width",
      "MetaInstanceID": "a15eda6f-2f76-48ef-b609-f5feca062168",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size.Height",
      "MetaInstanceID": "8b3c403f-a054-403f-a117-af86272a3820",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Tesselate.width",
      "MetaInstanceID": "f4840364-1166-48ce-90f8-fbaae60d05ac",
      "DefaultValue": {
        "Type": "Float",
        "Value": "2"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "2",
      "Max": "1000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Tesselate.height",
      "MetaInstanceID": "b8689611-3e31-4461-86f6-36d84bbdb2cb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "2"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "2",
      "Max": "1000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Out",
      "MetaInstanceID": "f283442c-c7a3-4640-83c1-47a81b58a0f2",
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "15dfaa78-83e5-46e5-b26b-9df1d3c0976f",
      "MetaID": "f0c52db6-4bbc-480c-b5d1-d7b5e816e5cf",
      "Name": "RectMeshFunc",
      "Version": "2a103293-9ffd-4e3a-98ff-a8ed8cf63d08",
      "Type": "Scene",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.IDf0c52db6_4bbc_480c_b5d1_d7b5e816e5cf",
        "{",
        "    public class Class_RectMesh : OperatorPart.Function",
        "    {",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _rectangleMesh);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "                context.Mesh = _rectangleMesh;",
        "            }",
        "            catch (Exception)",
        "            {",
        "                Logger.Error(this,\"error\");",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        private void UpdateMesh(OperatorPartContext context, IList<OperatorPart> inputs)",
        "        {",
        "            if (_rectangleMesh != null && !Changed)",
        "                return;",
        "",
        "            // params >>>",
        "            var height = inputs[0].Eval(context).Value;",
        "            var width = inputs[1].Eval(context).Value;",
        "            var ColorA = inputs[2].Eval(context).Value;",
        "            var ColorB = inputs[3].Eval(context).Value;",
        "            var ColorG = inputs[4].Eval(context).Value;",
        "            var ColorR = inputs[5].Eval(context).Value;",
        "            var tesselateWidth = inputs[6].Eval(context).Value;",
        "            var tesselateHeight = inputs[7].Eval(context).Value;",
        "            // <<< params",
        "",
        "            // Function>>> ",
        "            var normal = new Vector3(0.0f, 0.0f, -1.0f);",
        "            var color = new Vector4(ColorR, ColorG, ColorB, ColorA);",
        "            var tangent = new Vector3(1.0f, 0.0f, 0.0f);",
        "            var binormal = new Vector3(0.0f, -1.0f, 0.0f);",
        "",
        "            var inputElements = new InputElement[]",
        "                                    {",
        "                                        new InputElement(\"POSITION\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0, 0),",
        "                                        new InputElement(\"NORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 16, 0),",
        "                                        new InputElement(\"COLOR\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 28, 0),",
        "                                        new InputElement(\"TEXCOORD\", 0, SharpDX.DXGI.Format.R32G32_Float, 44, 0),",
        "                                        new InputElement(\"TANGENT\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 52, 0),",
        "                                        new InputElement(\"BINORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 64, 0)",
        "                                    };",
        "",
        "            int tessX = (int) tesselateWidth;",
        "            int tessZ = (int) tesselateHeight;",
        "            int numQuads = (tessX - 1)*(tessZ - 1);",
        "",
        "            const int attributesSize = 76;",
        "            int numTriangles = numQuads*2;",
        "            int streamSize = numTriangles*3*attributesSize;",
        "",
        "            if (_rectangleMesh == null || streamSize != _rectangleMesh.NumTriangles*3*_rectangleMesh.AttributesSize)",
        "            {",
        "                Utilities.DisposeObj(ref _rectangleMesh);",
        "                using (var stream = new DataStream(streamSize, true, true))",
        "                {",
        "                    var vertices = new Buffer(context.D3DDevice, stream, new BufferDescription",
        "                                                                             {",
        "                                                                                 BindFlags = BindFlags.VertexBuffer | BindFlags.ShaderResource,",
        "                                                                                 CpuAccessFlags = CpuAccessFlags.Write,",
        "                                                                                 OptionFlags = ResourceOptionFlags.BufferAllowRawViews,",
        "                                                                                 SizeInBytes = streamSize,",
        "                                                                                 Usage = ResourceUsage.Dynamic",
        "                                                                             });",
        "                    _rectangleMesh = new Mesh",
        "                                         {",
        "                                             InputElements = inputElements,",
        "                                             Vertices = vertices,",
        "                                             NumTriangles = numTriangles,",
        "                                             AttributesSize = attributesSize",
        "                                         };",
        "                }",
        "            }",
        "            DataStream vertexStream;",
        "            context.D3DDevice.ImmediateContext.MapSubresource(_rectangleMesh.Vertices, MapMode.WriteDiscard, MapFlags.None, out vertexStream);",
        "            using (vertexStream)",
        "            {",
        "                vertexStream.Position = 0;",
        "",
        "                float startX = -width/2.0f;",
        "                float startZ = -height/2.0f;",
        "",
        "                for (int z = 0; z < (tessZ - 1); ++z)",
        "                {",
        "                    float normalizedBottom = (float) z/(float) (tessZ - 1);",
        "                    float bottom = startZ + (height*normalizedBottom);",
        "                    float normalizedTop = (float) (z + 1)/(float) (tessZ - 1);",
        "                    float top = startZ + (height*normalizedTop);",
        "",
        "                    for (int x = 0; x < (tessX - 1); ++x)",
        "                    {",
        "                        float normalizedLeft = (float) (x)/(float) (tessX - 1);",
        "                        float left = startX + (width*normalizedLeft);",
        "                        float normalizedRight = (float) (x + 1)/(float) (tessX - 1);",
        "                        float right = startX + (width*normalizedRight);",
        "",
        "                        // tri 1 vert 1",
        "                        vertexStream.Write(new Vector4(right, top, 0, 1));",
        "                        vertexStream.Write(normal);",
        "                        vertexStream.Write(color);",
        "                        vertexStream.Write(new Vector2(normalizedRight, 1.0f - normalizedTop));",
        "                        vertexStream.Write(tangent);",
        "                        vertexStream.Write(binormal);",
        "",
        "                        // tri 1 vert 2",
        "                        vertexStream.Write(new Vector4(right, bottom, 0, 1));",
        "                        vertexStream.Write(normal);",
        "                        vertexStream.Write(color);",
        "                        vertexStream.Write(new Vector2(normalizedRight, 1.0f - normalizedBottom));",
        "                        vertexStream.Write(tangent);",
        "                        vertexStream.Write(binormal);",
        "",
        "                        // tri 1 vert 3",
        "                        vertexStream.Write(new Vector4(left, bottom, 0, 1));",
        "                        vertexStream.Write(normal);",
        "                        vertexStream.Write(color);",
        "                        vertexStream.Write(new Vector2(normalizedLeft, 1.0f - normalizedBottom));",
        "                        vertexStream.Write(tangent);",
        "                        vertexStream.Write(binormal);",
        "",
        "                        // tri 2 vert 1",
        "                        vertexStream.Write(new Vector4(left, bottom, 0, 1));",
        "                        vertexStream.Write(normal);",
        "                        vertexStream.Write(color);",
        "                        vertexStream.Write(new Vector2(normalizedLeft, 1.0f - normalizedBottom));",
        "                        vertexStream.Write(tangent);",
        "                        vertexStream.Write(binormal);",
        "",
        "                        // tri 2 vert 2",
        "                        vertexStream.Write(new Vector4(left, top, 0, 1));",
        "                        vertexStream.Write(normal);",
        "                        vertexStream.Write(color);",
        "                        vertexStream.Write(new Vector2(normalizedLeft, 1.0f - normalizedTop));",
        "                        vertexStream.Write(tangent);",
        "                        vertexStream.Write(binormal);",
        "",
        "                        // tri 2 vert 3",
        "                        vertexStream.Write(new Vector4(right, top, 0, 1));",
        "                        vertexStream.Write(normal);",
        "                        vertexStream.Write(color);",
        "                        vertexStream.Write(new Vector2(normalizedRight, 1.0f - normalizedTop));",
        "                        vertexStream.Write(tangent);",
        "                        vertexStream.Write(binormal);",
        "                    }",
        "                }",
        "            }",
        "            context.D3DDevice.ImmediateContext.UnmapSubresource(_rectangleMesh.Vertices, 0);",
        "            // <<< Function",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _rectangleMesh;",
        "    }",
        "}"
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "15dfaa78-83e5-46e5-b26b-9df1d3c0976f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f283442c-c7a3-4640-83c1-47a81b58a0f2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8b3c403f-a054-403f-a117-af86272a3820",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15dfaa78-83e5-46e5-b26b-9df1d3c0976f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a15eda6f-2f76-48ef-b609-f5feca062168",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15dfaa78-83e5-46e5-b26b-9df1d3c0976f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ba1d8873-f4fe-4eaa-a419-122efa260c67",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15dfaa78-83e5-46e5-b26b-9df1d3c0976f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "398f7ca4-a8e2-4932-8f96-780b6255f56d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15dfaa78-83e5-46e5-b26b-9df1d3c0976f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b1fa6455-9be7-477e-a8c0-b8be0bdbaaeb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15dfaa78-83e5-46e5-b26b-9df1d3c0976f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "04bd4a7e-b557-4d68-b15e-079988791316",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15dfaa78-83e5-46e5-b26b-9df1d3c0976f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f4840364-1166-48ce-90f8-fbaae60d05ac",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15dfaa78-83e5-46e5-b26b-9df1d3c0976f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b8689611-3e31-4461-86f6-36d84bbdb2cb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15dfaa78-83e5-46e5-b26b-9df1d3c0976f"
    }
  ]
}