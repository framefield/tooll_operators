{
  "Name": "BorderRect",
  "_id": "e645a58f-3bc3-4223-bf62-7db934876b4c",
  "Namespace": "lib.geometry.generate",
  "Description": "Defines a rectangle in the x-y plane with specific extends and color.\r\nalso known as \"Plane\", \"Rect\" or \"Quad\".\r\n\r\nThis operators is exensively used to build more complex objects like [TextRect].",
  "Inputs": [
    {
      "Name": "Color.R",
      "MetaInstanceID": "802c10af-6b0b-4374-ba38-e40fbeac0912",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.G",
      "MetaInstanceID": "2e848821-3935-47b4-bf75-b0c261cf321b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.B",
      "MetaInstanceID": "1171bf88-4c32-43ba-a6c4-55388980b350",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.A",
      "MetaInstanceID": "cda1df72-43dd-4f38-b46f-3c437e96c9fa",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Width",
      "MetaInstanceID": "bb900de3-462f-4b6d-b45d-b18205bafe64",
      "DefaultValue": {
        "Type": "Float",
        "Value": "2.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.02",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Height",
      "MetaInstanceID": "5e3db7e7-a150-4717-b5ca-86bdc6f252f4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.02",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Border.Top",
      "MetaInstanceID": "c006627a-e393-4e63-96ef-00487c2dba78",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.02"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Border.Right",
      "MetaInstanceID": "328a28a6-4969-4a25-a127-4ff7b92515d1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.02"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Border.Bottom",
      "MetaInstanceID": "736de190-acd0-447a-bf84-05ae3f2f5c80",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.02"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Border.Left",
      "MetaInstanceID": "17db7538-a236-48ee-8aad-65c318f6e58f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.02"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Texture.Width",
      "MetaInstanceID": "92c7ae29-f989-4b5d-aade-14c4908f974d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "256"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Texture.Height",
      "MetaInstanceID": "a269fce9-6313-44b7-a7f9-99024d992ec8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "256"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BorderTexture.Top",
      "MetaInstanceID": "5e9f8faf-64a8-4f2f-988f-7e03da72e246",
      "DefaultValue": {
        "Type": "Float",
        "Value": "8"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BorderTexture.Right",
      "MetaInstanceID": "e32464b3-fc54-4fd4-bc88-20e0d45a8b41",
      "DefaultValue": {
        "Type": "Float",
        "Value": "8"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BorderTexture.Bottom",
      "MetaInstanceID": "8682ad8f-f6dc-41e1-b02c-20af3dd9533e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "8"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BorderTexture.Left",
      "MetaInstanceID": "406f5b76-3043-4ca7-bc1b-4fce947374e0",
      "DefaultValue": {
        "Type": "Float",
        "Value": "8"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Out",
      "MetaInstanceID": "948a8329-d4d2-405c-93bc-de9bcfe9f464",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "6b612d1e-41c8-438d-9885-49b9bee99a9c",
      "MetaID": "646f08f2-ee11-4de1-a6f1-f1263dddb13b",
      "Name": "BorderRectFunc",
      "Version": "94157a93-ae20-465e-8092-9e9e893d98ed",
      "Type": "Scene",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "",
        "namespace Framefield.Core.ID646f08f2_ee11_4de1_a6f1_f1263dddb13b",
        "{",
        "    public class Class_BorderRect : OperatorPart.Function",
        "    {",
        "        public override void Dispose() {",
        "            Utilities.DisposeObj(ref _planeMesh);",
        "        }",
        "",
        "        Vector3 _normal;",
        "        Vector4 _color;",
        "        Vector3 _tangent;",
        "        Vector3 _binormal;",
        "        Vector4 _border;",
        "        Vector2 _texture;",
        "        Vector4 _borderTexture;",
        "        float _height;",
        "        float _width;",
        "        ",
        "",
        "        // >>> _inputids",
        "        private enum InputId",
        "        {",
        "            Height = 0,",
        "            Width = 1,",
        "            ColorA = 2,",
        "            ColorB = 3,",
        "            ColorG = 4,",
        "            ColorR = 5,",
        "            BorderTop = 6,",
        "            BorderRight = 7,",
        "            BorderBottom = 8,",
        "            BorderLeft = 9,",
        "            TextureWidth = 10,",
        "            TextureHeight = 11,",
        "            BorderTextureTop = 12,",
        "            BorderTextureRight = 13,",
        "            BorderTextureBottom = 14,",
        "            BorderTextureLeft = 15",
        "        }",
        "        // <<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            // >>> _params",
        "            var Height = inputs[(int)InputId.Height].Eval(context).Value;",
        "            var Width = inputs[(int)InputId.Width].Eval(context).Value;",
        "            var ColorA = inputs[(int)InputId.ColorA].Eval(context).Value;",
        "            var ColorB = inputs[(int)InputId.ColorB].Eval(context).Value;",
        "            var ColorG = inputs[(int)InputId.ColorG].Eval(context).Value;",
        "            var ColorR = inputs[(int)InputId.ColorR].Eval(context).Value;",
        "            var Color = new Vector4(ColorA, ColorB, ColorG, ColorR);",
        "            var BorderTop = inputs[(int)InputId.BorderTop].Eval(context).Value;",
        "            var BorderRight = inputs[(int)InputId.BorderRight].Eval(context).Value;",
        "            var BorderBottom = inputs[(int)InputId.BorderBottom].Eval(context).Value;",
        "            var BorderLeft = inputs[(int)InputId.BorderLeft].Eval(context).Value;",
        "            var Border = new Vector4(BorderTop, BorderRight, BorderBottom, BorderLeft);",
        "            var TextureWidth = inputs[(int)InputId.TextureWidth].Eval(context).Value;",
        "            var TextureHeight = inputs[(int)InputId.TextureHeight].Eval(context).Value;",
        "            var Texture = new Vector2(TextureWidth, TextureHeight);",
        "            var BorderTextureTop = inputs[(int)InputId.BorderTextureTop].Eval(context).Value;",
        "            var BorderTextureRight = inputs[(int)InputId.BorderTextureRight].Eval(context).Value;",
        "            var BorderTextureBottom = inputs[(int)InputId.BorderTextureBottom].Eval(context).Value;",
        "            var BorderTextureLeft = inputs[(int)InputId.BorderTextureLeft].Eval(context).Value;",
        "            var BorderTexture = new Vector4(BorderTextureTop, BorderTextureRight, BorderTextureBottom, BorderTextureLeft);",
        "            // <<< _params",
        "            ",
        "            ",
        "            var somethingChanged = false;",
        "",
        "            if( _border != Border ) {",
        "                _border = Border;",
        "                somethingChanged = true;                ",
        "            }",
        "            ",
        "            if( _texture != Texture) {",
        "                _texture = Texture;",
        "                somethingChanged = true;",
        "            }",
        "            ",
        "            if( _borderTexture != BorderTexture) {",
        "                _borderTexture = BorderTexture;",
        "                somethingChanged = true;",
        "            }",
        "            ",
        "            if( _height != Height) {",
        "                _height = Height;",
        "                somethingChanged = true;",
        "            }",
        "",
        "            if( _width != Width) {",
        "                _width = Width;",
        "                somethingChanged = true;",
        "            }",
        "",
        "            ",
        "",
        "            try {",
        "                if (_planeMesh == null || somethingChanged) {",
        "                    // Function>>> ",
        "                    _normal = new Vector3(0.0f, 0.0f, -1.0f);",
        "                    _color = new Vector4(ColorR, ColorG, ColorB, ColorA);",
        "                    _tangent = new Vector3(1.0f, 0.0f, 0.0f);",
        "                    _binormal = new Vector3(0.0f, -1.0f, 0.0f);",
        "                    ",
        "                    var inputElements = new InputElement[] {",
        "                        new InputElement(\"POSITION\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0, 0),",
        "                        new InputElement(\"NORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 16, 0),",
        "                        new InputElement(\"COLOR\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 28, 0),",
        "                        new InputElement(\"TEXCOORD\", 0, SharpDX.DXGI.Format.R32G32_Float, 44, 0),",
        "                        new InputElement(\"TANGENT\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 52, 0),",
        "                        new InputElement(\"BINORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 64, 0)",
        "                    };",
        "                    ",
        "                    int numQuads = 9; ",
        "                    const int attributesSize = 76;",
        "                    int numTriangles = numQuads * 2;",
        "                    int streamSize = numTriangles * 3 * attributesSize;",
        "",
        "                    if (_planeMesh == null || streamSize != _planeMesh.NumTriangles*3*_planeMesh.AttributesSize) ",
        "                    {",
        "                        Utilities.DisposeObj(ref _planeMesh);",
        "                        using (var stream = new DataStream(streamSize, true, true))",
        "                        {",
        "                            var vertices = new Buffer(context.D3DDevice, stream, new BufferDescription",
        "                                                                                     {",
        "                                                                                         BindFlags = BindFlags.VertexBuffer,",
        "                                                                                         CpuAccessFlags = CpuAccessFlags.Write,",
        "                                                                                         OptionFlags = ResourceOptionFlags.None,",
        "                                                                                         SizeInBytes = streamSize,",
        "                                                                                         Usage = ResourceUsage.Dynamic",
        "                                                                                     });",
        "                            _planeMesh = new Mesh",
        "                                             {",
        "                                                 InputElements = inputElements,",
        "                                                 Vertices = vertices,",
        "                                                 NumTriangles = numTriangles,",
        "                                                 AttributesSize = attributesSize",
        "                                             };",
        "                        }",
        "                    }",
        "                    DataStream vertexStream;",
        "                    context.D3DDevice.ImmediateContext.MapSubresource(_planeMesh.Vertices, MapMode.WriteDiscard, MapFlags.None, out vertexStream);",
        "                    using (vertexStream)",
        "                    {",
        "                        vertexStream.Position = 0;",
        "",
        "                       ",
        "                        float TopOuter = Height / 2.0f;",
        "                        float TopInner = Height / 2.0f - BorderTop;",
        "                        float BottomInner = -Height / 2.0f + BorderBottom;",
        "                        float BottomOuter = -Height / 2.0f;",
        "",
        "                        float LeftOuter = -Width / 2.0f;",
        "                        float LeftInnter = -Width / 2.0f + BorderLeft;",
        "                        float RightInner = Width / 2.0f - BorderRight;",
        "                        float RightOuter = Width / 2.0f;",
        "",
        "                        float uvTopOuter = 1;",
        "                        float uvTopInner =  1- BorderTextureTop / TextureHeight;",
        "                        float uvBottomInner = BorderTextureBottom / TextureHeight;",
        "                        float uvBottomOuter = 0;",
        "",
        "                        float uvLeftOuter = 0;",
        "                        float uvLeftInner = BorderTextureLeft / TextureWidth;",
        "                        float uvRightInner = 1 - BorderTextureRight / TextureWidth;",
        "                        float uvRightOuter = 1;",
        "",
        "",
        "                        //AddRectToStream(vertexStream,    uvLower,         bottom,         uvUpper,       top,         uvLeft,         left,       uvRight,       right);",
        "                        AddRectToStream(vertexStream,      uvBottomOuter,   BottomOuter,    uvBottomInner, BottomInner, uvLeftOuter,    LeftOuter,   uvLeftInner,  LeftInnter);",
        "                        AddRectToStream(vertexStream,      uvBottomOuter,   BottomOuter,    uvBottomInner, BottomInner, uvLeftInner,    LeftInnter,  uvRightInner, RightInner);",
        "                        AddRectToStream(vertexStream,      uvBottomOuter,   BottomOuter,    uvBottomInner, BottomInner, uvRightInner,   RightInner,  uvRightOuter,  RightOuter);",
        "",
        "                        AddRectToStream(vertexStream, uvBottomInner, BottomInner, uvTopInner, TopInner, uvLeftInner, LeftInnter, uvRightInner, RightInner);",
        "                        AddRectToStream(vertexStream, uvBottomInner, BottomInner, uvTopInner, TopInner, uvRightInner, RightInner, uvRightOuter, RightOuter);",
        "                        AddRectToStream(vertexStream, uvBottomInner, BottomInner, uvTopInner, TopInner, uvLeftOuter, LeftOuter, uvLeftInner, LeftInnter);",
        "",
        "                        AddRectToStream(vertexStream, uvTopInner, TopInner, uvTopOuter, TopOuter, uvLeftInner, LeftInnter, uvRightInner, RightInner);",
        "                        AddRectToStream(vertexStream, uvTopInner, TopInner, uvTopOuter, TopOuter, uvRightInner, RightInner, uvRightOuter, RightOuter);",
        "                        AddRectToStream(vertexStream, uvTopInner, TopInner, uvTopOuter, TopOuter, uvLeftOuter, LeftOuter, uvLeftInner, LeftInnter);",
        "",
        "                    }",
        "                    context.D3DDevice.ImmediateContext.UnmapSubresource(_planeMesh.Vertices, 0);",
        "                    // <<< Function",
        "",
        "                    Changed = false;",
        "                }",
        "",
        "                context.Renderer.SetupEffect(context);",
        "                context.Renderer.Render(_planeMesh, context);",
        "            }",
        "            catch (Exception) {",
        "                //Logger.Debug(\"error\");",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        private void AddRectToStream(DataStream vertexStream, float uvBottom, float bottom, float uvTop, float top, float uvLeft, float left, float uvRight, float right)",
        "        {",
        "            // tri 1 vert 1",
        "            vertexStream.Write(new Vector4(right, top, 0, 1));",
        "            vertexStream.Write(_normal);",
        "            vertexStream.Write(_color);",
        "            vertexStream.Write(new Vector2(uvRight, 1.0f - uvTop));",
        "            vertexStream.Write(_tangent);",
        "            vertexStream.Write(_binormal);",
        "",
        "            // tri 1 vert 2",
        "            vertexStream.Write(new Vector4(right, bottom, 0, 1));",
        "            vertexStream.Write(_normal);",
        "            vertexStream.Write(_color);",
        "            vertexStream.Write(new Vector2(uvRight, 1.0f - uvBottom));",
        "            vertexStream.Write(_tangent);",
        "            vertexStream.Write(_binormal);",
        "",
        "            // tri 1 vert 3",
        "            vertexStream.Write(new Vector4(left, bottom, 0, 1));",
        "            vertexStream.Write(_normal);",
        "            vertexStream.Write(_color);",
        "            vertexStream.Write(new Vector2(uvLeft, 1.0f - uvBottom));",
        "            vertexStream.Write(_tangent);",
        "            vertexStream.Write(_binormal);",
        "",
        "            // tri 2 vert 1",
        "            vertexStream.Write(new Vector4(left, bottom, 0, 1));",
        "            vertexStream.Write(_normal);",
        "            vertexStream.Write(_color);",
        "            vertexStream.Write(new Vector2(uvLeft, 1.0f - uvBottom));",
        "            vertexStream.Write(_tangent);",
        "            vertexStream.Write(_binormal);",
        "",
        "            // tri 2 vert 2",
        "            vertexStream.Write(new Vector4(left, top, 0, 1));",
        "            vertexStream.Write(_normal);",
        "            vertexStream.Write(_color);",
        "            vertexStream.Write(new Vector2(uvLeft, 1.0f - uvTop));",
        "            vertexStream.Write(_tangent);",
        "            vertexStream.Write(_binormal);",
        "",
        "            // tri 2 vert 3",
        "            vertexStream.Write(new Vector4(right, top, 0, 1));",
        "            vertexStream.Write(_normal);",
        "            vertexStream.Write(_color);",
        "            vertexStream.Write(new Vector2(uvRight, 1.0f - uvTop));",
        "            vertexStream.Write(_tangent);",
        "            vertexStream.Write(_binormal);",
        "",
        "        }",
        "",
        "        private Mesh _planeMesh;",
        "    }",
        "}"
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6b612d1e-41c8-438d-9885-49b9bee99a9c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "948a8329-d4d2-405c-93bc-de9bcfe9f464"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5e3db7e7-a150-4717-b5ca-86bdc6f252f4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6b612d1e-41c8-438d-9885-49b9bee99a9c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bb900de3-462f-4b6d-b45d-b18205bafe64",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6b612d1e-41c8-438d-9885-49b9bee99a9c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cda1df72-43dd-4f38-b46f-3c437e96c9fa",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6b612d1e-41c8-438d-9885-49b9bee99a9c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1171bf88-4c32-43ba-a6c4-55388980b350",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6b612d1e-41c8-438d-9885-49b9bee99a9c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2e848821-3935-47b4-bf75-b0c261cf321b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6b612d1e-41c8-438d-9885-49b9bee99a9c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "802c10af-6b0b-4374-ba38-e40fbeac0912",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6b612d1e-41c8-438d-9885-49b9bee99a9c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c006627a-e393-4e63-96ef-00487c2dba78",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6b612d1e-41c8-438d-9885-49b9bee99a9c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "328a28a6-4969-4a25-a127-4ff7b92515d1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6b612d1e-41c8-438d-9885-49b9bee99a9c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "736de190-acd0-447a-bf84-05ae3f2f5c80",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6b612d1e-41c8-438d-9885-49b9bee99a9c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "17db7538-a236-48ee-8aad-65c318f6e58f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6b612d1e-41c8-438d-9885-49b9bee99a9c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "92c7ae29-f989-4b5d-aade-14c4908f974d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6b612d1e-41c8-438d-9885-49b9bee99a9c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a269fce9-6313-44b7-a7f9-99024d992ec8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6b612d1e-41c8-438d-9885-49b9bee99a9c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5e9f8faf-64a8-4f2f-988f-7e03da72e246",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6b612d1e-41c8-438d-9885-49b9bee99a9c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e32464b3-fc54-4fd4-bc88-20e0d45a8b41",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6b612d1e-41c8-438d-9885-49b9bee99a9c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8682ad8f-f6dc-41e1-b02c-20af3dd9533e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6b612d1e-41c8-438d-9885-49b9bee99a9c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "406f5b76-3043-4ca7-bc1b-4fce947374e0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6b612d1e-41c8-438d-9885-49b9bee99a9c"
    }
  ]
}