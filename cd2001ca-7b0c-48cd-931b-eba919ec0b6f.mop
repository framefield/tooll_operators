{
  "Name": "CubeMapFromTexture",
  "_id": "cd2001ca-7b0c-48cd-931b-eba919ec0b6f",
  "Namespace": "lib.geometry.pbr.helpers",
  "Description": "Converts a lat long texture to a cubemap that can be used for PBR-lighting.\r\n",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "1c9b8dc5-037d-472a-8710-14f7588aae73",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 objectToWorldMatrix;\r",
          "float4x4 worldToCameraMatrix;\r",
          "float4x4 cameraToObjectMatrix; // modelview inverse\r",
          "float4x4 projMatrix;\r",
          "float4x4 textureMatrix;\r",
          "\r",
          "\r",
          "TextureCube CubeMap;\r",
          "Texture2D txDiffuse;\r",
          "Texture2D Image;\r",
          "\r",
          "float g_CubeSize = 256;\r",
          "float g_CubeLod = 0;\r",
          "float g_CubeLodCount = 1;\r",
          "\r",
          "float Orientation;\r",
          "\r",
          "float2 SunPosition;\r",
          "float4 SunColor;\r",
          "float4 SkyColor;\r",
          "float4 GroundColor;\r",
          "float4 HorizonColor;\r",
          "float HorizonBlur;\r",
          "float HorizonOffset;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "struct vs_out\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float2 uv : TEXCOORD0;\r",
          "};\r",
          " \r",
          "void vs_main(out vs_out o, uint id : SV_VERTEXID)\r",
          "{\r",
          "    o.uv = float2((id << 1) & 2, id & 2);\r",
          "    o.pos = float4(o.uv * float2(2,-2) + float2(-1,1), 0, 1);\r",
          "}\r",
          " \r",
          "struct ps_in\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float3 nrm : TEXCOORD0;\r",
          "    float4 col : COLOR0;\r",
          "    uint face : SV_RENDERTARGETARRAYINDEX;\r",
          "};\r",
          "\r",
          "float4 colorOfBox(uint face)\r",
          "{\r",
          "    float4 c = float4(0,0,0,1);\r",
          "\r",
          "    if (face == 0) // posx (red)\r",
          "    {\r",
          "        c = float4(1,0,0,1);\r",
          "    }\r",
          "    else if (face == 1) // negx (cyan)\r",
          "    {\r",
          "        c = float4(1,1,0,1);\r",
          "    }\r",
          "    else if (face == 2) // posy (green)\r",
          "    {\r",
          "        c = float4(0,1,0,1);\r",
          "    }\r",
          "    else if (face == 3) // negy (magenta)\r",
          "    {\r",
          "        c = float4(0,1,1,1);\r",
          "    }\r",
          "    else if (face == 4) // posz (blue)\r",
          "    {\r",
          "        c = float4(0,0,1,1);\r",
          "    }\r",
          "    else // if (i.face == 5) // negz (yellow)\r",
          "    {\r",
          "        c = float4(1,0,1,1);\r",
          "    }\r",
          " \r",
          "    return c;\r",
          "}\r",
          "\r",
          "float3 UvAndIndexToBoxCoord(float2 uv, uint face)\r",
          "{\r",
          "    float3 n = float3(0,0,0);\r",
          "    float3 t = float3(0,0,0);\r",
          "\r",
          "    if (face == 0) // posx (red)\r",
          "    {\r",
          "        n = float3(1,0,0);\r",
          "        t = float3(0,1,0);\r",
          "    }\r",
          "    else if (face == 1) // negx (cyan)\r",
          "    {\r",
          "        n = float3(-1,0,0);\r",
          "        t = float3(0,1,0);\r",
          "    }\r",
          "    else if (face == 2) // posy (green)\r",
          "    {\r",
          "        n = float3(0,-1,0);\r",
          "        t = float3(0,0,-1);\r",
          "    }\r",
          "    else if (face == 3) // negy (magenta)\r",
          "    {\r",
          "        n = float3(0,1,0);\r",
          "        t = float3(0,0,1);\r",
          "    }\r",
          "    else if (face == 4) // posz (blue)\r",
          "    {\r",
          "        n = float3(0,0,-1);\r",
          "        t = float3(0,1,0);\r",
          "    }\r",
          "    else // if (i.face == 5) // negz (yellow)\r",
          "    {\r",
          "        n = float3(0,0,1);\r",
          "        t = float3(0,1,0);\r",
          "    }\r",
          " \r",
          "    float3 x = cross(n, t);\r",
          " \r",
          "    uv = uv * 2 - 1;\r",
          "     \r",
          "    n = n + t*uv.y + x*uv.x;\r",
          "    n.y *= -1;\r",
          "    n.z *= -1;\r",
          "    return n;\r",
          "}\r",
          " \r",
          "[maxvertexcount(18)]\r",
          "void gs_main(triangle vs_out input[3], inout TriangleStream<ps_in> output)\r",
          "{\r",
          "    for( int f = 0; f < 6; ++f )\r",
          "    {\r",
          "        for( int v = 0; v < 3; ++v )\r",
          "        {\r",
          "            ps_in o;\r",
          "            o.pos = input[v].pos;\r",
          "            o.nrm = UvAndIndexToBoxCoord(input[v].uv, f);\r",
          "            o.col = float4(1,1,1,1);\r",
          "            //o.col = colorOfBox(f);\r",
          "            o.face = f;\r",
          "            output.Append(o);\r",
          "        }\r",
          "        output.RestartStrip();\r",
          "    }\r",
          "}\r",
          " \r",
          "SamplerState g_samCube\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Clamp;\r",
          "    AddressV = Clamp;\r",
          "};\r",
          "\r",
          "float2 ComputeUvFromNormal(float3 n) \r",
          "{\r",
          "    float PI = 3.141578;\r",
          "    float3 N = normalize(n);      \r",
          "    float2 uv = N.xy;\r",
          "    uv.y = acos(N.y) / PI + 1;\r",
          "    uv.x = atan2(N.x, N.z) / PI /2 + 1;\r",
          "    return uv;\r",
          "}\r",
          " \r",
          "float4 ps_main(in ps_in i) : SV_TARGET0\r",
          "{\r",
          "    float2 uv = ComputeUvFromNormal(i.nrm) + float2(Orientation, 0);\r",
          "    return Image.Sample(samLinear,uv);\r",
          "    //return float4(uv.x % 0.1, uv.y % 0.1 ,0,1) * 10;\r",
          "\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "technique10 Render\r",
          "{\r",
          "    pass P0\r",
          "    {\r",
          "        SetVertexShader( CompileShader( vs_5_0, vs_main() ) );\r",
          "        SetGeometryShader( CompileShader( gs_5_0, gs_main() ) );\r",
          "        SetPixelShader( CompileShader( ps_5_0, ps_main() ) );\r",
          "    }\r",
          "} "
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "9c774954-dec2-43da-839f-6fe22f3fafa6",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Resolution",
      "MetaInstanceID": "ae132681-73c4-40be-9bc5-80e5554e356e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "512"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Orientation",
      "MetaInstanceID": "945755ff-17a7-4858-906f-0d730e635dcb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "CubeMap",
      "MetaInstanceID": "4a811ac6-ccd7-4689-9493-a3c077326458",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "1005beea-58f6-45a9-8fd4-8b117365c0cf",
      "MetaID": "d5d66570-6601-478f-b1b5-e9b21b6667ad",
      "Name": "CubeMapFromTextureFunc",
      "Version": "07dbad3f-ff23-4243-a386-5af727f792a2",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.Rendering;",
        "using SharpDX.DXGI;",
        "",
        "",
        "namespace Framefield.Core.IDd5d66570_6601_478f_b1b5_e9b21b6667ad",
        "{",
        "    public class Class_CubeMapFromTexture : FXSourceCodeFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Resolution = 2,",
        "            Orientation = 3",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _prefilteredCubeMap);",
        "            Utilities.DisposeObj(ref _cubeMapRTV);",
        "            Utilities.DisposeObj(ref _rasterizerState);",
        "            base.Dispose();",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Image = inputs[(int)InputId.Image].Eval(context).Image; // Needs to be checked for null!",
        "            var Resolution = inputs[(int)InputId.Resolution].Eval(context).Value;",
        "            var Orientation = inputs[(int)InputId.Orientation].Eval(context).Value;",
        "            //<<< _params",
        "",
        "",
        "            if(Image == null) {",
        "                return context;",
        "            }",
        "",
        "            if (_effect == null)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i) {",
        "                    Compile(i);",
        "                }",
        "                Changed = true;",
        "            }",
        "            ",
        "            var res = (int)Math.Max(1,Resolution);",
        "            ",
        "            var cubeMapSize = new Vector2(res, res);",
        "",
        "            if (_prefilteredCubeMap == null)",
        "            {",
        "                var cubeMapDesc = new Texture2DDescription",
        "                {",
        "                    BindFlags = BindFlags.ShaderResource | BindFlags.RenderTarget,",
        "                    Format = SharpDX.DXGI.Format.R16G16B16A16_Float,",
        "                    Width = (int)cubeMapSize.X,",
        "                    Height = (int)cubeMapSize.Y,",
        "                    MipLevels = 9,",
        "                    SampleDescription = new SampleDescription(1,0),",
        "                    Usage = ResourceUsage.Default,",
        "                    OptionFlags = ResourceOptionFlags.TextureCube | ResourceOptionFlags.GenerateMipMaps,",
        "                    CpuAccessFlags = CpuAccessFlags.None,",
        "                    ArraySize = 6",
        "                };",
        "",
        "                _prefilteredCubeMap = new Texture2D(D3DDevice.Device, cubeMapDesc);",
        "                _cubeMapRTV = new RenderTargetView(D3DDevice.Device, _prefilteredCubeMap);",
        "                ",
        "                var rastDesc = new RasterizerStateDescription",
        "                                   {",
        "                                       FillMode = FillMode.Solid,",
        "                                       CullMode = CullMode.None,",
        "                                       IsDepthClipEnabled = false",
        "                                   };",
        "                _rasterizerState = new RasterizerState(D3DDevice.Device, rastDesc);    ",
        "            }",
        "",
        "            if (Changed)",
        "            {",
        "                var prevEffect = context.Effect;",
        "    ",
        "                var prevRTV = context.RenderTargetView;",
        "                var prevDTV = context.DepthStencilView;",
        "    ",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image)) {",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(_cubeMapRTV, null);",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.BlendState = OperatorPartContext.DefaultRenderer.DisabledBlendState;",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = OperatorPartContext.DefaultRenderer.DisabledDepthStencilState;",
        "                    ",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    SetScalar(\"Orientation\", Orientation / 180f * 3.141578f );",
        "                    /*",
        "                    _effect.GetVariableByName(\"SunPosition\").AsVector().Set(SunPosition);",
        "                    _effect.GetVariableByName(\"SkyColor\").AsVector().Set(SkyColor);",
        "                    _effect.GetVariableByName(\"SunColor\").AsVector().Set(SunColor);",
        "                    _effect.GetVariableByName(\"GroundColor\").AsVector().Set(GroundColor);",
        "                    _effect.GetVariableByName(\"HorizonBlur\").AsScalar().Set(HorizonBlur);",
        "                    _effect.GetVariableByName(\"HorizonOffset\").AsScalar().Set(HorizonOffset);           ",
        "                    _effect.GetVariableByName(\"HorizonColor\").AsVector().Set(HorizonColor);           ",
        "                    */",
        "                        ",
        "                    var viewport = new ViewportF(0.0f, 0.0f, cubeMapSize.X, cubeMapSize.Y);",
        "                    context.D3DDevice.ImmediateContext.Rasterizer.SetViewports(new [] { viewport });",
        "                    context.D3DDevice.ImmediateContext.Rasterizer.State = _rasterizerState;",
        "                    context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "                    context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = SharpDX.Direct3D.PrimitiveTopology.TriangleList;",
        "                    context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(null, 0, 0));",
        "        ",
        "                    var technique = _effect.GetTechniqueByIndex(0);",
        "                    technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "                    context.D3DDevice.ImmediateContext.Draw(6, 0);",
        "    ",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.DepthStencilView, context.RenderTargetView);",
        "                }",
        "",
        "                ",
        "                using (var srv = new ShaderResourceView(context.D3DDevice, _prefilteredCubeMap))",
        "                {",
        "                    Logger.Info(this, \"generate mips\");",
        "                    context.D3DDevice.ImmediateContext.GenerateMips(srv);",
        "                }",
        "                Changed = false;",
        "            }",
        "            ",
        "            context.Image = _prefilteredCubeMap;",
        "            return context;",
        "        }",
        "",
        "        Texture2D _prefilteredCubeMap;",
        "        RenderTargetView _cubeMapRTV;",
        "        RasterizerState _rasterizerState;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1005beea-58f6-45a9-8fd4-8b117365c0cf",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4a811ac6-ccd7-4689-9493-a3c077326458"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1c9b8dc5-037d-472a-8710-14f7588aae73",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1005beea-58f6-45a9-8fd4-8b117365c0cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9c774954-dec2-43da-839f-6fe22f3fafa6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1005beea-58f6-45a9-8fd4-8b117365c0cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ae132681-73c4-40be-9bc5-80e5554e356e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1005beea-58f6-45a9-8fd4-8b117365c0cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "945755ff-17a7-4858-906f-0d730e635dcb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "1005beea-58f6-45a9-8fd4-8b117365c0cf"
    }
  ]
}