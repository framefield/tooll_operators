{
  "Name": "Bend",
  "_id": "59bce661-418d-4394-ba37-bdad6e144e3a",
  "Namespace": "lib.geometry.modify",
  "Description": "Bends a geomentry around the center",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "1a3f4a4b-39af-447d-896f-c8414a0e50dd",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _parameters\r",
          "float Amount;",
          "float3 Center;",
          "float3 Axis;",
          "float2 RangeStart;",
          "float2 RangeEnd;",
          "float3 Orientation;",
          "float SpiralOffset;",
          "//<<< _parameters\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "\r",
          "float Lerp(float a, float b, float t)\r",
          "{\r",
          "    return a + t*(b - a);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "float _noiseTime=0;\r",
          "float _frequency=0;\r",
          "\r",
          "Matrix RotationMatrix(float3 axis, float angle)\r",
          "{\r",
          "    axis = normalize(axis);\r",
          "    float s = sin(angle);\r",
          "    float c = cos(angle);\r",
          "    float oc = 1.0 - c;\r",
          "    \r",
          "    return Matrix(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\r",
          "                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\r",
          "                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\r",
          "                0.0,                                0.0,                                0.0,                                1.0);\r",
          "}\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{\r",
          "    \r",
          "    // For a point P, and a normalized vector V, the point closest to P along V is \r",
          "    // P' = V * dot( P, V ) \r",
          "    float orientationCenter = dot( Center, Orientation);    \r",
          "\r",
          "    float3 spiralDirection = cross( Axis, Orientation);    \r",
          "\r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "        Vertex vertex = input[i];\r",
          "        float4 p = vertex.pos;\r",
          "        \r",
          "        float locationOnOrientation = dot( p, Orientation); \r",
          "\r",
          "        float location = clamp( ( (locationOnOrientation - RangeStart.x)  / ( RangeEnd.x - RangeStart.x) - orientationCenter ), 0, 1);\r",
          "                \r",
          "        float angle = location * Amount;\r",
          "        Matrix transform = RotationMatrix( Axis, angle);\r",
          "        \r",
          "        p = mul(transform, p + spiralDirection * location * SpiralOffset - Center); \r",
          "        p.xyz+= Center;\r",
          "\r",
          "        float3 n = vertex.normal.xyz;        \r",
          "        n = mul(transform,n);\r",
          "        vertex.normal = n;\r",
          "\r",
          "        vertex.pos.xyz = p.xyz;        \r",
          "        outputStream.Append(vertex);\r",
          "    }\r",
          "    \r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scene",
      "MetaInstanceID": "d867220c-ca03-409d-965e-f60aedbf46bf",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Amount",
      "MetaInstanceID": "c10efcf8-9fab-44bf-acb8-94cf8ca8106b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "45"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.X",
      "MetaInstanceID": "3bf5a6a8-94a6-446a-bc5f-25660a490b4b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Y",
      "MetaInstanceID": "f5a1700e-947b-493d-92dc-604818ccec25",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Z",
      "MetaInstanceID": "9993abc9-cdaa-42ac-9336-192c1d7081f8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Axis.X",
      "MetaInstanceID": "93eee61d-701a-4803-9a10-198d762c452a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Axis.Y",
      "MetaInstanceID": "b39adedb-efa4-4b1a-8f8a-250d45701e75",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Axis.Z",
      "MetaInstanceID": "15335276-3a64-4fb1-9ddc-cd792f4c9a64",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RangeStart.Value",
      "MetaInstanceID": "fdda3e70-10ba-4db1-a5d8-148cb05e5b4e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "-1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RangeStart.Smooth",
      "MetaInstanceID": "53d02dd6-9bbf-4b35-bec8-5149c4adf654",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RangeEnd.Value",
      "MetaInstanceID": "a7032560-5b78-4c2d-9d1f-27d445ffccf9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RangeEnd.Smooth",
      "MetaInstanceID": "dfc17841-7fa2-405d-961b-42a0d5894849",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Orientation.X",
      "MetaInstanceID": "82b7c142-585e-49ed-923b-5f8f52f58392",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Orientation.Y",
      "MetaInstanceID": "85a43759-81cc-4889-adca-03b3fcc5da24",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Orientation.Z",
      "MetaInstanceID": "32970db3-27b5-4d3c-ab11-dea8c8e88971",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SpiralOffset",
      "MetaInstanceID": "d76fbcfc-07a0-43fc-86b1-bdc18952acc5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "4de9cde4-8567-475c-a63d-59631c78a547",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "d0581148-c5ac-43e9-b27a-3797d25735e3",
      "MetaID": "180ee525-7f8b-41cf-b1d0-e681e26741ed",
      "Name": "BendFunc",
      "Version": "3b3dbca6-9acf-4539-afc4-73ce4dd133f6",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using SharpDX.Direct3D;",
        "",
        "namespace Framefield.Core.ID180ee525_7f8b_41cf_b1d0_e681e26741ed",
        "{",
        "    public class Class_Bend : FXSourceCodeFunction, IFXSceneSourceCode, IMeshSupplier",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scene = 1,",
        "            Amount = 2,",
        "            CenterX = 3,",
        "            CenterY = 4,",
        "            CenterZ = 5,",
        "            AxisX = 6,",
        "            AxisY = 7,",
        "            AxisZ = 8,",
        "            RangeStartValue = 9,",
        "            RangeStartSmooth = 10,",
        "            RangeEndValue = 11,",
        "            RangeEndSmooth = 12,",
        "            OrientationX = 13,",
        "            OrientationY = 14,",
        "            OrientationZ = 15,",
        "            SpiralOffset = 16",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class_Bend()",
        "        {",
        "            _meshCollector = new MeshCollector(this);",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public void AddMeshesTo(ICollection<Mesh> meshes)",
        "        {",
        "            UpdateMesh(new OperatorPartContext(), OperatorPart.Connections);",
        "            if (_mesh != null)",
        "                meshes.Add(_mesh);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "",
        "                if (_mesh.Vertices != null)",
        "                {",
        "                    // render stream output to screen or whatever target is set",
        "                    context.Renderer.SetupEffect(context);",
        "                    context.Renderer.Render(_mesh, context);",
        "                }",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            if (!Changed && _mesh.Vertices != null)",
        "                return;",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Scene = inputs[(int)InputId.Scene];",
        "            var Amount = inputs[(int)InputId.Amount].Eval(context).Value;",
        "            var CenterX = inputs[(int)InputId.CenterX].Eval(context).Value;",
        "            var CenterY = inputs[(int)InputId.CenterY].Eval(context).Value;",
        "            var CenterZ = inputs[(int)InputId.CenterZ].Eval(context).Value;",
        "            var Center = new Vector3(CenterX, CenterY, CenterZ);",
        "            var AxisX = inputs[(int)InputId.AxisX].Eval(context).Value;",
        "            var AxisY = inputs[(int)InputId.AxisY].Eval(context).Value;",
        "            var AxisZ = inputs[(int)InputId.AxisZ].Eval(context).Value;",
        "            var Axis = new Vector3(AxisX, AxisY, AxisZ);",
        "            var RangeStartValue = inputs[(int)InputId.RangeStartValue].Eval(context).Value;",
        "            var RangeStartSmooth = inputs[(int)InputId.RangeStartSmooth].Eval(context).Value;",
        "            var RangeStart = new Vector2(RangeStartValue, RangeStartSmooth);",
        "            var RangeEndValue = inputs[(int)InputId.RangeEndValue].Eval(context).Value;",
        "            var RangeEndSmooth = inputs[(int)InputId.RangeEndSmooth].Eval(context).Value;",
        "            var RangeEnd = new Vector2(RangeEndValue, RangeEndSmooth);",
        "            var OrientationX = inputs[(int)InputId.OrientationX].Eval(context).Value;",
        "            var OrientationY = inputs[(int)InputId.OrientationY].Eval(context).Value;",
        "            var OrientationZ = inputs[(int)InputId.OrientationZ].Eval(context).Value;",
        "            var Orientation = new Vector3(OrientationX, OrientationY, OrientationZ);",
        "            var SpiralOffset = inputs[(int)InputId.SpiralOffset].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            if (Scene.Func.Changed || _mesh.Vertices == null)",
        "            {",
        "                //Logger.Info(this, \"collect meshes\");",
        "                _meshCollector.Collect(Scene);",
        "                Scene.Func.Changed = false;",
        "            }",
        "",
        "            var inputMesh = _meshCollector.FirstMeshOrDefault;",
        "            if (inputMesh == null)",
        "                return;",
        "",
        "            _mesh.AttributesSize = inputMesh.AttributesSize;",
        "            _mesh.NumTriangles = inputMesh.NumTriangles;",
        "            _mesh.InputElements = inputMesh.InputElements;",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != inputMesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                if (_mesh.Vertices != null)",
        "                    _mesh.Vertices.Dispose();",
        "",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                    {",
        "                                                                        BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                        CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                        OptionFlags = ResourceOptionFlags.None,",
        "                                                                        SizeInBytes = _mesh.NumTriangles*inputMesh.AttributesSize*3,",
        "                                                                        Usage = ResourceUsage.Default",
        "                                                                    });",
        "            }",
        "",
        "            SetScalar(\"Amount\", Amount / 180f * 3.141578f);",
        "            SetScalar(\"SpiralOffset\", SpiralOffset);",
        "            SetVector(\"Center\", Center);",
        "            SetVector(\"Orientation\", Vector3.Normalize(Orientation));",
        "            SetVector(\"Axis\", Vector3.Normalize(Axis));",
        "            SetVector2(\"RangeStart\", RangeStart);",
        "            SetVector2(\"RangeEnd\", RangeEnd);",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, 0) });",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(inputMesh.Vertices, inputMesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw(_mesh.NumTriangles*3, 0);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "        private MeshCollector _meshCollector;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d0581148-c5ac-43e9-b27a-3797d25735e3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de9cde4-8567-475c-a63d-59631c78a547"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1a3f4a4b-39af-447d-896f-c8414a0e50dd",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d0581148-c5ac-43e9-b27a-3797d25735e3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d867220c-ca03-409d-965e-f60aedbf46bf",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d0581148-c5ac-43e9-b27a-3797d25735e3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c10efcf8-9fab-44bf-acb8-94cf8ca8106b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d0581148-c5ac-43e9-b27a-3797d25735e3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3bf5a6a8-94a6-446a-bc5f-25660a490b4b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d0581148-c5ac-43e9-b27a-3797d25735e3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f5a1700e-947b-493d-92dc-604818ccec25",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d0581148-c5ac-43e9-b27a-3797d25735e3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9993abc9-cdaa-42ac-9336-192c1d7081f8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d0581148-c5ac-43e9-b27a-3797d25735e3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "93eee61d-701a-4803-9a10-198d762c452a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d0581148-c5ac-43e9-b27a-3797d25735e3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b39adedb-efa4-4b1a-8f8a-250d45701e75",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d0581148-c5ac-43e9-b27a-3797d25735e3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "15335276-3a64-4fb1-9ddc-cd792f4c9a64",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d0581148-c5ac-43e9-b27a-3797d25735e3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "fdda3e70-10ba-4db1-a5d8-148cb05e5b4e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d0581148-c5ac-43e9-b27a-3797d25735e3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "53d02dd6-9bbf-4b35-bec8-5149c4adf654",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d0581148-c5ac-43e9-b27a-3797d25735e3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a7032560-5b78-4c2d-9d1f-27d445ffccf9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d0581148-c5ac-43e9-b27a-3797d25735e3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "dfc17841-7fa2-405d-961b-42a0d5894849",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d0581148-c5ac-43e9-b27a-3797d25735e3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "82b7c142-585e-49ed-923b-5f8f52f58392",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d0581148-c5ac-43e9-b27a-3797d25735e3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "85a43759-81cc-4889-adca-03b3fcc5da24",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d0581148-c5ac-43e9-b27a-3797d25735e3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "32970db3-27b5-4d3c-ab11-dea8c8e88971",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d0581148-c5ac-43e9-b27a-3797d25735e3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d76fbcfc-07a0-43fc-86b1-bdc18952acc5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d0581148-c5ac-43e9-b27a-3797d25735e3"
    }
  ]
}