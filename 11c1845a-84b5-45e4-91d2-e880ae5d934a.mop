{
  "Name": "RenderSkyMap",
  "_id": "11c1845a-84b5-45e4-91d2-e880ae5d934a",
  "Namespace": "lib.geometry.pbr.helpers",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "36721a47-86f1-498f-a137-319d0325d598",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 objectToWorldMatrix;\r",
          "float4x4 worldToCameraMatrix;\r",
          "float4x4 cameraToObjectMatrix; // modelview inverse\r",
          "float4x4 projMatrix;\r",
          "float4x4 textureMatrix;\r",
          "\r",
          "\r",
          "TextureCube CubeMap;\r",
          "Texture2D txDiffuse;\r",
          "\r",
          "float g_CubeSize = 256;\r",
          "float g_CubeLod = 0;\r",
          "float g_CubeLodCount = 1;\r",
          "\r",
          "float2 SunPosition;\r",
          "float4 SunColor;\r",
          "float4 SkyColor;\r",
          "float4 GroundColor;\r",
          "float4 HorizonColor;\r",
          "float HorizonBlur;\r",
          "float HorizonOffset;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "struct vs_out\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float2 uv : TEXCOORD0;\r",
          "};\r",
          " \r",
          "void vs_main(out vs_out o, uint id : SV_VERTEXID)\r",
          "{\r",
          "    o.uv = float2((id << 1) & 2, id & 2);\r",
          "    o.pos = float4(o.uv * float2(2,-2) + float2(-1,1), 0, 1);\r",
          "}\r",
          " \r",
          "struct ps_in\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float3 nrm : TEXCOORD0;\r",
          "    float4 col : COLOR0;\r",
          "    uint face : SV_RENDERTARGETARRAYINDEX;\r",
          "};\r",
          "\r",
          "float4 colorOfBox(uint face)\r",
          "{\r",
          "    float4 c = float4(0,0,0,1);\r",
          "\r",
          "    if (face == 0) // posx (red)\r",
          "    {\r",
          "        c = float4(1,0,0,1);\r",
          "    }\r",
          "    else if (face == 1) // negx (cyan)\r",
          "    {\r",
          "        c = float4(1,1,0,1);\r",
          "    }\r",
          "    else if (face == 2) // posy (green)\r",
          "    {\r",
          "        c = float4(0,1,0,1);\r",
          "    }\r",
          "    else if (face == 3) // negy (magenta)\r",
          "    {\r",
          "        c = float4(0,1,1,1);\r",
          "    }\r",
          "    else if (face == 4) // posz (blue)\r",
          "    {\r",
          "        c = float4(0,0,1,1);\r",
          "    }\r",
          "    else // if (i.face == 5) // negz (yellow)\r",
          "    {\r",
          "        c = float4(1,0,1,1);\r",
          "    }\r",
          " \r",
          "    return c;\r",
          "}\r",
          "\r",
          "float3 UvAndIndexToBoxCoord(float2 uv, uint face)\r",
          "{\r",
          "    float3 n = float3(0,0,0);\r",
          "    float3 t = float3(0,0,0);\r",
          "\r",
          "    if (face == 0) // posx (red)\r",
          "    {\r",
          "        n = float3(1,0,0);\r",
          "        t = float3(0,1,0);\r",
          "    }\r",
          "    else if (face == 1) // negx (cyan)\r",
          "    {\r",
          "        n = float3(-1,0,0);\r",
          "        t = float3(0,1,0);\r",
          "    }\r",
          "    else if (face == 2) // posy (green)\r",
          "    {\r",
          "        n = float3(0,-1,0);\r",
          "        t = float3(0,0,-1);\r",
          "    }\r",
          "    else if (face == 3) // negy (magenta)\r",
          "    {\r",
          "        n = float3(0,1,0);\r",
          "        t = float3(0,0,1);\r",
          "    }\r",
          "    else if (face == 4) // posz (blue)\r",
          "    {\r",
          "        n = float3(0,0,-1);\r",
          "        t = float3(0,1,0);\r",
          "    }\r",
          "    else // if (i.face == 5) // negz (yellow)\r",
          "    {\r",
          "        n = float3(0,0,1);\r",
          "        t = float3(0,1,0);\r",
          "    }\r",
          " \r",
          "    float3 x = cross(n, t);\r",
          " \r",
          "    uv = uv * 2 - 1;\r",
          "     \r",
          "    n = n + t*uv.y + x*uv.x;\r",
          "    n.y *= -1;\r",
          "    n.z *= -1;\r",
          "    return n;\r",
          "}\r",
          " \r",
          "[maxvertexcount(18)]\r",
          "void gs_main(triangle vs_out input[3], inout TriangleStream<ps_in> output)\r",
          "{\r",
          "    for( int f = 0; f < 6; ++f )\r",
          "    {\r",
          "        for( int v = 0; v < 3; ++v )\r",
          "        {\r",
          "            ps_in o;\r",
          "            o.pos = input[v].pos;\r",
          "            o.nrm = UvAndIndexToBoxCoord(input[v].uv, f);\r",
          "            o.col = float4(1,1,1,1);\r",
          "            //o.col = colorOfBox(f);\r",
          "            o.face = f;\r",
          "            output.Append(o);\r",
          "        }\r",
          "        output.RestartStrip();\r",
          "    }\r",
          "}\r",
          " \r",
          "SamplerState g_samCube\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Clamp;\r",
          "    AddressV = Clamp;\r",
          "};\r",
          "\r",
          "\r",
          "float2 ComputeUvFromNormal(float3 n) \r",
          "{\r",
          "    float PI = 3.141578;\r",
          "    float3 N = normalize(n);      \r",
          "    float2 uv = N.xy;\r",
          "    uv.y = acos(N.y) / PI + 1;\r",
          "    uv.x = atan2(N.x, N.z) / PI /2+1;\r",
          "    return uv % 1;// + float2(-1,-1);\r",
          "}\r",
          " \r",
          "\r",
          "float4 ps_main(in ps_in i) : SV_TARGET0\r",
          "{\r",
          "    float2 sunPosiiton = (SunPosition + 100) % 1;\r",
          "    /*\r",
          "    float3 N = normalize(i.nrm);      \r",
          "    float2 uv = N.xy;\r",
          "   \r",
          "    //Mie mask\r",
          "    uv.y = N.y;\r",
          "    uv.x = atan2(N.x, N.z) + 0.5;\r",
          "    \r",
          "    float sun = max(1- (1.0 + 10.0 * SunPosition.y  + uv.y) * length(uv - sunPosiiton),0.0)\r",
          "        + 0.3 * pow(1-uv.y,12.0) * (1.6-SunPosition.y);\r",
          "\r",
          "    //the sauce\r",
          "    float4 skyColor = float4(lerp(SunColor.rgb, SkyColor.rgb, sun)\r",
          "              * ((0.5 + 1.0 * pow(SunPosition.y,0.4)) * (3-uv.y) + pow(sun, 5.2)\r",
          "              * SunPosition.y * (5.0 + 15.0 * SunPosition.y)),1.0);\r",
          "      \r",
          "    float horizon = clamp( uv.y / -HorizonBlur + 0.5 + HorizonOffset,0,1);\r",
          "        \r",
          "    \r",
          "    float4 withHorizon = lerp(  clamp(skyColor, 0,1), HorizonColor, horizon);\r",
          "    \r",
          "    float ground = saturate(-uv.y*2);\r",
          "    return lerp( withHorizon, GroundColor, ground);\r",
          "    */\r",
          "    \r",
          "    \r",
          "    float2 uv = ComputeUvFromNormal(i.nrm);\r",
          "\r",
          "\r",
          "    float sun = max(1- (1.0+ 10.0 * SunPosition.y  + uv.y) * length( (uv - sunPosiiton) )\r",
          "    ,0.0)\r",
          "        + 0.3 * pow(1-uv.y,12.0) * (1.6-SunPosition.y);\r",
          "\r",
          "    //the sauce\r",
          "    float4 skyColor = float4(lerp(SunColor.rgb, SkyColor.rgb, sun)\r",
          "              * ((0.5 + 1.0 * pow(SunPosition.y,0.4)) * (3.1415 - uv.y) + pow(sun, 5.2)\r",
          "              * SunPosition.y * (5.0 + 15.0 * SunPosition.y)),1.0);\r",
          "    \r",
          "    \r",
          "    return skyColor;\r",
          "    return float4(uv.x, uv.y, 0,1);\r",
          "    \r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "technique10 Render\r",
          "{\r",
          "    pass P0\r",
          "    {\r",
          "        SetVertexShader( CompileShader( vs_5_0, vs_main() ) );\r",
          "        SetGeometryShader( CompileShader( gs_5_0, gs_main() ) );\r",
          "        SetPixelShader( CompileShader( ps_5_0, ps_main() ) );\r",
          "    }\r",
          "} "
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SunPosition.X",
      "MetaInstanceID": "b6fd5925-8b20-4bd4-82f5-215899b4cce6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.3"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SunPosition.Y",
      "MetaInstanceID": "4ff01ac3-befb-4fee-813c-0197cafcdfac",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.25"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SkyColor.R",
      "MetaInstanceID": "bf1289f5-ec09-4902-9155-6bcdf66cb1b3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.2113728"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SkyColor.G",
      "MetaInstanceID": "e27ec68f-4852-4398-8e18-0413a7c08be4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.210723"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SkyColor.B",
      "MetaInstanceID": "dab23cf6-9c08-424c-9e38-e15b6c079910",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.1902866"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SkyColor.A",
      "MetaInstanceID": "5791ee3f-4b69-4361-9e54-d4aff157d935",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SunColor.R",
      "MetaInstanceID": "4ca498ba-d72c-4930-8ef1-93a721fbe836",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.100248"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SunColor.G",
      "MetaInstanceID": "23c7bd9b-1974-47ff-a23b-4c88bceb510a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.1897209"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SunColor.B",
      "MetaInstanceID": "04d70fbe-40e9-4934-bcce-6de67cf0058d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.2156863"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SunColor.A",
      "MetaInstanceID": "f3581573-ef02-4213-a5a6-876b7872d427",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Resolution",
      "MetaInstanceID": "d5162e1d-a4cf-4d3c-849e-307f233220fc",
      "DefaultValue": {
        "Type": "Float",
        "Value": "512"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "4096",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "GroundColor.R",
      "MetaInstanceID": "106ca912-fcd3-4d55-943f-1ea7a5e1bb83",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.4235294"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "GroundColor.G",
      "MetaInstanceID": "a19ccddd-1f59-45e2-b4f7-816b75064f68",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.4235294"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "GroundColor.B",
      "MetaInstanceID": "eaeb7205-73bd-4def-a0ba-c9f794f91835",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.4235294"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "GroundColor.A",
      "MetaInstanceID": "376bcc1e-13ae-4113-839c-1cff282260f1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "HorizonBlur",
      "MetaInstanceID": "b552da93-9389-4d66-86b5-e4c2791408b3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.3"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "HorizonOffset",
      "MetaInstanceID": "ece6f16a-2e8a-41d2-bd22-041209380c1f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.46"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "HorizonColor.R",
      "MetaInstanceID": "574eb510-bc1c-4bf0-a9cd-967760c3dc8b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "HorizonColor.G",
      "MetaInstanceID": "88cfdf07-58fa-498b-94fa-113e686f8cd8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "HorizonColor.B",
      "MetaInstanceID": "b9034fb3-b4c2-4f50-9b64-b2bfd426a566",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "HorizonColor.A",
      "MetaInstanceID": "84c40c38-5f9c-4ffb-9f14-30ea36879d2d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "CubeMap",
      "MetaInstanceID": "661a4e59-e747-47e6-90f9-c027afc0e363",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "5a9258fe-fcc2-482f-a554-7bd14197c97c",
      "MetaID": "082a4fe5-7097-4375-aa3e-bcac3baf5bfc",
      "Name": "RenderSkyMapFunc",
      "Version": "8dc89efb-156e-435c-b2ae-ad3ae5711e6b",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.Rendering;",
        "using SharpDX.DXGI;",
        "",
        "",
        "namespace Framefield.Core.ID082a4fe5_7097_4375_aa3e_bcac3baf5bfc",
        "{",
        "    public class Class_RenderSkyMap : FXSourceCodeFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            SunPositionX = 1,",
        "            SunPositionY = 2,",
        "            SkyColorR = 3,",
        "            SkyColorG = 4,",
        "            SkyColorB = 5,",
        "            SkyColorA = 6,",
        "            SunColorR = 7,",
        "            SunColorG = 8,",
        "            SunColorB = 9,",
        "            SunColorA = 10,",
        "            Resolution = 11,",
        "            GroundColorR = 12,",
        "            GroundColorG = 13,",
        "            GroundColorB = 14,",
        "            GroundColorA = 15,",
        "            HorizonBlur = 16,",
        "            HorizonOffset = 17,",
        "            HorizonColorR = 18,",
        "            HorizonColorG = 19,",
        "            HorizonColorB = 20,",
        "            HorizonColorA = 21",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _prefilteredCubeMap);",
        "            Utilities.DisposeObj(ref _cubeMapRTV);",
        "            Utilities.DisposeObj(ref _rasterizerState);",
        "            base.Dispose();",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var SunPositionX = inputs[(int)InputId.SunPositionX].Eval(context).Value;",
        "            var SunPositionY = inputs[(int)InputId.SunPositionY].Eval(context).Value;",
        "            var SunPosition = new Vector2(SunPositionX, SunPositionY);",
        "            var SkyColorR = inputs[(int)InputId.SkyColorR].Eval(context).Value;",
        "            var SkyColorG = inputs[(int)InputId.SkyColorG].Eval(context).Value;",
        "            var SkyColorB = inputs[(int)InputId.SkyColorB].Eval(context).Value;",
        "            var SkyColorA = inputs[(int)InputId.SkyColorA].Eval(context).Value;",
        "            var SkyColor = new Color4(SkyColorR, SkyColorG, SkyColorB, SkyColorA);",
        "            var SunColorR = inputs[(int)InputId.SunColorR].Eval(context).Value;",
        "            var SunColorG = inputs[(int)InputId.SunColorG].Eval(context).Value;",
        "            var SunColorB = inputs[(int)InputId.SunColorB].Eval(context).Value;",
        "            var SunColorA = inputs[(int)InputId.SunColorA].Eval(context).Value;",
        "            var SunColor = new Color4(SunColorR, SunColorG, SunColorB, SunColorA);",
        "            var Resolution = inputs[(int)InputId.Resolution].Eval(context).Value;",
        "            var GroundColorR = inputs[(int)InputId.GroundColorR].Eval(context).Value;",
        "            var GroundColorG = inputs[(int)InputId.GroundColorG].Eval(context).Value;",
        "            var GroundColorB = inputs[(int)InputId.GroundColorB].Eval(context).Value;",
        "            var GroundColorA = inputs[(int)InputId.GroundColorA].Eval(context).Value;",
        "            var GroundColor = new Color4(GroundColorR, GroundColorG, GroundColorB, GroundColorA);",
        "            var HorizonBlur = inputs[(int)InputId.HorizonBlur].Eval(context).Value;",
        "            var HorizonOffset = inputs[(int)InputId.HorizonOffset].Eval(context).Value;",
        "            var HorizonColorR = inputs[(int)InputId.HorizonColorR].Eval(context).Value;",
        "            var HorizonColorG = inputs[(int)InputId.HorizonColorG].Eval(context).Value;",
        "            var HorizonColorB = inputs[(int)InputId.HorizonColorB].Eval(context).Value;",
        "            var HorizonColorA = inputs[(int)InputId.HorizonColorA].Eval(context).Value;",
        "            var HorizonColor = new Color4(HorizonColorR, HorizonColorG, HorizonColorB, HorizonColorA);",
        "            //<<< _params",
        "",
        "",
        "            if (_effect == null)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i) {",
        "                    Compile(i);",
        "                }",
        "                //Logger.Info(this, \"compiled fx\");",
        "                Changed = true;",
        "            }",
        "            ",
        "            var cubeMapSize = new Vector2(512, 512);",
        "",
        "            if (_prefilteredCubeMap == null)",
        "            {",
        "                //Logger.Info(this, \"create cubemap\");",
        "                var cubeMapDesc = new Texture2DDescription",
        "                {",
        "                    BindFlags = BindFlags.ShaderResource | BindFlags.RenderTarget,",
        "                    Format = SharpDX.DXGI.Format.R16G16B16A16_Float,",
        "                    Width = (int)cubeMapSize.X,",
        "                    Height = (int)cubeMapSize.Y,",
        "                    MipLevels = 9,",
        "                    SampleDescription = new SampleDescription(1,0),",
        "                    Usage = ResourceUsage.Default,",
        "                    OptionFlags = ResourceOptionFlags.TextureCube | ResourceOptionFlags.GenerateMipMaps,",
        "                    CpuAccessFlags = CpuAccessFlags.None,",
        "                    ArraySize = 6",
        "                };",
        "",
        "                _prefilteredCubeMap = new Texture2D(D3DDevice.Device, cubeMapDesc);",
        "                _cubeMapRTV = new RenderTargetView(D3DDevice.Device, _prefilteredCubeMap);",
        "                ",
        "                var rastDesc = new RasterizerStateDescription",
        "                                   {",
        "                                       FillMode = FillMode.Solid,",
        "                                       CullMode = CullMode.None,",
        "                                       IsDepthClipEnabled = false",
        "                                   };",
        "                _rasterizerState = new RasterizerState(D3DDevice.Device, rastDesc);    ",
        "            }",
        "",
        "            if (Changed)",
        "            {",
        "                var prevEffect = context.Effect;",
        "    ",
        "                var prevRTV = context.RenderTargetView;",
        "                var prevDTV = context.DepthStencilView;",
        "    ",
        "    ",
        "                context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(_cubeMapRTV, null);",
        "                context.D3DDevice.ImmediateContext.OutputMerger.BlendState = OperatorPartContext.DefaultRenderer.DisabledBlendState;",
        "                context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = OperatorPartContext.DefaultRenderer.DisabledDepthStencilState;",
        "                ",
        "                _effect.GetVariableByName(\"SunPosition\").AsVector().Set(SunPosition);",
        "                _effect.GetVariableByName(\"SkyColor\").AsVector().Set(SkyColor);",
        "                _effect.GetVariableByName(\"SunColor\").AsVector().Set(SunColor);",
        "                _effect.GetVariableByName(\"GroundColor\").AsVector().Set(GroundColor);",
        "                _effect.GetVariableByName(\"HorizonBlur\").AsScalar().Set(HorizonBlur);",
        "                _effect.GetVariableByName(\"HorizonOffset\").AsScalar().Set(HorizonOffset);           ",
        "                _effect.GetVariableByName(\"HorizonColor\").AsVector().Set(HorizonColor);           ",
        "                ",
        "    ",
        "                var viewport = new ViewportF(0.0f, 0.0f, cubeMapSize.X, cubeMapSize.Y);",
        "                context.D3DDevice.ImmediateContext.Rasterizer.SetViewports(new [] { viewport });",
        "                context.D3DDevice.ImmediateContext.Rasterizer.State = _rasterizerState;",
        "                context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "                context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = SharpDX.Direct3D.PrimitiveTopology.TriangleList;",
        "                context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(null, 0, 0));",
        "    ",
        "                var technique = _effect.GetTechniqueByIndex(0);",
        "                technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "                context.D3DDevice.ImmediateContext.Draw(6, 0);",
        "    ",
        "                context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.DepthStencilView, context.RenderTargetView);",
        "    ",
        "                using (var srv = new ShaderResourceView(context.D3DDevice, _prefilteredCubeMap))",
        "                {",
        "                    Logger.Info(this, \"generate mips\");",
        "                    context.D3DDevice.ImmediateContext.GenerateMips(srv);",
        "                }",
        "                Changed = false;",
        "            }",
        "            ",
        "            context.Image = _prefilteredCubeMap;",
        "            return context;",
        "        }",
        "",
        "        Texture2D _prefilteredCubeMap;",
        "        RenderTargetView _cubeMapRTV;",
        "        RasterizerState _rasterizerState;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "661a4e59-e747-47e6-90f9-c027afc0e363"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "36721a47-86f1-498f-a137-319d0325d598",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b6fd5925-8b20-4bd4-82f5-215899b4cce6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4ff01ac3-befb-4fee-813c-0197cafcdfac",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bf1289f5-ec09-4902-9155-6bcdf66cb1b3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e27ec68f-4852-4398-8e18-0413a7c08be4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "dab23cf6-9c08-424c-9e38-e15b6c079910",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5791ee3f-4b69-4361-9e54-d4aff157d935",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4ca498ba-d72c-4930-8ef1-93a721fbe836",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "23c7bd9b-1974-47ff-a23b-4c88bceb510a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "04d70fbe-40e9-4934-bcce-6de67cf0058d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f3581573-ef02-4213-a5a6-876b7872d427",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d5162e1d-a4cf-4d3c-849e-307f233220fc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "106ca912-fcd3-4d55-943f-1ea7a5e1bb83",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a19ccddd-1f59-45e2-b4f7-816b75064f68",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "eaeb7205-73bd-4def-a0ba-c9f794f91835",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "376bcc1e-13ae-4113-839c-1cff282260f1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b552da93-9389-4d66-86b5-e4c2791408b3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ece6f16a-2e8a-41d2-bd22-041209380c1f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "574eb510-bc1c-4bf0-a9cd-967760c3dc8b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "88cfdf07-58fa-498b-94fa-113e686f8cd8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b9034fb3-b4c2-4f50-9b64-b2bfd426a566",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "84c40c38-5f9c-4ffb-9f14-30ea36879d2d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5a9258fe-fcc2-482f-a554-7bd14197c97c"
    }
  ]
}