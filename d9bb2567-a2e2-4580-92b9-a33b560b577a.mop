{
  "Name": "CurveGeometry",
  "_id": "d9bb2567-a2e2-4580-92b9-a33b560b577a",
  "Namespace": "lib.basic.curve",
  "Description": "Samples a curve into a geometry.",
  "Inputs": [
    {
      "Name": "Steps",
      "MetaInstanceID": "ce75c3be-9f66-4f33-9d6c-d24cfc1ddcd0",
      "DefaultValue": {
        "Type": "Float",
        "Value": "100"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "2",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Width",
      "MetaInstanceID": "974b92ea-770a-46e0-b529-31917c80ed90",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "UpVector.X",
      "MetaInstanceID": "292cbc32-9f61-4f44-ae1d-27ef51ade645",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "UpVector.Y",
      "MetaInstanceID": "4e89f8be-bd37-4a97-a0f3-5f9733fb6ef2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "UpVector.Z",
      "MetaInstanceID": "f1fa21c6-04fa-48a0-ba16-da9804b9cc27",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.R",
      "MetaInstanceID": "0dc116cf-9654-41f9-8451-58d925a7098e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.G",
      "MetaInstanceID": "ecdb3da3-d64a-4202-853d-b97f1c25bbf8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.B",
      "MetaInstanceID": "59d55766-fa21-4aea-9100-b52cbbe9139c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.A",
      "MetaInstanceID": "df72400a-19f3-43e6-8dfc-2040419ab29a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Range.Start",
      "MetaInstanceID": "1d880755-a9e2-4486-82a5-0f96ca7c557b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Range.End",
      "MetaInstanceID": "c9c55c4c-cad1-42c4-8afd-471ecfd1a008",
      "DefaultValue": {
        "Type": "Float",
        "Value": "100"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Curve",
      "MetaInstanceID": "320d0262-0607-467c-8fd9-c22835a84b54",
      "DefaultValue": {
        "Type": "Dynamic",
        "Value": "Framefield.Core.Dynamic"
      },
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Out",
      "MetaInstanceID": "3d281250-8429-4c8a-b592-d1e6963b2706",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "968df7d0-e254-47cf-b1ae-c730cbfb8724",
      "MetaID": "adcaf21d-fa1b-4fa6-a4d7-b525554d95e4",
      "Name": "CurveGeometryFunc",
      "Version": "76fcdd3c-8ff8-4e10-a028-2a8aafabb609",
      "Type": "Scene",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "using Framefield.Core.IDb03022e3_8b4f_4d33_b749_ef30a03ef098; // CurveProviderFunc",
        "//<<< _using",
        "",
        "",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.IDadcaf21d_fa1b_4fa6_a4d7_b525554d95e4",
        "{",
        "    public class Class_CurveGeometry : OperatorPart.Function",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Steps = 0,",
        "            Width = 1,",
        "            UpVectorX = 2,",
        "            UpVectorY = 3,",
        "            UpVectorZ = 4,",
        "            ColorR = 5,",
        "            ColorG = 6,",
        "            ColorB = 7,",
        "            ColorA = 8,",
        "            RangeStart = 9,",
        "            RangeEnd = 10,",
        "            Curve = 11",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override void Dispose() {",
        "            Utilities.DisposeObj(ref _planeMesh);",
        "        }",
        "",
        "        ",
        "        float _width;",
        "        int _steps = 10;",
        "        int _uvMode;",
        "        int _paintedUpdates = 0;",
        "        float _textureScale;",
        "        float _lastTextureU;",
        "        float _minDistance;",
        "        float _paintedLength;",
        "        float _twist;",
        "        int _numControlPoints=1;",
        "        Vector3 _up;",
        "        ",
        "        ICurveProvider  _curve;",
        "        ",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) ",
        "        {",
        "",
        "            //>>> _params",
        "            var Steps = inputs[(int)InputId.Steps].Eval(context).Value;",
        "            var Width = inputs[(int)InputId.Width].Eval(context).Value;",
        "            var UpVectorX = inputs[(int)InputId.UpVectorX].Eval(context).Value;",
        "            var UpVectorY = inputs[(int)InputId.UpVectorY].Eval(context).Value;",
        "            var UpVectorZ = inputs[(int)InputId.UpVectorZ].Eval(context).Value;",
        "            var UpVector = new Vector3(UpVectorX, UpVectorY, UpVectorZ);",
        "            var ColorR = inputs[(int)InputId.ColorR].Eval(context).Value;",
        "            var ColorG = inputs[(int)InputId.ColorG].Eval(context).Value;",
        "            var ColorB = inputs[(int)InputId.ColorB].Eval(context).Value;",
        "            var ColorA = inputs[(int)InputId.ColorA].Eval(context).Value;",
        "            var Color = new Color4(ColorR, ColorG, ColorB, ColorA);",
        "            var RangeStart = inputs[(int)InputId.RangeStart].Eval(context).Value;",
        "            var RangeEnd = inputs[(int)InputId.RangeEnd].Eval(context).Value;",
        "            var Range = new Vector2(RangeStart, RangeEnd);",
        "            var Curve = inputs[(int)InputId.Curve].Eval(context).Dynamic;  // Needs to be checked for null!",
        "            //<<< _params",
        "",
        "            _curve = Curve as ICurveProvider;",
        "            if( _curve == null) {            ",
        "                Logger.Warn(this, \"Can't render because curve is not connected or invalid\");",
        "                return context;",
        "            }",
        "",
        "",
        "            if (_planeMesh == null || Changed) {",
        "            ",
        "                var normal = new Vector3(0.0f, 0.0f, -1.0f);",
        "                var color = Color;",
        "                var tangent = new Vector3(1.0f, 0.0f, 0.0f);",
        "                var binormal = new Vector3(0.0f, -1.0f, 0.0f);",
        "                    ",
        "                var inputElements = new InputElement[] {",
        "                    new InputElement(\"POSITION\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0, 0),",
        "                    new InputElement(\"NORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 16, 0),",
        "                    new InputElement(\"COLOR\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 28, 0),",
        "                    new InputElement(\"TEXCOORD\", 0, SharpDX.DXGI.Format.R32G32_Float, 44, 0),",
        "                    new InputElement(\"TANGENT\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 52, 0),",
        "                    new InputElement(\"BINORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 64, 0)",
        "                };",
        "                ",
        "                _steps = (int)Steps;",
        "",
        "                if (_steps < 2)",
        "                    return context;",
        "                ",
        "                _numControlPoints = _curve.GetPoints().Count();",
        "                ",
        "                    ",
        "                ",
        "                // Setup vertex-structure",
        "                const int attributesSize = 76;",
        "                int numTriangles = (_steps-1) *2;",
        "                int streamSize = numTriangles * 3 * attributesSize;",
        "",
        "                if (_planeMesh == null || streamSize != _planeMesh.Vertices.Description.SizeInBytes) ",
        "                {",
        "                    Utilities.DisposeObj(ref _planeMesh);",
        "                    using (var stream = new DataStream(streamSize, true, true))",
        "                    {",
        "                        var vertices = new Buffer(context.D3DDevice, stream, new BufferDescription",
        "                                           {",
        "                                               BindFlags = BindFlags.VertexBuffer,",
        "                                               CpuAccessFlags = CpuAccessFlags.Write,",
        "                                               OptionFlags = ResourceOptionFlags.None,",
        "                                               SizeInBytes = streamSize,",
        "                                               Usage = ResourceUsage.Dynamic",
        "                                           });",
        "                        _planeMesh = new Mesh { InputElements = inputElements, Vertices = vertices, NumTriangles = numTriangles, AttributesSize = attributesSize };",
        "                    }",
        "                }",
        "                if (_planeMesh.NumTriangles != numTriangles)",
        "                {",
        "                    _planeMesh.NumTriangles = numTriangles;",
        "                }",
        "",
        "                DataStream vertexStream;",
        "                DataBox box = context.D3DDevice.ImmediateContext.MapSubresource(_planeMesh.Vertices, MapMode.WriteDiscard, MapFlags.None, out vertexStream);",
        "                using (vertexStream)",
        "                {",
        "                    vertexStream.Position = 0;",
        "    ",
        "                    float uShift = _paintedLength;",
        "                    ",
        "                    var lastPointOnCurve = _curve.SampleAt(RangeStart); ",
        "                    var lastP0 = new Vector4( lastPointOnCurve.X, lastPointOnCurve.Y + Width * lastPointOnCurve.W, lastPointOnCurve.Z, 1 );                    ",
        "                    var lastP1 = new Vector4( lastPointOnCurve.X, lastPointOnCurve.Y - Width * lastPointOnCurve.W, lastPointOnCurve.Z, 1 );                    ",
        "                    ",
        "                    for (int i = 0; i < _steps - 1; ++i) ",
        "                    {",
        "                        ",
        "                        //var samplePos = i / (double)_steps * (_numControlPoints -2) * 3 ;",
        "                        var samplePos = (float)i/_steps * (RangeEnd-RangeStart) + RangeStart;",
        "                        var nextPointOnCurve = _curve.SampleAt(samplePos);",
        "                        var nextP0 = new Vector4( nextPointOnCurve.X, nextPointOnCurve.Y + Width * nextPointOnCurve.W, nextPointOnCurve.Z, 1 );                    ",
        "                        var nextP1 = new Vector4( nextPointOnCurve.X, nextPointOnCurve.Y - Width * nextPointOnCurve.W, nextPointOnCurve.Z, 1 );                                            ",
        "                        var u = (float)samplePos;",
        "                    ",
        "                        // tri 1 vert 1",
        "                        vertexStream.Write(lastP0);",
        "                        vertexStream.Write(normal);",
        "                        vertexStream.Write(color);",
        "                        vertexStream.Write( new Vector2(u,0));",
        "                        vertexStream.Write(tangent);",
        "                        vertexStream.Write(binormal);",
        "    ",
        "                        // tri 1 vert 2",
        "                        vertexStream.Write(nextP0);",
        "                        vertexStream.Write(normal);",
        "                        vertexStream.Write(color);",
        "                        vertexStream.Write(new Vector2(u, 1));",
        "                        vertexStream.Write(tangent);",
        "                        vertexStream.Write(binormal);",
        "    ",
        "                        // tri 1 vert 3",
        "                        vertexStream.Write(lastP1);",
        "                        vertexStream.Write(normal);",
        "                        vertexStream.Write(color);",
        "                        vertexStream.Write(new Vector2(u, 0));",
        "                        vertexStream.Write(tangent);",
        "                        vertexStream.Write(binormal);",
        "    ",
        "                        // tri 2 vert 1",
        "                        vertexStream.Write(nextP0);",
        "                        vertexStream.Write(normal);",
        "                        vertexStream.Write(color);",
        "                        vertexStream.Write(new Vector2(u, 1));",
        "                        vertexStream.Write(tangent);",
        "                        vertexStream.Write(binormal);",
        "    ",
        "                        // tri 2 vert 2",
        "                        vertexStream.Write(nextP1);",
        "                        vertexStream.Write(normal);",
        "                        vertexStream.Write(color);",
        "                        vertexStream.Write(new Vector2(u, 1));",
        "                        vertexStream.Write(tangent);",
        "                        vertexStream.Write(binormal);",
        "    ",
        "                        // tri 2 vert 3",
        "                        vertexStream.Write(lastP1);",
        "                        vertexStream.Write(normal);",
        "                        vertexStream.Write(color);",
        "                        vertexStream.Write(new Vector2(u, 0));",
        "                        vertexStream.Write(tangent);",
        "                        vertexStream.Write(binormal);",
        "                        ",
        "                        lastP0 = nextP0;",
        "                        lastP1 = nextP1;",
        "                    }",
        "                    context.D3DDevice.ImmediateContext.UnmapSubresource(_planeMesh.Vertices, 0);",
        "                }",
        "",
        "                Changed = false;",
        "            }",
        "",
        "            context.Renderer.SetupEffect(context);",
        "            context.Renderer.Render(_planeMesh, context);",
        "",
        "            return context;",
        "        }",
        "",
        "        private Mesh _planeMesh;",
        "    }",
        "}"
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [
    {
      "Name": "CurveProvider",
      "MetaInstanceID": "1d2b47ff-a887-4553-ac1f-296f0663ba70",
      "MetaID": "6a030fc7-b200-478e-84a1-dd4825b8d5cc",
      "OperatorProperties": {
        "Name": "",
        "PosX": "100",
        "PosY": "100",
        "Width": "100",
        "Visible": "True",
        "Disabled": "False",
        "Inputs": [],
        "States": []
      }
    }
  ],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "968df7d0-e254-47cf-b1ae-c730cbfb8724",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3d281250-8429-4c8a-b592-d1e6963b2706"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ce75c3be-9f66-4f33-9d6c-d24cfc1ddcd0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "968df7d0-e254-47cf-b1ae-c730cbfb8724"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "974b92ea-770a-46e0-b529-31917c80ed90",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "968df7d0-e254-47cf-b1ae-c730cbfb8724"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "292cbc32-9f61-4f44-ae1d-27ef51ade645",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "968df7d0-e254-47cf-b1ae-c730cbfb8724"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4e89f8be-bd37-4a97-a0f3-5f9733fb6ef2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "968df7d0-e254-47cf-b1ae-c730cbfb8724"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f1fa21c6-04fa-48a0-ba16-da9804b9cc27",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "968df7d0-e254-47cf-b1ae-c730cbfb8724"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0dc116cf-9654-41f9-8451-58d925a7098e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "968df7d0-e254-47cf-b1ae-c730cbfb8724"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ecdb3da3-d64a-4202-853d-b97f1c25bbf8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "968df7d0-e254-47cf-b1ae-c730cbfb8724"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "59d55766-fa21-4aea-9100-b52cbbe9139c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "968df7d0-e254-47cf-b1ae-c730cbfb8724"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "df72400a-19f3-43e6-8dfc-2040419ab29a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "968df7d0-e254-47cf-b1ae-c730cbfb8724"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1d880755-a9e2-4486-82a5-0f96ca7c557b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "968df7d0-e254-47cf-b1ae-c730cbfb8724"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c9c55c4c-cad1-42c4-8afd-471ecfd1a008",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "968df7d0-e254-47cf-b1ae-c730cbfb8724"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "320d0262-0607-467c-8fd9-c22835a84b54",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "968df7d0-e254-47cf-b1ae-c730cbfb8724"
    }
  ]
}