{
  "Name": "GradientBlur",
  "_id": "6538a202-59c3-48ba-9b05-258bd8bc2c69",
  "Namespace": "lib.image.blur",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "88b8843c-ec62-4870-a380-264f5e6c1e77",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D Image;",
          "float Angle;",
          "float Position;",
          "float Size;",
          "float Strength;",
          "float SampleCount;",
          "//<<< _parameters\r",
          " \r",
          "//>>> setup\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_POINT;\r",
          "    AddressU = Clamp;\r",
          "    AddressV = Clamp;\r",
          "};\r",
          "//<<< setup\r",
          "\r",
          "BlendState NoBlend \r",
          "{\r",
          "    AlphaToCoverageEnable = FALSE;\r",
          "    BlendEnable[0] = FALSE;\r",
          "};\r",
          "\r",
          "//>>> declarations\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float2 texCoord : TEXCOORD;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float2 texCoord: TEXCOORD0;\t    \r",
          "    float3 worldTViewPos: TEXCOORD1;\r",
          "    float3 worldTViewDir: TEXCOORD2;\r",
          "};\r",
          "//<<< declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "static const int NUMWT = 10;\r",
          "static const float Gauss[NUMWT] = { 0.93, 0.86, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1 };\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float width, height;\r",
          "    Image.GetDimensions(width, height);\r",
          "\r",
          "    float2 dir = float2( sin(Angle), cos(Angle));\r",
          "\r",
          "\r",
          "\r",
          "    // Calculate distance to line...\r",
          "    float2 p1 = float2(0.5,0.5);\r",
          "    float2 p2 = p1 + dir * 0.1; // BUG? Without the multiplication, the shader doesn't compile...\r",
          "    float size= length(dir);\r",
          "    float cx = p2.x - p1.x;\r",
          "    float cy = p2.y - p1.y;\r",
          "    float bx = -cy;\r",
          "    float by = cx;\r",
          "    float x= input.texCoord.x;\r",
          "    float y= input.texCoord.y;\r",
          "    float ex = x - p1.x;\r",
          "    float ey = y - p1.y;\r",
          "        \r",
          "    float dist = (ex*by - ey*bx) / (sqrt(bx*bx + by*by));\r",
          "    dist -= Position;\r",
          "    dist /= Size;\r",
          "    float blurStrength =  min( max(-dist + 0.5, 0), 1) ;\r",
          "    \r",
          "    dir *= blurStrength*Strength / float2(width,height)/SampleCount;\r",
          "\r",
          "    float2 pos = dir;\r",
          "    float4 c = Image.Sample(samLinear, input.texCoord);\r",
          "    float totalWeight = 1;\r",
          "    for (int i = 0; i < SampleCount; ++i) {\r",
          "        float index = (float)i*(NUMWT - 1)/SampleCount;\r",
          "        float weight = lerp(Gauss[(int)index], Gauss[(int)index + 1], frac(index));\r",
          "        c += Image.Sample(samLinear, input.texCoord + pos)*weight;\r",
          "        c += Image.Sample(samLinear, input.texCoord - pos)*weight;\r",
          "        pos += dir;\r",
          "        totalWeight += 2*weight;\r",
          "    }\r",
          "\r",
          "    c.rgb = c.rgb/totalWeight;\r",
          "    return c;\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "//>>> technique\r",
          "technique10 Render\r",
          "{\r",
          "    pass P0\r",
          "    {\r",
          "    SetBlendState( NoBlend, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );\r",
          "        SetGeometryShader( 0 );\r",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );\r",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );\r",
          "    }\r",
          "}\r",
          "//<<< _technique\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "593a1b3b-f345-4e8c-a2ef-1d8d9cd27ab0",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Angle",
      "MetaInstanceID": "137ba877-8858-4a75-9edb-3b3756a77e4d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Position",
      "MetaInstanceID": "13ae64df-098b-4f45-9aff-9a895d1f73a9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size",
      "MetaInstanceID": "d853cd85-f2e5-49eb-986d-3c1360b1a3d1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Strength",
      "MetaInstanceID": "6ce22d40-fc79-44b1-aeb7-1640dd2cccdd",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SampleCount",
      "MetaInstanceID": "dbd85049-952a-4749-aed8-540aba9109e1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "9"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "25f75ed5-117b-49cf-b747-17857321c295",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "67441608-f7bb-41ed-9ad6-c68bbdd223ed",
      "MetaID": "78ac0e2c-cd3f-485e-95fa-8e3a2e719060",
      "Name": "GradientBlurFunc",
      "Version": "4e09d960-70bc-433a-88f3-f57e5d94ce96",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID78ac0e2c_cd3f_485e_95fa_8e3a2e719060",
        "{",
        "    public class Class_GradientBlur : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Angle = 2,",
        "            Position = 3,",
        "            Size = 4,",
        "            Strength = 5,",
        "            SampleCount = 6",
        "        }",
        "        //<<< _inputids",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Image = inputs[(int)InputId.Image].Eval(context).Image; // Needs to be checked for null!",
        "            var Angle = inputs[(int)InputId.Angle].Eval(context).Value;",
        "            var Position = inputs[(int)InputId.Position].Eval(context).Value;",
        "            var Size = inputs[(int)InputId.Size].Eval(context).Value;",
        "            var Strength = inputs[(int)InputId.Strength].Eval(context).Value;",
        "            var SampleCount = inputs[(int)InputId.SampleCount].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 1));",
        "",
        "                //>>> _setup",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"Angle\").AsScalar().Set(Angle);",
        "                    _effect.GetVariableByName(\"Position\").AsScalar().Set(Position);",
        "                    _effect.GetVariableByName(\"Size\").AsScalar().Set(Size);",
        "                    _effect.GetVariableByName(\"Strength\").AsScalar().Set(Strength);",
        "                    _effect.GetVariableByName(\"SampleCount\").AsScalar().Set(SampleCount);",
        "                //<<< _setup",
        "",
        "                Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "67441608-f7bb-41ed-9ad6-c68bbdd223ed",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "25f75ed5-117b-49cf-b747-17857321c295"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "88b8843c-ec62-4870-a380-264f5e6c1e77",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "67441608-f7bb-41ed-9ad6-c68bbdd223ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "593a1b3b-f345-4e8c-a2ef-1d8d9cd27ab0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "67441608-f7bb-41ed-9ad6-c68bbdd223ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "137ba877-8858-4a75-9edb-3b3756a77e4d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "67441608-f7bb-41ed-9ad6-c68bbdd223ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "13ae64df-098b-4f45-9aff-9a895d1f73a9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "67441608-f7bb-41ed-9ad6-c68bbdd223ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d853cd85-f2e5-49eb-986d-3c1360b1a3d1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "67441608-f7bb-41ed-9ad6-c68bbdd223ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6ce22d40-fc79-44b1-aeb7-1640dd2cccdd",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "67441608-f7bb-41ed-9ad6-c68bbdd223ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "dbd85049-952a-4749-aed8-540aba9109e1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "67441608-f7bb-41ed-9ad6-c68bbdd223ed"
    }
  ]
}