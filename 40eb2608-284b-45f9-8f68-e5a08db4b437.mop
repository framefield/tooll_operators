{
  "Name": "ReplicateOnSurface",
  "_id": "40eb2608-284b-45f9-8f68-e5a08db4b437",
  "Namespace": "user.cynic",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "07f6ef07-6f8e-4a4a-9853-e2c56dbe30eb",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 objectToWorldMatrix;\r",
          "float4x4 worldToCameraMatrix;\r",
          "float4x4 cameraToObjectMatrix; // modelview inverse\r",
          "float4x4 projMatrix;\r",
          "float4x4 textureMatrix;\r",
          "\r",
          "\r",
          "struct PointLight\r",
          "{\r",
          "    float4 position;\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float4 attenuation;\r",
          "};\r",
          "\r",
          "struct SpotLight\r",
          "{\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float constantAttenuation;\r",
          "    float linearAttenuation;\r",
          "    float quadraticAttenuation;\r",
          "    float spotCutoff;\r",
          "    float spotCosCutoff;\r",
          "    float spotExponent;\r",
          "};\r",
          "\r",
          "cbuffer FogSettings\r",
          "{\r",
          "    float4 fogColor;\r",
          "    float fogStart;\r",
          "    float fogEnd;\r",
          "    float fogScale;\r",
          "}\r",
          "\r",
          "cbuffer MaterialBuffer\r",
          "{\r",
          "    float4 materialAmbient;\r",
          "    float4 materialDiffuse;\r",
          "    float4 materialSpecular;\r",
          "    float4 materialEmission;\r",
          "    float materialShininess;\r",
          "};\r",
          "\r",
          "\r",
          "cbuffer PointLightsBuffer\r",
          "{\r",
          "    int numPointLights;\r",
          "    PointLight pointLights[3];\r",
          "};\r",
          "\r",
          "\r",
          "Texture2D txDiffuse;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "    float4 instanceToObjectRow0 : INSTANCE_TO_OBJ_ROW0;\r",
          "    float4 instanceToObjectRow1 : INSTANCE_TO_OBJ_ROW1;\r",
          "    float4 instanceToObjectRow2 : INSTANCE_TO_OBJ_ROW2;\r",
          "    float4 instanceToObjectRow3 : INSTANCE_TO_OBJ_ROW3;\r",
          "};\r",
          "\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float4 posInWorld  : WORLD_POS;\r",
          "    float3 normal : NORMAL;   \r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float4 vertexColor : COLOR;\r",
          "    float3 fragPosToCamPos : POS;\r",
          "    float fogFragCoord : FALLO;\r",
          "};\r",
          "\r",
          "\r",
          "float mod(float a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "float3 mod(float3 a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "PS_IN VS( VS_IN input )\r",
          "{\r",
          "    PS_IN output = (PS_IN)0;\r",
          "\r",
          "//    float4x4 objToWorldMatrix = objectToWorldMatrix;\r",
          "//    objToWorldMatrix[3] = input.objToWorldRow3;\r",
          "    float4x4 instanceToObjectMatrix = float4x4(input.instanceToObjectRow0,\r",
          "                                               input.instanceToObjectRow1,\r",
          "                                               input.instanceToObjectRow2,\r",
          "                                               input.instanceToObjectRow3);\r",
          "//    instanceToWorldMatrix[0] = float4(1,0,0,0);                                              \r",
          "//    instanceToWorldMatrix[1] = float4(0,1,0,0);                                              \r",
          "//    instanceToWorldMatrix[2] = float4(0,0,1,0);\r",
          "//    instanceToWorldMatrix[3] = float4(0,0,0,1);\r",
          "    \r",
          "    output.posInWorld = mul(mul(input.pos, instanceToObjectMatrix), objectToWorldMatrix);\r",
          "    output.pos = mul(output.posInWorld, worldToCameraMatrix);\r",
          "    output.normal = mul(input.normal, (float3x3)instanceToObjectMatrix);\r",
          "    output.fogFragCoord = abs(output.pos.z / input.pos.w);\r",
          "    output.pos = mul(output.pos, projMatrix);\r",
          "    output.texCoord = mul(float4(input.texCoord, 0, 1), textureMatrix).xy;\r",
          "    output.fragPosToCamPos = normalize((mul(cameraToObjectMatrix[3], objectToWorldMatrix) - output.posInWorld).xyz);\r",
          "    output.vertexColor = input.col;\r",
          "      \r",
          "    return output;\r",
          "}\r",
          "\r",
          "float4 calcLightSource(float3 fragPosInWorld, int lightIdx, float3 cameraVector, float3 norm, float4 baseColor)\r",
          "{\r",
          "    float3 lightVector = pointLights[lightIdx].position.xyz - fragPosInWorld;\r",
          "    float dist = length(lightVector);\r",
          "    lightVector = normalize(lightVector);\r",
          "    float nxDir = max(0.0, dot(norm, lightVector));\r",
          "    float4 diffuse = pointLights[lightIdx].diffuse * nxDir;\r",
          "    float specularPower = 0.0;\r",
          "    if (nxDir > 0.0)\r",
          "    {\r",
          "        float3 r = reflect(-lightVector, norm);\r",
          "        float rl = max(0.0, dot(r, cameraVector));\r",
          "        specularPower = pow(rl, materialShininess);\r",
          "    }\r",
          "\r",
          "    float attenuation = 1.0 / (pointLights[lightIdx].attenuation.x +\r",
          "                               pointLights[lightIdx].attenuation.y * dist +\r",
          "                               pointLights[lightIdx].attenuation.z * dist * dist);\r",
          "    float4 color = materialAmbient * pointLights[lightIdx].ambient * attenuation +\r",
          "                   materialDiffuse * (diffuse * baseColor * attenuation) +\r",
          "                   materialSpecular * pointLights[lightIdx].specular * specularPower * attenuation * baseColor;\r",
          "\r",
          "    return color;\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float2 newTexCoords = input.texCoord;\r",
          "    float3 norm = normalize(input.normal);\r",
          "    float4 baseColor = txDiffuse.Sample(samLinear, newTexCoords);\r",
          "\r",
          "    float4 color = float4(0, 0, 0, 1);\r",
          "    for (int lightIdx = 0; lightIdx < numPointLights; ++lightIdx)\r",
          "    {\r",
          "        color += calcLightSource(input.posInWorld.xyz, lightIdx, input.fragPosToCamPos, norm, baseColor);\r",
          "    }\r",
          "    color += materialEmission*baseColor;\r",
          "//color = float4(1,0,0,0.5f);\r",
          "    float fog = (fogEnd - input.fogFragCoord) * fogScale;\r",
          "    fog = clamp(fog, 0.0, 1.0);\r",
          "    return float4(lerp(fogColor.rgb, color.rgb, fog), materialDiffuse.a * baseColor.a);\r",
          "}\r",
          "\r",
          "technique10 Render\r",
          "{\r",
          "    pass P0\r",
          "    {\r",
          "        SetGeometryShader( 0 );\r",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );\r",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );\r",
          "    }\r",
          "} "
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "InstanceMesh",
      "MetaInstanceID": "570c2949-028d-4090-b531-15ca346c6243",
      "DefaultValue": {
        "Type": "Mesh",
        "Value": "Framefield.Core.MeshValue"
      },
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SurfacePoints",
      "MetaInstanceID": "de0c14e4-1427-48cd-aa3f-e0b7cd96fa7b",
      "DefaultValue": {
        "Type": "Dynamic",
        "Value": "Framefield.Core.Dynamic"
      },
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "SceneTransformOut",
      "MetaInstanceID": "f0f7e851-d9bc-43d0-9a4e-6eabe519a2ac",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "9ec68b7c-29df-48b1-9669-7158b7647e39",
      "MetaID": "b40ba3fe-cd29-4b6a-bfc2-f0cb7708c534",
      "Name": "ReplicateOnSurfaceFunc",
      "Version": "86a8d4e2-8fd7-48cf-bf79-96e62e430d8f",
      "Type": "Scene",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using SharpDX;",
        "using SharpDX.Direct3D;",
        "using SharpDX.Direct3D11;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.IDb40ba3fe_cd29_4b6a_bfc2_f0cb7708c534",
        "{",
        "",
        "    public class Class_ReplicateOnSurface : FXSourceCodeFunction",
        "    {",
        "        #region Renderer",
        "        public class Renderer : BaseRenderer",
        "        {",
        "            public override void SetupEffect(OperatorPartContext context)",
        "            {",
        "                base.SetupEffect(context);",
        "                try",
        "                {",
        "                    SetupMaterialConstBuffer(context);",
        "                    SetupFogSettingsConstBuffer(context);",
        "                    SetupPointLightsConstBuffer(context);",
        "                }",
        "                catch (Exception e)",
        "                {",
        "                    Logger.Error(ParentFunc, \"Error building constant buffer: {0} - Source: {1}\", e.Message, e.Source);",
        "                }",
        "            }",
        "            public OperatorPart.Function ParentFunc {get;set;}            ",
        "        }",
        "        #endregion",
        "",
        "        public Class_ReplicateOnSurface()",
        "        {",
        "            _renderer = new Renderer(){ParentFunc = this};",
        "        }",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _renderer);",
        "            base.Dispose();",
        "        }",
        "",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            InstanceMesh = 1,",
        "            SurfacePoints = 2",
        "        }",
        "        //<<< _inputids",
        "",
        "",
        "        private bool _firstEval = true;",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var InstanceMesh = inputs[(int)InputId.InstanceMesh].Eval(context).Mesh;",
        "            var SurfacePoints = inputs[(int)InputId.SurfacePoints].Eval(context).Dynamic;  // Needs to be checked for null!",
        "            //<<< _params        ",
        "",
        "            if (InstanceMesh == null  || SurfacePoints == null)",
        "            {",
        "                return context;",
        "            }",
        "            ",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i) ",
        "                {",
        "                    Compile(i);",
        "                }",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            // instance data buffer",
        "            const int instanceDataSize = 4*16; // float4x4",
        "           ",
        "            var prevEffect = context.Effect;",
        "            var prevRenderer = context.Renderer;",
        "            context.Effect = _effect;",
        "            context.Renderer = _renderer;",
        "",
        "            try",
        "            {",
        "                _renderer.SetupEffect(context);",
        "",
        "                if (context.DepthStencilView != null)",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.DepthStencilView, context.RenderTargetView);",
        "                else",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.RenderTargetView);",
        "",
        "                if (context.BlendState != null)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.BlendState = context.BlendState;",
        "                }",
        "",
        "                if (context.DepthStencilState != null)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = context.DepthStencilState;",
        "                }",
        "",
        "                if (context.RasterizerState != null)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.Rasterizer.State = context.RasterizerState;",
        "                }",
        "",
        "                var technique = _effect.GetTechniqueByIndex(0);",
        "                var pass = technique.GetPassByIndex(0);",
        "",
        "                context.D3DDevice.ImmediateContext.Rasterizer.SetViewports(new [] { context.Viewport });",
        "                context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = new InputLayout(context.D3DDevice, pass.Description.Signature, _instanceDataInputElements);",
        "                context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "                Buffer pointBuffer = SurfacePoints.PosBuffer;",
        "                context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new [] { InstanceMesh.Vertices, pointBuffer }, new [] {76, instanceDataSize}, new [] {0,0} );",
        "",
        "                pass.Apply(context.D3DDevice.ImmediateContext);",
        "                int numInstances = pointBuffer.Description.SizeInBytes / instanceDataSize;",
        "                //Logger.Info(this, \"render num instances: {0}/{1}\", SurfaceMesh.Vertices.Description.SizeInBytes,numInstances);",
        "                context.D3DDevice.ImmediateContext.DrawInstanced(InstanceMesh.NumTriangles*3, numInstances, 0, 0);",
        "                context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(null,0,0));",
        "                context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(1, new VertexBufferBinding(null,0,0));",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this,\"An error occured during evaluation: {0}\", exception.Message);",
        "            }",
        "",
        "            context.Effect = prevEffect;",
        "            context.Renderer = prevRenderer;",
        "",
        "            return context;",
        "        }",
        "",
        "        private const int SEED = 0;",
        "        private float _frequency = 1;",
        "        private float _noiseTime;",
        "        private Renderer _renderer;",
        "        private Buffer _instanceDataBuffer;",
        "        private InputElement[] _instanceDataInputElements = new []",
        "                                                                {",
        "                                                                    new InputElement(\"POSITION\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0, 0),",
        "                                                                    new InputElement(\"NORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 16, 0),",
        "                                                                    new InputElement(\"COLOR\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 28, 0),",
        "                                                                    new InputElement(\"TEXCOORD\", 0, SharpDX.DXGI.Format.R32G32_Float, 44, 0),",
        "                                                                    new InputElement(\"TANGENT\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 52, 0),",
        "                                                                    new InputElement(\"BINORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 64, 0),",
        "                                                                    new InputElement(\"INSTANCE_TO_OBJ_ROW\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                    new InputElement(\"INSTANCE_TO_OBJ_ROW\", 1, SharpDX.DXGI.Format.R32G32B32A32_Float, 16,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                    new InputElement(\"INSTANCE_TO_OBJ_ROW\", 2, SharpDX.DXGI.Format.R32G32B32A32_Float, 32,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                    new InputElement(\"INSTANCE_TO_OBJ_ROW\", 3, SharpDX.DXGI.Format.R32G32B32A32_Float, 48,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                };",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "07f6ef07-6f8e-4a4a-9853-e2c56dbe30eb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9ec68b7c-29df-48b1-9669-7158b7647e39"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "570c2949-028d-4090-b531-15ca346c6243",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9ec68b7c-29df-48b1-9669-7158b7647e39"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "de0c14e4-1427-48cd-aa3f-e0b7cd96fa7b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9ec68b7c-29df-48b1-9669-7158b7647e39"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9ec68b7c-29df-48b1-9669-7158b7647e39",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f0f7e851-d9bc-43d0-9a4e-6eabe519a2ac"
    }
  ]
}