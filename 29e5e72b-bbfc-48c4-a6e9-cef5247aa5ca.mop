{
  "Name": "SimpleParticles",
  "_id": "29e5e72b-bbfc-48c4-a6e9-cef5247aa5ca",
  "Namespace": "lib.geometry.generate",
  "Description": "A quick and dirty hard coded particle effect for the scrape game.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "0865338c-93dd-4a65-8432-e19ca396e3f2",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "float4x4 cameraToObjectMatrix; // modelview inverse\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D Image;",
          "float Count;",
          "float LifeTime;",
          "float EmitRate;",
          "float3 EmitPosition;",
          "float3 EmitDirection;",
          "float ScatterSpeed;",
          "float ScatterAngle;",
          "float3 Wind;",
          "float Friction;",
          "float4 Color;",
          "float4 ColorRandom;",
          "float2 TextureCells;",
          "float2 SizeRange;",
          "//<<< _parameters\r",
          "\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "BlendState SrcAlphaBlendingAdd\r",
          "{\r",
          "    BlendEnable[0] = TRUE;\r",
          "    SrcBlend = SRC_ALPHA;\r",
          "    DestBlend = DEST_ALPHA;\r",
          "    BlendOp = ADD;\r",
          "    SrcBlendAlpha = SRC_ALPHA;\r",
          "    DestBlendAlpha = DEST_ALPHA;\r",
          "    BlendOpAlpha = ADD;\r",
          "    RenderTargetWriteMask[0] = 0x0F;\r",
          "};\r",
          "\r",
          "DepthStencilState DisabledDepth\r",
          "{\r",
          "    DepthEnable = FALSE;\r",
          "};\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 vertexAdd : OFFSET;\r",
          "//    int row : ROW;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float2 texCoord: TEXCOORD0;\r",
          "};\r",
          "\r",
          "\r",
          "float mod(float a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "float3 mod(float3 a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "//>>> VS\r",
          "PS_IN VS( VS_IN input )\r",
          "{\r",
          "    PS_IN output = (PS_IN)0;\r",
          "\r",
          "    float3 pos = input.pos;\r",
          "    \r",
          "    // Concentrate\r",
          "    //pos -= fmod(pos,DensityWaveLength) * DensityWaveStrength;    \r",
          "    \r",
          "    // Distort\r",
          "    //pos += sin( float3(pos.z , pos.x, 0)  * WaveLength)* WaveStrength;\r",
          "    //pos += sin( float3(pos.x,  0, pos.y )   * WaveLength)* WaveStrength;\r",
          "    //pos += sin( pos * WiggleNoise + WiggleOffset ) * WiggleStrength;    \r",
          "    //pos += Offset;\r",
          "    \r",
          "    pos -= cameraToObjectMatrix[3];\r",
          "    //pos = mod(pos, GridSize) - GridSize/2.0;\r",
          "    float3 posWorldspace = pos + cameraToObjectMatrix[3];\r",
          "\r",
          "    // rotate to camera and create quad\r",
          "    float3x3 modelViewRotMatrix = worldToCameraMatrix;\r",
          "    pos = mul(pos, modelViewRotMatrix);\r",
          "    pos = pos + float3(input.vertexAdd.x, input.vertexAdd.y, 0);\r",
          "    output.pos = mul(float4(pos.x, pos.y, pos.z, 1.0), projMatrix);\r",
          "\r",
          "    // calc distance to focus range\r",
          "    //float dist = (abs(Focus.x - output.pos.z) / Focus.y);\r",
          "    float columnWidth = 1.0 / float(TextureCells.y);\r",
          "    //dist = clamp(dist, 0.0, 1.0  - columnWidth);\r",
          "    //dist = dist * float(TextureCells.y);\r",
          "    //dist -= mod(dist, 1.0);\r",
          "\r",
          "    // calc u\r",
          "    float columnWidthHalf = columnWidth / 2.0;\r",
          "    float column = 0.5/TextureCells.x; //dist * columnWidth + columnWidthHalf;\r",
          "    float u = column + columnWidthHalf * input.vertexAdd.x / abs(input.vertexAdd.x);\r",
          "\r",
          "    // calc v\r",
          "    float rowHeight = 1.0 / float(TextureCells.x);\r",
          "    float rowHeightHalf = 0.5/TextureCells.x; // rowHeight / 2.0;\r",
          "    float r = float(input.vertexAdd.z);\r",
          "    float rowPos = r * rowHeight + rowHeightHalf;\r",
          "    float v = rowPos + rowHeightHalf * input.vertexAdd.y / abs(input.vertexAdd.y);\r",
          "\r",
          "    output.texCoord = float2(u, v);\r",
          "\r",
          "    return output;\r",
          "}\r",
          "//<<< VS\r",
          "\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    return txDiffuse.Sample(samLinear, input.texCoord);\r",
          "}\r",
          "\r",
          "technique10 Render\r",
          "{\r",
          "    pass P0\r",
          "    {\r",
          "        SetGeometryShader( 0 );\r",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );\r",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );\r",
          "    }\r",
          "} "
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "2a8afc7e-2092-4913-bf83-e76eeef32cb6",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Count",
      "MetaInstanceID": "1b32ae7d-0560-4eba-90e2-0632eabdd727",
      "DefaultValue": {
        "Type": "Float",
        "Value": "500"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "1E+08",
      "Scale": "1",
      "ScaleType": "Quadratic",
      "EnumValues": []
    },
    {
      "Name": "LifeTime",
      "MetaInstanceID": "e7a327e7-4217-4575-a043-098bb6596080",
      "DefaultValue": {
        "Type": "Float",
        "Value": "5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitRate",
      "MetaInstanceID": "6249cf9f-44ed-44af-9704-a067dd2714a3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "2"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitPosition.X",
      "MetaInstanceID": "51404665-edb1-474d-afe5-9a391a261b33",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitPosition.Y",
      "MetaInstanceID": "5d0394aa-e026-40da-8ba0-05235cace5a6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitPosition.Z",
      "MetaInstanceID": "0f26c5b8-459e-41e6-87a9-90ac44be1cf7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitDirection.X",
      "MetaInstanceID": "2e31e303-6bd4-4cc6-81b4-0cb963332277",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitDirection.Y",
      "MetaInstanceID": "972420c4-a1f1-4509-b23b-6b85e11a1a7a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitDirection.Z",
      "MetaInstanceID": "bcf1e2c0-d806-4071-8096-d49613c344c4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ScatterSpeed",
      "MetaInstanceID": "369a55ab-cfad-44e4-8c25-5acb2b5774aa",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ScatterAngle",
      "MetaInstanceID": "85dc58ee-88d2-479b-bd6b-f7376cbb7570",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Wind.X",
      "MetaInstanceID": "5b7f9f08-2651-4177-a891-7c82c4a8df9e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Wind.Y",
      "MetaInstanceID": "1bda57ce-3281-4a35-82fd-2381ada75071",
      "DefaultValue": {
        "Type": "Float",
        "Value": "-0.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Wind.Z",
      "MetaInstanceID": "fe91ee05-2200-4d4b-a78e-6d0fd70feba2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Friction",
      "MetaInstanceID": "ae763921-1018-4c90-a256-6d465e037933",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.04"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.R",
      "MetaInstanceID": "782e0474-07b7-4d72-b857-7180015c2c45",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.G",
      "MetaInstanceID": "3936d7b0-3c05-4dfa-a365-5de776a2f3c8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.B",
      "MetaInstanceID": "2a0ab698-2439-492c-86cb-635dbc3c31f2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.A",
      "MetaInstanceID": "97081d45-daf5-498c-a545-980353fd2832",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorRandom.R",
      "MetaInstanceID": "8e76e946-cf84-4cdb-ae2b-f610de1b84b9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorRandom.G",
      "MetaInstanceID": "327da026-9d0f-4c3e-8ad4-920b9fed99ce",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorRandom.B",
      "MetaInstanceID": "4737435e-76ae-49f1-bc8f-14204e6f78ae",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorRandom.A",
      "MetaInstanceID": "55471a44-a380-44c0-9264-9c63f6ddd93f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TextureCells.X",
      "MetaInstanceID": "518d9ecd-e556-47f1-965d-6a59f6b1b7d9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "8"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TextureCells.Y",
      "MetaInstanceID": "589137b1-fff3-4d5a-86db-0c5d7a2550e9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "16"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SizeRange.Min",
      "MetaInstanceID": "ed5997b4-6bd1-4878-8ae5-e4f7be817fd0",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1.25"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SizeRange.Max",
      "MetaInstanceID": "8bdf4c1b-bccf-4a52-a728-84546a4ae204",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "cb0c4c82-cd06-4737-8281-5990a5069a2c",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "852ff2c1-b0f8-4541-9b22-d85625ab837d",
      "MetaID": "5c80aff3-1193-447a-9bbf-5109611728c5",
      "Name": "SimpleParticlesFunc",
      "Version": "c0639553-4b4d-4f86-8616-5238142baefb",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using SharpDX;",
        "using SharpDX.Direct3D;",
        "using SharpDX.Direct3D11;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.ID5c80aff3_1193_447a_9bbf_5109611728c5",
        "{",
        "",
        "    class Particle ",
        "    {",
        "        public Vector3 Position{get;set;}",
        "        public Vector3 Velocity{get;set;}",
        "        public float Size{get;set;}",
        "        public double BirthTime{get;set;}",
        "        public int TextureRow{get;set;}",
        "    }",
        "",
        "    public class Class_SimpleParticles : FXSourceCodeFunction, IFXSceneSourceCode",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Count = 2,",
        "            LifeTime = 3,",
        "            EmitRate = 4,",
        "            EmitPositionX = 5,",
        "            EmitPositionY = 6,",
        "            EmitPositionZ = 7,",
        "            EmitDirectionX = 8,",
        "            EmitDirectionY = 9,",
        "            EmitDirectionZ = 10,",
        "            ScatterSpeed = 11,",
        "            ScatterAngle = 12,",
        "            WindX = 13,",
        "            WindY = 14,",
        "            WindZ = 15,",
        "            Friction = 16,",
        "            ColorR = 17,",
        "            ColorG = 18,",
        "            ColorB = 19,",
        "            ColorA = 20,",
        "            ColorRandomR = 21,",
        "            ColorRandomG = 22,",
        "            ColorRandomB = 23,",
        "            ColorRandomA = 24,",
        "            TextureCellsX = 25,",
        "            TextureCellsY = 26,",
        "            SizeRangeMin = 27,",
        "            SizeRangeMax = 28",
        "        }",
        "        //<<< _inputids",
        "",
        "",
        "        public Class_SimpleParticles() {",
        "        }",
        "",
        "        public override void Dispose() {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            Utilities.DisposeObj(ref _inputLayout);",
        "            base.Dispose();",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            if (_firstEval) {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            _image = inputs[1].Eval(context).Image;",
        "                ",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Image = inputs[(int)InputId.Image].Eval(context).Image; // Needs to be checked for null!",
        "            var Count = inputs[(int)InputId.Count].Eval(context).Value;",
        "            var LifeTime = inputs[(int)InputId.LifeTime].Eval(context).Value;",
        "            var EmitRate = inputs[(int)InputId.EmitRate].Eval(context).Value;",
        "            var EmitPositionX = inputs[(int)InputId.EmitPositionX].Eval(context).Value;",
        "            var EmitPositionY = inputs[(int)InputId.EmitPositionY].Eval(context).Value;",
        "            var EmitPositionZ = inputs[(int)InputId.EmitPositionZ].Eval(context).Value;",
        "            var EmitPosition = new Vector3(EmitPositionX, EmitPositionY, EmitPositionZ);",
        "            var EmitDirectionX = inputs[(int)InputId.EmitDirectionX].Eval(context).Value;",
        "            var EmitDirectionY = inputs[(int)InputId.EmitDirectionY].Eval(context).Value;",
        "            var EmitDirectionZ = inputs[(int)InputId.EmitDirectionZ].Eval(context).Value;",
        "            var EmitDirection = new Vector3(EmitDirectionX, EmitDirectionY, EmitDirectionZ);",
        "            var ScatterSpeed = inputs[(int)InputId.ScatterSpeed].Eval(context).Value;",
        "            var ScatterAngle = inputs[(int)InputId.ScatterAngle].Eval(context).Value;",
        "            var WindX = inputs[(int)InputId.WindX].Eval(context).Value;",
        "            var WindY = inputs[(int)InputId.WindY].Eval(context).Value;",
        "            var WindZ = inputs[(int)InputId.WindZ].Eval(context).Value;",
        "            var Wind = new Vector3(WindX, WindY, WindZ);",
        "            var Friction = inputs[(int)InputId.Friction].Eval(context).Value;",
        "            var ColorR = inputs[(int)InputId.ColorR].Eval(context).Value;",
        "            var ColorG = inputs[(int)InputId.ColorG].Eval(context).Value;",
        "            var ColorB = inputs[(int)InputId.ColorB].Eval(context).Value;",
        "            var ColorA = inputs[(int)InputId.ColorA].Eval(context).Value;",
        "            var Color = new Color4(ColorR, ColorG, ColorB, ColorA);",
        "            var ColorRandomR = inputs[(int)InputId.ColorRandomR].Eval(context).Value;",
        "            var ColorRandomG = inputs[(int)InputId.ColorRandomG].Eval(context).Value;",
        "            var ColorRandomB = inputs[(int)InputId.ColorRandomB].Eval(context).Value;",
        "            var ColorRandomA = inputs[(int)InputId.ColorRandomA].Eval(context).Value;",
        "            var ColorRandom = new Color4(ColorRandomR, ColorRandomG, ColorRandomB, ColorRandomA);",
        "            var TextureCellsX = inputs[(int)InputId.TextureCellsX].Eval(context).Value;",
        "            var TextureCellsY = inputs[(int)InputId.TextureCellsY].Eval(context).Value;",
        "            var TextureCells = new Vector2(TextureCellsX, TextureCellsY);",
        "            var SizeRangeMin = inputs[(int)InputId.SizeRangeMin].Eval(context).Value;",
        "            var SizeRangeMax = inputs[(int)InputId.SizeRangeMax].Eval(context).Value;",
        "            var SizeRange = new Vector2(SizeRangeMin, SizeRangeMax);",
        "            //<<< _params",
        "            ",
        "            bool resetParticleList = (Count != _count);",
        "            ",
        "            _previousEmitPosition = ( _emitPosition != null) ? _emitPosition : EmitPosition;",
        "            _emitPosition = EmitPosition;",
        "",
        "            _wind = Wind;",
        "            _emitDirection = EmitDirection;",
        "            _emitRate = EmitRate;",
        "            _scatterAngle = ScatterAngle;",
        "            _scatterSpeed = ScatterSpeed;",
        "            _lifeTime = LifeTime;",
        "            _friction = Friction;",
        "            _textureCells = TextureCells;",
        "            _sizeRange = SizeRange;",
        "            ",
        "            _dt = context.Time - _time;",
        "            _time = context.Time;",
        "",
        "            if (resetParticleList) ",
        "            {",
        "                _count = (int)Count;",
        "                _count = Math.Max(1, _count);",
        "                _writeIndex=0;",
        "                ",
        "",
        "                _particles.Clear();",
        "                for( int i = 0; i < Count; ++i ) ",
        "                {",
        "                    _particles.Add( new Particle() { ",
        "                        Position = new Vector3((float) _random.NextDouble(), (float) _random.NextDouble(), (float) _random.NextDouble() ),",
        "                        Velocity = new Vector3((float) _random.NextDouble(), (float) _random.NextDouble(), (float) _random.NextDouble() )",
        "",
        "                    } );                    ",
        "                }",
        "            }",
        "",
        "            UpdateParticles();",
        "            WriteParticles();",
        "            ",
        "            Changed = false;",
        "",
        "            var D3DDevice = context.D3DDevice;",
        "",
        "            try {",
        "                context.D3DDevice.ImmediateContext.ClearState();",
        "",
        "                context.ObjectTWorld = Matrix.Identity;",
        "                var matrixVariable = _effect.GetVariableByName(\"objectToWorldMatrix\").AsMatrix();",
        "                matrixVariable.SetMatrix(context.ObjectTWorld);",
        "                matrixVariable = _effect.GetVariableByName(\"worldToCameraMatrix\").AsMatrix();",
        "                matrixVariable.SetMatrix(context.WorldToCamera);",
        "                matrixVariable = _effect.GetVariableByName(\"cameraToObjectMatrix\").AsMatrix();",
        "                var cameraToObject = Matrix.Invert(/*context.ObjectTWorld */ context.WorldToCamera);",
        "                matrixVariable.SetMatrix(cameraToObject);",
        "                matrixVariable = _effect.GetVariableByName(\"projMatrix\").AsMatrix();",
        "                matrixVariable.SetMatrix(context.CameraProjection);",
        "                ",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                {",
        "                    _effect.GetVariableByName(\"txDiffuse\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"Count\").AsScalar().Set(Count);",
        "                    //_effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"Count\").AsScalar().Set(Count);",
        "                    _effect.GetVariableByName(\"LifeTime\").AsScalar().Set(LifeTime);",
        "                    _effect.GetVariableByName(\"EmitRate\").AsScalar().Set(EmitRate);",
        "                    _effect.GetVariableByName(\"EmitPosition\").AsVector().Set(new Vector3(EmitPositionX, EmitPositionY, EmitPositionZ));",
        "                    _effect.GetVariableByName(\"EmitDirection\").AsVector().Set(new Vector3(EmitDirectionX, EmitDirectionY, EmitDirectionZ));",
        "                    _effect.GetVariableByName(\"ScatterSpeed\").AsScalar().Set(ScatterSpeed);",
        "                    _effect.GetVariableByName(\"ScatterAngle\").AsScalar().Set(ScatterAngle);",
        "                    _effect.GetVariableByName(\"Wind\").AsVector().Set(new Vector3(WindX, WindY, WindZ));",
        "                    _effect.GetVariableByName(\"Friction\").AsScalar().Set(Friction);",
        "                    _effect.GetVariableByName(\"Color\").AsVector().Set(new Vector4(ColorR, ColorG, ColorB, ColorA));",
        "                    _effect.GetVariableByName(\"ColorRandom\").AsVector().Set(new Vector4(ColorRandomR, ColorRandomG, ColorRandomB, ColorRandomA));",
        "                    _effect.GetVariableByName(\"TextureCells\").AsVector().Set(new Vector2(TextureCellsX, TextureCellsY));",
        "                    //_effect.GetVariableByName(\"CenterDistance\").AsScalar().Set(CenterDistance);",
        "                    //_effect.GetVariableByName(\"WaveThickness\").AsScalar().Set(WaveThickness);",
        "                    //_effect.GetVariableByName(\"WaveIntensity\").AsScalar().Set(WaveIntensity);",
        "                    /*",
        "                    //>>> _setup",
        "                    using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                    {",
        "                        _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                        _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                        _effect.GetVariableByName(\"Count\").AsScalar().Set(Count);",
        "                        _effect.GetVariableByName(\"LifeTime\").AsScalar().Set(LifeTime);",
        "                        _effect.GetVariableByName(\"EmitRate\").AsScalar().Set(EmitRate);",
        "                        _effect.GetVariableByName(\"EmitPosition\").AsVector().Set(new Vector3(EmitPositionX, EmitPositionY, EmitPositionZ));",
        "                        _effect.GetVariableByName(\"EmitDirection\").AsVector().Set(new Vector3(EmitDirectionX, EmitDirectionY, EmitDirectionZ));",
        "                        _effect.GetVariableByName(\"ScatterSpeed\").AsScalar().Set(ScatterSpeed);",
        "                        _effect.GetVariableByName(\"ScatterAngle\").AsScalar().Set(ScatterAngle);",
        "                        _effect.GetVariableByName(\"Wind\").AsVector().Set(new Vector3(WindX, WindY, WindZ));",
        "                        _effect.GetVariableByName(\"Friction\").AsScalar().Set(Friction);",
        "                        _effect.GetVariableByName(\"Color\").AsVector().Set(new Vector4(ColorR, ColorG, ColorB, ColorA));",
        "                        _effect.GetVariableByName(\"ColorRandom\").AsVector().Set(new Vector4(ColorRandomR, ColorRandomG, ColorRandomB, ColorRandomA));",
        "                        _effect.GetVariableByName(\"TextureCells\").AsVector().Set(new Vector2(TextureCellsX, TextureCellsY));",
        "                        _effect.GetVariableByName(\"SizeRange\").AsVector().Set(new Vector2(SizeRangeMin, SizeRangeMax));",
        "                    //<<< _setup",
        "                    */",
        "",
        "                    if (context.DepthStencilView != null)",
        "                        context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.DepthStencilView, context.RenderTargetView);",
        "                    else",
        "                        context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.RenderTargetView);",
        "    ",
        "                    if (context.BlendState != null) {",
        "                        context.D3DDevice.ImmediateContext.OutputMerger.BlendState = context.BlendState;",
        "                    }",
        "    ",
        "                    if (context.DepthStencilState != null) {",
        "                        context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = context.DepthStencilState;",
        "                    }",
        "    ",
        "                    if (context.RasterizerState != null) {",
        "                        context.D3DDevice.ImmediateContext.Rasterizer.State = context.RasterizerState;",
        "                    }",
        "",
        "                    context.D3DDevice.ImmediateContext.Rasterizer.SetViewports(new [] { context.Viewport });",
        "                    context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = _inputLayout;",
        "                    context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "                    context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(_mesh.Vertices, _mesh.AttributesSize, 0));",
        "    ",
        "                    var technique = _effect.GetTechniqueByIndex(0);",
        "                    for (int i2 = 0; i2 < technique.Description.PassCount; ++i2) {",
        "                        technique.GetPassByIndex(i2).Apply(context.D3DDevice.ImmediateContext);",
        "                        context.D3DDevice.ImmediateContext.Draw(_mesh.NumTriangles * 3, 0);",
        "                    }",
        "                }",
        "            }",
        "            catch (Exception exception) {",
        "                Logger.Error(this,\"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        //>>> Update",
        "        private void UpdateParticles() ",
        "        {",
        "            int particleEmitCountForFrame = (int)(_dt * _emitRate * 60);",
        "            // Emit new",
        "            for( var i =0; i< particleEmitCountForFrame; ++i) {",
        "                var interpolatedPos = _emitPosition + (_previousEmitPosition - _emitPosition) * (float)i/particleEmitCountForFrame;",
        "                _particles[(_writeIndex++) % _count] = EmitNewParticle( interpolatedPos ); ",
        "            }",
        "        ",
        "            // Update",
        "            foreach( var p in _particles ) ",
        "            {    ",
        "                p.Position +=  p.Velocity * (float)_dt;",
        "                p.Velocity = (1-_friction * (float)_dt ) * p.Velocity +  _wind * (float)_dt;",
        "            } ",
        "            //Logger.Info(this,\"Count {0}\", _particles.Count);",
        "        }",
        "        ",
        "        private Particle EmitNewParticle( Vector3 emitPos) ",
        "        {",
        "            var v= _emitDirection * ( 1-  (float)(_random.NextDouble() * _scatterSpeed));",
        "            ",
        "            // Rotate Vector here... ",
        "            float angle = (float)((_random.NextDouble() - 0.5 ) * _scatterAngle / 180 * Math.PI);",
        "            v= new Vector3( ",
        "            (float)(v.X * Math.Cos( angle) - v.Y * Math.Sin( angle )), ",
        "            (float)(v.X * Math.Sin( angle) + v.Y * Math.Cos( angle )), ",
        "            v.Z);",
        "            ",
        "            var p= new Particle() { ",
        "                Position=  emitPos,",
        "                Velocity = v,",
        "                TextureRow = (int)(_random.NextDouble() * _textureCells.Y),",
        "                Size = (float) (_random.NextDouble() * (_sizeRange.Y-_sizeRange.X) + _sizeRange.X),",
        "                BirthTime = _time",
        "            };",
        "            return p;    ",
        "        }",
        "        ",
        "        //<<< Update",
        "",
        "        private void WriteParticles() ",
        "        {",
        "            //Dispose();",
        "            var inputElements = new InputElement[] {",
        "                            new InputElement(\"POSITION\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0, 0),",
        "                            new InputElement(\"OFFSET\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 16, 0),",
        "//                            new InputElement(\"OFFSET\", 0, SharpDX.DXGI.Format.R32G32_Float, 16, 0),",
        "//                            new InputElement(\"ROW\", 0, SharpDX.DXGI.Format.R32_UInt, 24, 0)",
        "                        };",
        "",
        "            var attributesSize = 28;",
        "            int streamSize = 2 * 3 * attributesSize * _count;",
        "            using (var vertexStream = new DataStream(streamSize, true, true))",
        "            {",
        "",
        "                Random _random = new Random(_seed);",
        "                ",
        "                float gridSizeHalf = _gridSize/2.0f;",
        "    ",
        "                //for (int particleIdx = 0; particleIdx < _count; ++particleIdx) {",
        "                foreach( var p in _particles)",
        "                {",
        "                /*",
        "                    float noise1 = (float) _random.NextDouble();",
        "                    float noise2 = (float) _random.NextDouble();",
        "                    float noise3 = (float) _random.NextDouble();",
        "    ",
        "                    var pos = new Vector4(-gridSizeHalf + _gridSize * noise1,",
        "                                          -gridSizeHalf + _gridSize * noise2,",
        "                                          -gridSizeHalf + _gridSize * noise3,",
        "                                          1.0f);",
        "                    var size = _particleSizeRange.X + (_particleSizeRange.Y - _particleSizeRange.X) * ((float) _random.NextDouble());",
        "                    var halfSize = size/2.0f;",
        "                    */",
        "                    ",
        "                    var pos = new Vector4(p.Position, 1.0f);",
        "                    float age = Math.Min( 1, (float)((_time - p.BirthTime) / _lifeTime));",
        "                    ",
        "                    float halfSize = 0.5f * p.Size * (1-age);",
        "                    if( halfSize < 0) ",
        "                        continue;",
        "    ",
        "                    ",
        "                    float row = p.TextureRow; // (int) (((float) _random.NextDouble()) * (_textureCells.X - 1.0f));                ",
        "                    //Logger.Info(this,\"row: {0}\", row);",
        "    ",
        "                    // tri 1 vert 1",
        "                    vertexStream.Write(pos);",
        "                    vertexStream.Write(new Vector3(halfSize, halfSize, row));",
        "    //                vertexStream.Write(row);",
        "    ",
        "                    // tri 1 vert 2",
        "                    vertexStream.Write(pos);",
        "                    vertexStream.Write(new Vector3(halfSize, -halfSize, row));",
        "    //                vertexStream.Write(row);",
        "    ",
        "                    // tri 1 vert 3",
        "                    vertexStream.Write(pos);",
        "                    vertexStream.Write(new Vector3(-halfSize, -halfSize, row));",
        "    //                vertexStream.Write(row);",
        "    ",
        "                    // tri 2 vert 1",
        "                    vertexStream.Write(pos);",
        "                    vertexStream.Write(new Vector3(-halfSize, -halfSize, row));",
        "    //                vertexStream.Write(row);",
        "    ",
        "                    // tri 2 vert 2",
        "                    vertexStream.Write(pos);",
        "                    vertexStream.Write(new Vector3(-halfSize, halfSize, row));",
        "    //                vertexStream.Write(row);",
        "    ",
        "                    // tri 2 vert 3",
        "                    vertexStream.Write(pos);",
        "                    vertexStream.Write(new Vector3(halfSize, halfSize, row));",
        "    //                vertexStream.Write(row);",
        "    ",
        "                }",
        "    ",
        "                vertexStream.Position = 0;",
        "    ",
        "                var vertices = new Buffer(D3DDevice.Device, vertexStream, new BufferDescription() {",
        "                    BindFlags = BindFlags.VertexBuffer,",
        "                    CpuAccessFlags = CpuAccessFlags.None,",
        "                    OptionFlags = ResourceOptionFlags.None,",
        "                    SizeInBytes = streamSize,",
        "                    Usage = ResourceUsage.Default",
        "                });",
        "    ",
        "                Utilities.DisposeObj(ref _mesh);",
        "                Utilities.DisposeObj(ref _inputLayout);",
        "                _mesh = new Mesh() { InputElements = inputElements, Vertices = vertices, NumTriangles = _count*2, AttributesSize = attributesSize };",
        "                if (_effect != null && Core.D3DDevice.Device != null) {",
        "                    var technique = _effect.GetTechniqueByIndex(0);",
        "                    var pass = technique.GetPassByIndex(0);",
        "                    _inputLayout = new InputLayout(Core.D3DDevice.Device, pass.Description.Signature, inputElements);",
        "                }",
        "            }",
        "        }",
        "",
        "        List<Particle> _particles = new List<Particle>();",
        "",
        "        InputLayout _inputLayout = null;",
        "        Texture2D _image = null;",
        "        Mesh _mesh = null;",
        "        int _count;",
        "        int _writeIndex=0;",
        "        int _seed;",
        "        float _gridSize;",
        "        Vector2 _textureCells;",
        "        Vector2 _sizeRange;",
        "        ",
        "        Vector3 _wind;",
        "        Vector3 _emitDirection;",
        "        ",
        "        Vector3 _previousEmitPosition;",
        "        Vector3 _emitPosition;",
        "        float _emitRate;",
        "        float _scatterAngle;",
        "        float  _scatterSpeed;",
        "        float  _lifeTime;",
        "        float _friction;",
        "        double _dt;",
        "        double _time;",
        "",
        "        Random _random = new Random(232);",
        "",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "cb0c4c82-cd06-4737-8281-5990a5069a2c"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0865338c-93dd-4a65-8432-e19ca396e3f2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2a8afc7e-2092-4913-bf83-e76eeef32cb6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1b32ae7d-0560-4eba-90e2-0632eabdd727",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e7a327e7-4217-4575-a043-098bb6596080",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6249cf9f-44ed-44af-9704-a067dd2714a3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "51404665-edb1-474d-afe5-9a391a261b33",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5d0394aa-e026-40da-8ba0-05235cace5a6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0f26c5b8-459e-41e6-87a9-90ac44be1cf7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2e31e303-6bd4-4cc6-81b4-0cb963332277",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "972420c4-a1f1-4509-b23b-6b85e11a1a7a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bcf1e2c0-d806-4071-8096-d49613c344c4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "369a55ab-cfad-44e4-8c25-5acb2b5774aa",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "85dc58ee-88d2-479b-bd6b-f7376cbb7570",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5b7f9f08-2651-4177-a891-7c82c4a8df9e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1bda57ce-3281-4a35-82fd-2381ada75071",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "fe91ee05-2200-4d4b-a78e-6d0fd70feba2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ae763921-1018-4c90-a256-6d465e037933",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "782e0474-07b7-4d72-b857-7180015c2c45",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3936d7b0-3c05-4dfa-a365-5de776a2f3c8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2a0ab698-2439-492c-86cb-635dbc3c31f2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "97081d45-daf5-498c-a545-980353fd2832",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8e76e946-cf84-4cdb-ae2b-f610de1b84b9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "327da026-9d0f-4c3e-8ad4-920b9fed99ce",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4737435e-76ae-49f1-bc8f-14204e6f78ae",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "55471a44-a380-44c0-9264-9c63f6ddd93f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "518d9ecd-e556-47f1-965d-6a59f6b1b7d9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "589137b1-fff3-4d5a-86db-0c5d7a2550e9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ed5997b4-6bd1-4878-8ae5-e4f7be817fd0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8bdf4c1b-bccf-4a52-a728-84546a4ae204",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "852ff2c1-b0f8-4541-9b22-d85625ab837d"
    }
  ]
}