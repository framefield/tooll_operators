{
  "Name": "GradientChains",
  "_id": "f0cd6528-fb54-475b-a712-e2d9686c194e",
  "Namespace": "user.pixtur.experiments",
  "Description": "A test to use compute shader for experimental edge detection",
  "Inputs": [
    {
      "Name": "InitCode",
      "MetaInstanceID": "7ca3cfa7-78f1-4e0f-8d0a-5e6130203018",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> InitParticle\r",
          "struct Particle\r",
          "{\r",
          "    float3 Position;\r",
          "    float3 Velocity;\r",
          "    float2 Padding;\r",
          "};\r",
          "\r",
          "RWStructuredBuffer<Particle> ParticleStates : register (u0);\r",
          "\r",
          "cbuffer ParticleInitParams\r",
          "{\r",
          "    float3 CenterPosition;\r",
          "    float3 Spacing;\r",
          "    int4 Reset;\r",
          "    float Padding;\r",
          "//    int4 StartIndex;\r",
          "//    int4 EndIndex;\r",
          "//    float4 Time;\r",
          "//    float4 EmitPosition;\r",
          "//    float4 PreviousEmitPosition;\r",
          "//    float4 EmitDirection;\r",
          "//    float4 PreviousEmitDirection;\r",
          "//    float4 ScatterSpeed;\r",
          "//    float4 ScatterAngle;\r",
          " //   float4 TextureCells;\r",
          "//    float4 EmitSizeRange;\r",
          "//    int4 MaxNumParticles;\r",
          "//    int4 Reset;\r",
          "};\r",
          "\r",
          "float3 rotate(float3 v, float3 axis, float angle)\r",
          "{\r",
          "    float ux = axis.x*v.x;\r",
          "    float uy = axis.x*v.y;\r",
          "    float uz = axis.x*v.z;\r",
          "    float vx = axis.y*v.x;\r",
          "    float vy = axis.y*v.y;\r",
          "    float vz = axis.y*v.z;\r",
          "    float wx = axis.z*v.x;\r",
          "    float wy = axis.z*v.y;\r",
          "    float wz = axis.z*v.z;\r",
          "    float sa = sin(angle);\r",
          "    float ca = cos(angle);\r",
          "    return float3(axis.x*(ux+vy+wz)+(v.x*(axis.y*axis.y+axis.z*axis.z)-axis.x*(vy+wz))*ca+(-wy+vz)*sa,\r",
          "                  axis.y*(ux+vy+wz)+(v.y*(axis.x*axis.x+axis.z*axis.z)-axis.y*(ux+wz))*ca+(wx-uz)*sa,\r",
          "                  axis.z*(ux+vy+wz)+(v.z*(axis.x*axis.x+axis.y*axis.y)-axis.z*(ux+vy))*ca+(-vx+uy)*sa);\r",
          "}\r",
          "\r",
          "#define M_PI 3.14159265358979323846\r",
          "float Noise(int x, int seed)\r",
          "{\r",
          "    int n = x + seed*137;\r",
          "    n = (n<<13) ^ n;\r",
          "    return (float)( 1.0 - ( (n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);\r",
          "}\r",
          "\r",
          "float3 random(int x)\r",
          "{\r",
          "    return float3(Noise(x, x), Noise(x*1.5, x*1.5), Noise(x*3.75, x*3.75));\r",
          "}\r",
          "\r",
          "[numthreads(512, 1, 1)]\r",
          "void CSInitParticles(uint3 threadID : SV_DispatchThreadID)\r",
          "{\r",
          "    int id = threadID.x;\r",
          "    if (Reset.x > 0)\r",
          "    {\r",
          "        Particle p = ParticleStates[id]; \r",
          "        p.Position = float3(0.0f, 0.0f, 0.0f);\r",
          "        p.Velocity = float3(0.0f, 0.0f, 0.0f);\r",
          "        //p.Size = 0.0f;\r",
          "        //p.BirthTime = -1.0f;\r",
          "        //p.TextureRow = 0;\r",
          "        ParticleStates[id] = p;\r",
          "        return;\r",
          "    }\r",
          "    \r",
          "    //if (StartIndex.x == EndIndex.x)\r",
          "    //    return;\r",
          "\r",
          "    /*\r",
          "    int numParticlesToAdd = 0;\r",
          "    int currentParticleNumber = 0;\r",
          "    bool useAsNewParticle = false;\r",
          "    if (StartIndex.x < EndIndex.x)\r",
          "    {\r",
          "        useAsNewParticle = StartIndex.x <= id && id < EndIndex.x;\r",
          "        numParticlesToAdd = EndIndex.x - StartIndex.x;\r",
          "        currentParticleNumber = id - StartIndex.x;\r",
          "    }\r",
          "    else\r",
          "    {\r",
          "        useAsNewParticle = id >= StartIndex.x || id < EndIndex.x;\r",
          "        numParticlesToAdd = MaxNumParticles.x - StartIndex.x + EndIndex.x;\r",
          "        currentParticleNumber = id + MaxNumParticles.x - StartIndex.x;\r",
          "    }\r",
          "\r",
          "    if (!useAsNewParticle)\r",
          "        return;\r",
          "\r",
          "    float3 randValue = random(id);\r",
          "    float3 randDir = randValue - float3(0.5, 0.5, 0.5);\r",
          "    float3 interpolatedEmitDirection = PreviousEmitDirection.xyz + (EmitDirection.xyz - PreviousEmitDirection.xyz)*(float)currentParticleNumber/numParticlesToAdd;\r",
          "\r",
          "    float3 axis1 = normalize(cross(interpolatedEmitDirection, randDir));\r",
          "    float angle1 = (randValue.x - 0.5)*radians(ScatterAngle.x);\r",
          "    float3 currentEmitDir = rotate(interpolatedEmitDirection, axis1, angle1);\r",
          "\r",
          "    float3 axis2 = normalize(cross(interpolatedEmitDirection, axis1));\r",
          "    float angle2 = (randValue.y - 0.5)*radians(ScatterAngle.x);\r",
          "    currentEmitDir = rotate(currentEmitDir, axis2, angle2);\r",
          "\r",
          "    Particle p = ParticleStates[id]; \r",
          "    p.Position = PreviousEmitPosition.xyz + (EmitPosition.xyz - PreviousEmitPosition.xyz)*(float)currentParticleNumber/numParticlesToAdd;\r",
          "    p.Velocity = currentEmitDir*(1 - randValue.x*ScatterSpeed.x);\r",
          "    p.Size = randValue.x*(EmitSizeRange.y - EmitSizeRange.x) + EmitSizeRange.x;\r",
          "    p.BirthTime = Time.x;\r",
          "    p.TextureRow = (int)(randValue.x*TextureCells.y);\r",
          "    ParticleStates[id] = p;\r",
          "    */\r",
          "}\r",
          "//<<< InitParticle\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "UpdateCode",
      "MetaInstanceID": "f6f42f42-6903-417b-a0ba-28517743c0ec",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> UpdateParticle\r",
          "Texture2D Image : register (t0);\r",
          "\r",
          "struct Particle\r",
          "{\r",
          "    float3 Position;\r",
          "    float3 Velocity;\r",
          "    float Gradient;\r",
          "    float Padding;\r",
          "};\r",
          "\r",
          "RWStructuredBuffer<Particle> ParticleStates : register (u0);\r",
          "\r",
          "\r",
          "cbuffer ParticleUpdateParams\r",
          "{   \r",
          "\r",
          "\r",
          "    float DeltaTime;\r",
          "    float Friction;\r",
          "    float Acceleration;\r",
          "    float Stiffness;\r",
          "    float SampleRadius;\r",
          "    uint SampleCount;\r",
          "    uint ChainCount;\r",
          "    uint ChainSegmentCount;\r",
          "    float SpacingY;\r",
          "    float Time;\r",
          "    float Alignment;\r",
          "    float Scale;\r",
          "    float AspectRatio;\r",
          "};\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Clamp;\r",
          "    AddressV = Clamp;\r",
          "};\r",
          "\r",
          "\r",
          "[numthreads(512, 1, 1)]\r",
          " float Noise(int x, int seed)\r",
          "{\r",
          "    int n = x + seed*137;\r",
          "    n = (n<<13) ^ n;\r",
          "    return (float)( 1.0 - ( (n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);\r",
          "}\r",
          "\r",
          "[numthreads(512, 1, 1)]\r",
          "float Lerp(float a, float b, float t)\r",
          "{\r",
          "    return a + t * (b - a);\r",
          "}\r",
          "\r",
          "[numthreads(512, 1, 1)]\r",
          "float Fade(float t)\r",
          "{\r",
          "    return t * t * t * (t * (t * 6 - 15) + 10);\r",
          "}\r",
          "\r",
          "[numthreads(512, 1, 1)]\r",
          "float getNoise(float value, float zoom, float noiseTime, int seed, float period)\r",
          "{\r",
          "    value /= zoom;\r",
          "    value += noiseTime;\r",
          "        \r",
          "    float noiseSum = 0;\r",
          "    for(int a=0; a<4; a++) {\r",
          "        float f = (float)pow(2,a); \r",
          "        float amplitude = (float)pow(period ,a);\r",
          "\r",
          "        float v = value*f / zoom;\r",
          "       \r",
          "        noiseSum += Lerp( Noise( (int)v  , (int)seed ),\r",
          "                          Noise( (int)v+1, (int)seed ),\r",
          "                          Fade( v - (float)floor(v) )\r",
          "                    )* amplitude;\r",
          "    }   \r",
          "    return noiseSum;    \r",
          "}\r",
          "\r",
          "/*\r",
          "float3 FindGradientPosition(float3 position, float g, int random) \r",
          "{\r",
          "    //g = 0.2;\r",
          "    //return float3(0.01,0,0);\r",
          "    float3 d = float3(0,0,0);\r",
          "    float noise = Noise(random, 3);\r",
          "    for(float i = 0; i < SampleCount; i++ ) \r",
          "    {\r",
          "        float f= i/SampleCount ;\r",
          "        float a= f * 2 * 3.1415 * 10 + noise * 1000; \r",
          "        float3 sd = float3( sin(a), cos(a), 0) * SampleRadius * f;\r",
          "        float3 samplePos = position  + sd;\r",
          "        //float3 samplePos = position;\r",
          "        \r",
          "        float4 c = Image.SampleLevel(samLinear, ( float2(samplePos.x, samplePos.y) * 0.02) % 1 , 0 ) ;\r",
          "        float gray = (c.r + c.g + c.g)/3;\r",
          "        float distanceFromG =abs((c.r+c.g+c.g)/3 - g);\r",
          "        float attraction = 1 - min(1, pow(distanceFromG, 2)) * (1-f) ;\r",
          "        d+= sd * attraction ;\r",
          "        //d+= float3(1,0,0) * gray;\r",
          "    }\r",
          "    return d;\r",
          "}*/\r",
          "\r",
          "float SampleGradientForPosition(float3 p, float g) \r",
          "{\r",
          "        float4 cb = Image.SampleLevel(samLinear, p.xy * float2(0.5/AspectRatio, -0.5)  +0.5, 0 );\r",
          "        return  (cb.r + cb.g + cb.b) * 0.33 - g ;\r",
          "}\r",
          "\r",
          "float FindGradientDistance(float3 position, float3 direction, float g) \r",
          "{\r",
          "    //float  = position;\r",
          "    float lastDForward = 0;\r",
          "    float lastDBackward = 0;\r",
          "    \r",
          "    float distance = 0;\r",
          "    float lastDistance = 0;\r",
          "    //float3 startStepWidth = normalize(direction);\r",
          "    //float3 endStepWidth = startStepWidth * 10;\r",
          "\r",
          "    float4 c;\r",
          "    float f1;\r",
          "    float f2;\r",
          "    float d;\r",
          "    float minDForward = 10000;\r",
          "    float minDBackward= 10000;\r",
          "    \r",
          "    //g= 0.6; // HACKKKK\r",
          "\r",
          "    // Look forward\r",
          "    for(uint i=0; i < SampleCount; i++)\r",
          "    {\r",
          "        float f= i / (float) SampleCount;\r",
          "        distance = SampleRadius * pow(f, 2);\r",
          "        \r",
          "        // Sample forward\r",
          "        d = SampleGradientForPosition(position+direction * distance, g);\r",
          "\r",
          "        // If one of them is negativ -> zero cross\r",
          "        if(d * lastDForward < 0) \r",
          "        {\r",
          "            f2=  abs( d / (d - lastDForward ));            \r",
          "            minDForward = min(minDForward, lerp(lastDistance, distance, f2));\r",
          "        }\r",
          "        lastDForward = d;\r",
          "        \r",
          "\r",
          "        // Sample forward\r",
          "\r",
          "        d = SampleGradientForPosition(position-direction * distance, g);\r",
          "        // If one of them is negativ -> zero cross\r",
          "        if(d * lastDBackward < 0) \r",
          "        {\r",
          "            f2=  abs( d / (d - lastDBackward));\r",
          "            minDBackward = min(minDBackward, lerp(lastDistance, distance, f2));\r",
          "        }\r",
          "        lastDBackward = d;        \r",
          "    }\r",
          "    \r",
          "    if(minDForward == 10000 && minDBackward == 10000) return 0;\r",
          "    \r",
          "    return minDForward < minDBackward ? minDForward : (-minDBackward );\r",
          "}\r",
          "\r",
          "const int NEIGHBOUR = 1;\r",
          "\r",
          "[numthreads(512, 1, 1)]\r",
          "void CSUpdateParticles(uint3 threadID : SV_DispatchThreadID)\r",
          "{  \r",
          "    Particle p = ParticleStates[threadID.x];\r",
          "    //float2 uv = float2(0.5,0.5);\r",
          "    uint i = threadID.x;\r",
          "    uint chainIndex = i / ChainSegmentCount;\r",
          "    uint segmentIndex = i - (int) (i / ChainSegmentCount) * ChainSegmentCount;\r",
          "    float chainGradient = ((chainIndex % 12.0) / 13 + 0.1);\r",
          "    //float chainGradient = chainIndex % 2> 0 ? 0.2 : 0.8;\r",
          "    //chainGradient = 0.5;\r",
          "    p.Gradient = chainGradient;\r",
          "    \r",
          "    if (segmentIndex > 1 && segmentIndex < ChainSegmentCount -1 ) \r",
          "    {\r",
          "        Particle leftP = ParticleStates[i - 1];\r",
          "        float3 d = leftP.Position - p.Position;\r",
          "        float l = length(d);\r",
          "                \r",
          "        float stayOrGo =  (l > SpacingY ? -1 :1);\r",
          "        float3 dn =   normalize(d);\r",
          "        p.Velocity -= dn * stayOrGo * Stiffness;\r",
          "        \r",
          "        Particle rightP = ParticleStates[i + 1];\r",
          "        float3 centerBetweenNeighbours = (rightP.Position + leftP.Position) / 2;\r",
          "        p.Velocity -= (centerBetweenNeighbours - p.Position) * Alignment;\r",
          "        \r",
          "        float3 n = normalize(cross(leftP.Position- rightP.Position, float3(0,0,-1)));        \r",
          "        float distance = FindGradientDistance(p.Position, n, p.Gradient);\r",
          "        if(abs(distance) > 0) {\r",
          "            //p.Velocity += n * distance * Acceleration;\r",
          "            p.Velocity += n * Acceleration * (distance > 0 ? 1:-1) * (DeltaTime.x * 1000 / 16.7) ;\r",
          "        }\r",
          "    } \r",
          "\r",
          "   \r",
          "    //float2 uv = (p.Position.xy * 0.1) % 1;\r",
          "    //uv += sin(Time);\r",
          "    //float4 c = Image.SampleLevel(samLinear, uv, 0 ) - 0.5;\r",
          "    //float4 color = Image[p.position];\r",
          "    //float3 d = color.xyz;\r",
          "    \r",
          "    //p.Position = c.xyz;\r",
          "    //p.Velocity =  + c.xyz * Acceleration;\r",
          "    float speed = length(p.Velocity);     \r",
          "    p.Velocity /= (0.92 + pow(speed,1) * Friction ) ;\r",
          "    \r",
          "    //p.Position += p.Velocity * 0.016;\r",
          "    p.Position += p.Velocity * DeltaTime.x;\r",
          "    \r",
          "    //float MAX_SPEED = 0.1;\r",
          "    \r",
          "    //p.Velocity *= (1- Friction * pow(speed,2) );\r",
          "    //if(speed > MAX_SPEED) {\r",
          "        //p.Velocity = normalize(p.Velocity) * 0.1;\r",
          "    //}\r",
          "        \r",
          "    \r",
          "    //p.Position += FindGradientPosition(p.Position, chainGradient, i + Time * 10 ) * Acceleration;\r",
          "    //p.Velocity -=  p.Position * 0.001;\r",
          "/*\r",
          "    float attractorDistance = length(AttractorPosition.xyz - p.Position);\r",
          "    float3 attractorForceDir = (AttractorPosition.xyz - p.Position)/attractorDistance;\r",
          "    float attractorForce = AttractorStrength.x;\r",
          "    if (attractorDistance > AttractorRadius.x)\r",
          "        attractorForce = pow(attractorDistance - AttractorRadius.x, -AttractorDecay.x)*AttractorStrength.x;\r",
          "        \r",
          "\r",
          "\r",
          "    if(abs(NoiseAmount.x) > 0.01f) {\r",
          "        float3 noiseOffset = float3(getNoise(p.Position.y - 16.3f,NoiseScale.x, NoiseTime.x, NoiseSeed.x , NoiseRadius.x  ),\r",
          "                                    getNoise(p.Position.z + 9.3f, NoiseScale.x, NoiseTime.x, NoiseSeed.x , NoiseRadius.x  ),\r",
          "                                    getNoise(p.Position.x - 0.3f, NoiseScale.x, NoiseTime.x, NoiseSeed.x , NoiseRadius.x ));\r",
          "    \r",
          "        p.Velocity += noiseOffset * NoiseAmount.x*DeltaTime.x;\r",
          "    }\r",
          "    p.Velocity = (1.0 - Friction.x*DeltaTime.x)*p.Velocity + (Wind.xyz + attractorForceDir*attractorForce)*DeltaTime.x;\r",
          "    */\r",
          "    ParticleStates[threadID.x] = p;\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "",
          "//<<< UpdateParticle\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RenderCode",
      "MetaInstanceID": "cffcf04d-37b7-46dc-8944-e5d1b01373ca",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> RenderParticle\r",
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> __parameters\r",
          "float Time;\r",
          "Texture2D Image;",
          "float ChainCount;",
          "float ChainSegmentCount;",
          "float SampleRadius;",
          "float Acceleration;",
          "float Friction;",
          "float Stiffness;",
          "float2 Spacing;",
          "float Scale;",
          "float4 Color;",
          "//<<< __parameters\r",
          "\r",
          "static const float scale = 0.5f;\r",
          "\r",
          "static const float2 g_texcoords[4] = \r",
          "{ \r",
          "    float2( -1, 1 ), \r",
          "    float2( 1, 1 ),\r",
          "    float2( -1, -1 ),\r",
          "    float2( 1, -1 ),\r",
          "};\r",
          "\r",
          "\r",
          "struct Particle\r",
          "{\r",
          "    float3 Position;\r",
          "    float3 Velocity;\r",
          "    float Gradient;\r",
          "    float Padding;\r",
          "};\r",
          "\r",
          "StructuredBuffer<Particle> ParticleStates;\r",
          "\r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> __declarations\r",
          "struct GS_INPUT",
          "{",
          "    float3 position : Position;",
          "    float3 velocity : Vel;",
          "    float gradient: Gradient;",
          "};",
          "",
          "struct PS_INPUT",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float2 texCoord: TEXCOORD0;",
          "    float opacity: Value;",
          "};",
          "//<<< __declarations\r",
          "\r",
          "//>>> __VS \r",
          "GS_INPUT VS( in uint vertexid : SV_VertexID )\r",
          "{\r",
          "\tGS_INPUT output = (GS_INPUT)0;\r",
          "\t\r",
          "\toutput.position = ParticleStates[vertexid].Position;\r",
          "\toutput.velocity = ParticleStates[vertexid].Velocity;\r",
          "\toutput.gradient = ParticleStates[vertexid].Gradient;\r",
          "\treturn output;\r",
          "}\r",
          "//<<< __VS\r",
          "\r",
          "//>>> __GS\r",
          "float Noise(int x, int seed)\r",
          "{\r",
          "    int n = x + seed*137;\r",
          "    n = (n<<13) ^ n;\r",
          "    return (float)( 1.0 - ( (n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);\r",
          "}\r",
          "\r",
          "float Lerp(float a, float b, float t)\r",
          "{\r",
          "    return a + t * (b - a);\r",
          "}\r",
          "\r",
          "float Fade(float t)\r",
          "{\r",
          "    return t * t * t * (t * (t * 6 - 15) + 10);\r",
          "}\r",
          "\r",
          "float getNoise(float value, float frequency, float noiseTime, int seed)\r",
          "{\r",
          "    value *= frequency;\r",
          "    value += noiseTime;\r",
          "    return Lerp(Noise((int)value, seed),\r",
          "                Noise((int)value + 1, seed),\r",
          "                Fade(value - floor(value)));\r",
          "}\r",
          "\r",
          "[maxvertexcount(4)]\r",
          "void GS( point GS_INPUT input[1], inout TriangleStream<PS_INPUT> SpriteStream )\r",
          "{\r",
          "\tPS_INPUT output = (PS_INPUT)0;\r",
          "    output.opacity = 0.1f + length(input[0].velocity) / 5 * input[0].gradient;\r",
          "    \r",
          "    \r",
          "    float4 viewposition = mul(float4(input[0].position, 1.0f), objectToWorldMatrix);\r",
          "    viewposition = mul(viewposition, worldToCameraMatrix);\r",
          "\r",
          "    float2 up =float2(0,1) * Scale / 100;\r",
          "    float2 right = float2(1,0) * Scale / 100;\r",
          "    \r",
          "    float4 positions[4] =\r",
          "    {\r",
          "        float4(-scale*right +  scale*up, 0, 0),\r",
          "        float4( scale*right +  scale*up, 0, 0),\r",
          "        float4(-scale*right + -scale*up, 0, 0),\r",
          "        float4( scale*right + -scale*up, 0, 0),\r",
          "    };\r",
          "\r",
          "    for (int i = 0; i < 4; ++i)\r",
          "    {\r",
          "\t\toutput.pos = mul(viewposition + positions[i], projMatrix);\r",
          "        float u = g_texcoords[i].x;\r",
          "        float v = g_texcoords[i].y;\r",
          "        output.texCoord = float2(u, v);\r",
          "        SpriteStream.Append(output);\r",
          "    }\r",
          "\r",
          "\tSpriteStream.RestartStrip();\r",
          "}\r",
          "//<<< __GS\r",
          "\r",
          "//>>> __PS\r",
          "float4 PS( in PS_INPUT input ) : SV_TARGET\r",
          "{\r",
          "    //float4 c = Image.Sample(samLinear, input.texCoord)*Color;\r",
          "    float4 c = float4(1,1,1,1);\r",
          "    c *= Color;\r",
          "    c.a *= input.opacity * 4;\r",
          "    return c;\r",
          "}\r",
          "//<<< __PS\r",
          "\r",
          "//>>> __technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetVertexShader( CompileShader( vs_5_0, VS() ) );",
          "        SetGeometryShader( CompileShader( gs_5_0, GS() ) );",
          "        SetPixelShader( CompileShader( ps_5_0, PS() ) );",
          "    }",
          "}",
          "//<<< __technique\r",
          "",
          "//<<< RenderParticle\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "ee5d18f2-721a-4c5c-9233-a80037ccc563",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ChainCount",
      "MetaInstanceID": "4ddbbc6d-9de1-48ce-be04-93ebcbdb6154",
      "DefaultValue": {
        "Type": "Float",
        "Value": "60.2"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "512",
      "Scale": "1",
      "ScaleType": "Quadratic",
      "EnumValues": []
    },
    {
      "Name": "ChainSegmentCount",
      "MetaInstanceID": "77bb6d01-35ee-42df-9d57-6a581642c656",
      "DefaultValue": {
        "Type": "Float",
        "Value": "650"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "1000",
      "Scale": "50",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SampleRadius",
      "MetaInstanceID": "c6297dac-a531-4d30-93d8-a2c31d0c16b7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "6.317007"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Acceleration",
      "MetaInstanceID": "0f48742d-e855-4591-a0b3-74d68bcceaef",
      "DefaultValue": {
        "Type": "Float",
        "Value": "5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Friction",
      "MetaInstanceID": "21459944-d887-44f9-852d-900fedc1c62d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.015"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Stiffness",
      "MetaInstanceID": "760afd16-7b88-486a-95a2-99f141e7fc13",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.02000061"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spacing.X",
      "MetaInstanceID": "726e1f2d-73d1-4905-82b1-57adc3832b68",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5999999"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spacing.Y",
      "MetaInstanceID": "ece3e744-c0ee-4096-b91e-7d5ee33cd6f6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.09279995"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scale",
      "MetaInstanceID": "f9cca175-1280-42a7-92a7-0341d6be5e46",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.01300004"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.09",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ResetTrigger",
      "MetaInstanceID": "a8d652d8-a6b3-4b2d-81bf-424533e159aa",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "CenterPosition.X",
      "MetaInstanceID": "fef73605-8971-47af-afdd-308881f101f5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "CenterPosition.Y",
      "MetaInstanceID": "4725e700-931a-446a-9bc6-56801185d387",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "CenterPosition.Z",
      "MetaInstanceID": "124e1921-1cc5-48b2-86e4-98ec0cafdecd",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Alignment",
      "MetaInstanceID": "2d32d69e-53a1-42cb-9c30-d72a696bd6a1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "-6"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SampleCount",
      "MetaInstanceID": "30b4e0ef-09c7-4410-9253-07cd1a83784c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "30"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "30",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.R",
      "MetaInstanceID": "2d32f5df-4af0-40b5-b0da-d20b175c9892",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.G",
      "MetaInstanceID": "a65f49bc-1b08-4f5c-b581-90c4e0373813",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.B",
      "MetaInstanceID": "a0b0f290-b6de-4421-b5ed-162ffc60f006",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.A",
      "MetaInstanceID": "8b4aeb8b-7a47-42dc-9f3e-e3758afb4c5a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "39888b48-9696-458a-afa2-dc9caa168838",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "4de4b10c-3c8a-45bf-89b7-bac44af980f5",
      "MetaID": "c47e6d4a-5447-4bb0-9896-4cedc0619a37",
      "Name": "GradientChainsFunc",
      "Version": "cc718c12-bee9-482e-8745-22e42dfe2fb4",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "using System.Runtime.InteropServices;",
        "using Framefield.Core;",
        "using Framefield.Core.Rendering;",
        "using SharpDX.DXGI;",
        "using SharpDX.Direct3D;",
        "using SharpDX.D3DCompiler;",
        "using System.CodeDom.Compiler;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.IDc47e6d4a_5447_4bb0_9896_4cedc0619a37",
        "{",
        "    public class Class_GradientChains : FXSourceCodeFunction, IFXSceneSourceCode, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //structured buffer element type. size must be multiple of 4",
        "        [StructLayout(LayoutKind.Explicit, Size = 2*3*4 + 2*4)]",
        "        public struct ParticleStateLayout",
        "        {",
        "            [FieldOffset(0)]     public  Vector3 Position;",
        "            [FieldOffset(1*3*4)] public  Vector3 Velocity;",
        "            [FieldOffset(2*3*4)] public  float Gradient;",
        "            [FieldOffset(2*3*4+1)] public  float  Padding;",
        "        }",
        "",
        "        // Init Parameters / size must be multiple of 16",
        "        [StructLayout(LayoutKind.Explicit, Size = 2*3*4 + 4 + 4)]",
        "        public struct ParticleInitParametersBufferLayout",
        "        {",
        "            [FieldOffset(0)]         public Vector3 CenterPosition;",
        "            [FieldOffset(1*3*4)]     public Vector3 Spacing;",
        "            [FieldOffset(2*3*4)]     public int Reset;",
        "            [FieldOffset(2*3*4 + 4)] int Padding;",
        "        }",
        "        private Buffer _particleInitParametersBuffer;",
        "",
        "        // Update parameters / Size must be multiple of 16",
        "        [StructLayout(LayoutKind.Explicit, Size = 20*4)]",
        "        public struct ParticleUpdateParametersBufferLayout",
        "        {",
        "            [FieldOffset(0 * 4)]  public float DeltaTime;",
        "            [FieldOffset(1 * 4)]  public float Friction;",
        "            [FieldOffset(2 * 4)]  public float Acceleration;",
        "            [FieldOffset(3 * 4)]  public float Stiffness;",
        "            [FieldOffset(4 * 4)]  public float SampleRadius;",
        "            [FieldOffset(5 * 4)]  public int SampleCount;",
        "            [FieldOffset(6 * 4)]  public int ChainCount;",
        "            [FieldOffset(7 * 4)]  public int ChainSegmentCount;",
        "            [FieldOffset(8 * 4)]  public float SpacingY;",
        "            [FieldOffset(9 * 4)]  public float Time;",
        "            [FieldOffset(10 * 4)]  public float Alignment;",
        "            [FieldOffset(11 * 4)]  public float Scale;",
        "            [FieldOffset(12 * 4)]  public float AspectRatio;",
        "            [FieldOffset(13 * 4)]  public Vector3 _padding;",
        "",
        "        }",
        "        private Buffer _particleUpdateParametersBuffer;",
        "",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            InitCode = 0,",
        "            UpdateCode = 1,",
        "            RenderCode = 2,",
        "            Image = 3,",
        "            ChainCount = 4,",
        "            ChainSegmentCount = 5,",
        "            SampleRadius = 6,",
        "            Acceleration = 7,",
        "            Friction = 8,",
        "            Stiffness = 9,",
        "            SpacingX = 10,",
        "            SpacingY = 11,",
        "            Scale = 12,",
        "            ResetTrigger = 13,",
        "            CenterPositionX = 14,",
        "            CenterPositionY = 15,",
        "            CenterPositionZ = 16,",
        "            Alignment = 17,",
        "            SampleCount = 18,",
        "            ColorR = 19,",
        "            ColorG = 20,",
        "            ColorB = 21,",
        "            ColorA = 22",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _csInitParticles);",
        "            Utilities.DisposeObj(ref _csUpdateParticles);",
        "            Utilities.DisposeObj(ref _fxRenderParticles);",
        "            Utilities.DisposeObj(ref _particleStateBuffer);",
        "            Utilities.DisposeObj(ref _imageView);",
        "            base.Dispose();",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            if (_firstEval)",
        "            {",
        "            ",
        "                for (int i = 0; i < NumCodes(); ++i) {",
        "                    Compile(i);",
        "                }",
        "                ",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            //>>> _params",
        "            var InitCode = inputs[(int)InputId.InitCode].Eval(context).Text;",
        "            var UpdateCode = inputs[(int)InputId.UpdateCode].Eval(context).Text;",
        "            var RenderCode = inputs[(int)InputId.RenderCode].Eval(context).Text;",
        "            var Image = inputs[(int)InputId.Image].Eval(context).Image; // Needs to be checked for null!",
        "            var ChainCount = inputs[(int)InputId.ChainCount].Eval(context).Value;",
        "            var ChainSegmentCount = inputs[(int)InputId.ChainSegmentCount].Eval(context).Value;",
        "            var SampleRadius = inputs[(int)InputId.SampleRadius].Eval(context).Value;",
        "            var Acceleration = inputs[(int)InputId.Acceleration].Eval(context).Value;",
        "            var Friction = inputs[(int)InputId.Friction].Eval(context).Value;",
        "            var Stiffness = inputs[(int)InputId.Stiffness].Eval(context).Value;",
        "            var SpacingX = inputs[(int)InputId.SpacingX].Eval(context).Value;",
        "            var SpacingY = inputs[(int)InputId.SpacingY].Eval(context).Value;",
        "            var Spacing = new Vector2(SpacingX, SpacingY);",
        "            var Scale = inputs[(int)InputId.Scale].Eval(context).Value;",
        "            var ResetTrigger = inputs[(int)InputId.ResetTrigger].Eval(context).Value;",
        "            var CenterPositionX = inputs[(int)InputId.CenterPositionX].Eval(context).Value;",
        "            var CenterPositionY = inputs[(int)InputId.CenterPositionY].Eval(context).Value;",
        "            var CenterPositionZ = inputs[(int)InputId.CenterPositionZ].Eval(context).Value;",
        "            var CenterPosition = new Vector3(CenterPositionX, CenterPositionY, CenterPositionZ);",
        "            var Alignment = inputs[(int)InputId.Alignment].Eval(context).Value;",
        "            var SampleCount = inputs[(int)InputId.SampleCount].Eval(context).Value;",
        "            var ColorR = inputs[(int)InputId.ColorR].Eval(context).Value;",
        "            var ColorG = inputs[(int)InputId.ColorG].Eval(context).Value;",
        "            var ColorB = inputs[(int)InputId.ColorB].Eval(context).Value;",
        "            var ColorA = inputs[(int)InputId.ColorA].Eval(context).Value;",
        "            var Color = new Color4(ColorR, ColorG, ColorB, ColorA);",
        "            //<<< _params",
        "",
        "            //Logger.Info(\"aspect:\" + context.Viewport.Width / context.Viewport.Height * 1.0f);",
        "",
        "            _chainCount = (int)ChainCount;",
        "            _chainSegmentCount = (int)ChainSegmentCount;",
        "            _centerPosition = CenterPosition;",
        "            _spacing = new Vector3(Spacing.X, Spacing.Y, 0);",
        "            ",
        "            float deltaTime = context.Time - _time;",
        "            _time = context.Time;",
        "",
        "            var newParticleCount = (int)(Math.Max(512, ChainCount * ChainSegmentCount));",
        "            InitializeParticleStateBuffer(context, newParticleCount );",
        "",
        "            var uavDesc = new UnorderedAccessViewDescription",
        "                              {",
        "                                  Format = Format.Unknown, ",
        "                                  Dimension = UnorderedAccessViewDimension.Buffer,",
        "                                  Buffer = new UnorderedAccessViewDescription.BufferResource",
        "                                               {",
        "                                                   FirstElement = 0,",
        "                                                   ElementCount = _maxNumParticles,",
        "                                                   Flags = UnorderedAccessViewBufferFlags.None",
        "                                               }",
        "                              };",
        "",
        "            var deviceContext = context.D3DDevice.ImmediateContext;",
        "",
        "            // Particle initializing -----------------------------------------------            ",
        "            var particleInitParameterLayout = new ParticleInitParametersBufferLayout() {",
        "                CenterPosition= Vector3.Zero,",
        "                Spacing= _spacing,",
        "                Reset= (int)ResetTrigger,                 ",
        "            };",
        "            ",
        "            ",
        "            if(Changed || _imageView != null && Image != null) ",
        "            {",
        "                 Utilities.DisposeObj(ref _imageView);",
        "                _imageView = new ShaderResourceView(context.D3DDevice, Image);",
        "            }",
        "",
        "            ",
        "            BaseRenderer.SetupConstBufferForCS(",
        "                context, ",
        "                particleInitParameterLayout , ",
        "                ref _particleInitParametersBuffer,",
        "                0);",
        "",
        "            using (var particleStateUAV = new UnorderedAccessView(context.D3DDevice, _particleStateBuffer, uavDesc))",
        "            {",
        "                deviceContext.ComputeShader.Set(_csInitParticles);",
        "                deviceContext.ComputeShader.SetUnorderedAccessView(0, particleStateUAV);",
        "",
        "                deviceContext.Dispatch(_maxNumParticles/512, 1, 1);",
        "",
        "                deviceContext.ComputeShader.SetUnorderedAccessView(0, null);",
        "                deviceContext.ComputeShader.SetConstantBuffer(0, null);",
        "            }",
        "",
        "            // -- updating ----------------------------------------------------",
        "            BaseRenderer.SetupConstBufferForCS(",
        "                context, ",
        "                new ParticleUpdateParametersBufferLayout() {",
        "                    DeltaTime = deltaTime,",
        "                    Friction = Friction,",
        "                    Acceleration = Acceleration,",
        "                    Stiffness = Stiffness,",
        "                    SampleRadius = SampleRadius,                    ",
        "                    SampleCount = (int)SampleCount,",
        "                    ChainCount = (int)ChainCount,",
        "                    ChainSegmentCount = (int)ChainSegmentCount,",
        "                    Time = context.Time,",
        "                    SpacingY = SpacingY,",
        "                    Alignment = Alignment,",
        "                    Scale = Scale,",
        "                    AspectRatio = context.Viewport.Width / context.Viewport.Height * 1.0f,",
        "                }, ",
        "                ref _particleUpdateParametersBuffer,",
        "                0);     ",
        "",
        "            using (var particleStateUAV = new UnorderedAccessView(context.D3DDevice, _particleStateBuffer, uavDesc))",
        "            {",
        "                deviceContext.ComputeShader.Set(_csUpdateParticles);",
        "                deviceContext.ComputeShader.SetUnorderedAccessView(0, particleStateUAV);",
        "                deviceContext.ComputeShader.SetShaderResource(0, _imageView);",
        "",
        "                deviceContext.Dispatch(_maxNumParticles/512, 1, 1);",
        "",
        "                deviceContext.ComputeShader.SetShaderResource(0, null);",
        "                deviceContext.ComputeShader.SetUnorderedAccessView(0, null);",
        "                deviceContext.ComputeShader.SetConstantBuffer(0, null);",
        "            }",
        "",
        "            // Particle rendering ----------------------------------------------",
        "            using (var particleStateSRV = new ShaderResourceView(context.D3DDevice, _particleStateBuffer))",
        "            using (var imageSRV = new ShaderResourceView(context.D3DDevice, Image))",
        "            {",
        "                try",
        "                {",
        "                    deviceContext.ClearState();",
        "",
        "                    _fxRenderParticles.GetVariableByName(\"ParticleStates\").AsShaderResource().SetResource(particleStateSRV);",
        "                    _fxRenderParticles.GetVariableByName(\"Image\").AsShaderResource().SetResource(imageSRV);",
        "                    _fxRenderParticles.GetVariableByName(\"Time\").AsScalar().Set((float)_time);",
        "                    _fxRenderParticles.GetVariableByName(\"Scale\").AsScalar().Set((float)Scale);",
        "                    _fxRenderParticles.GetVariableByName(\"Color\").AsVector().Set(Color);",
        "                    ",
        "                    var previousEffect = context.Effect;",
        "                    context.Effect = _fxRenderParticles;",
        "                    context.Renderer.SetupEffect(context);",
        "",
        "                    if (context.DepthStencilView != null)",
        "                        deviceContext.OutputMerger.SetTargets(context.DepthStencilView, context.RenderTargetView);",
        "                    else",
        "                        deviceContext.OutputMerger.SetTargets(context.RenderTargetView);",
        "",
        "                    if (context.BlendState != null) {",
        "                        deviceContext.OutputMerger.BlendState = context.BlendState;",
        "                        deviceContext.OutputMerger.BlendFactor = context.BlendFactor;",
        "                    }",
        "",
        "                    if (context.DepthStencilState != null) {",
        "                        deviceContext.OutputMerger.DepthStencilState = context.DepthStencilState;",
        "                    }",
        "",
        "                    if (context.RasterizerState != null) {",
        "                        deviceContext.Rasterizer.State = context.RasterizerState;",
        "                    }",
        "",
        "                    deviceContext.Rasterizer.SetViewports(new [] { context.Viewport });",
        "                    deviceContext.InputAssembler.InputLayout = context.InputLayout;",
        "                    deviceContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.PointList;",
        "                    deviceContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(null, 0, 0));",
        "",
        "                    var technique = context.Effect.GetTechniqueByIndex(0);",
        "                    for (int i = 0; i < technique.Description.PassCount; ++i) {",
        "                        technique.GetPassByIndex(i).Apply(deviceContext);",
        "                        deviceContext.Draw(_maxNumParticles, 0);",
        "                    }",
        "",
        "                    // remove target views that they are no longer bound as output and can be used also as input",
        "                    DepthStencilView dsv = null;",
        "                    RenderTargetView rtv = null;",
        "                    deviceContext.OutputMerger.SetTargets(dsv, rtv);",
        "                    deviceContext.VertexShader.SetShaderResource(0, null);",
        "                    deviceContext.PixelShader.SetShaderResource(0, null);",
        "                    context.Effect = previousEffect;",
        "                }",
        "                catch (Exception exception)",
        "                {",
        "                    Logger.Error(this,\"render error: {0}\", exception.Message);",
        "                }",
        "            }",
        "",
        "            Changed = false;",
        "            return context;",
        "        }",
        "",
        "",
        "        void InitializeParticleStateBuffer(OperatorPartContext context, int newParticleCount)",
        "        {",
        "            //var newMaxiNumParticles = _maxNumParticles;",
        "            newParticleCount = Math.Max(512, newParticleCount); //at least we need to have 512 particles",
        "",
        "            if (_particleStateBuffer == null || _maxNumParticles != newParticleCount)",
        "            {",
        "                using (var data = new DataStream(Marshal.SizeOf(typeof(ParticleStateLayout)) * newParticleCount, true, true))",
        "                {",
        "                var topLeft = _centerPosition - _spacing * new Vector3(_chainCount * 0.5f, _chainSegmentCount * 0.5f,1);",
        "                    for (int i = 0; i < _chainCount; ++i) ",
        "                    {",
        "                        for (int j = 0; j < _chainSegmentCount; ++j) ",
        "                        {",
        "                            var pData = new ParticleStateLayout() {                        ",
        "                                Position= topLeft + _spacing * new Vector3(i,j,0), ",
        "                                Velocity= new Vector3(0 ,0, 0)",
        "                            };",
        "                            data.Write(pData);",
        "                        }",
        "                    }",
        "                    data.Position = 0;",
        "",
        "                    var bufferDesc = new BufferDescription",
        "                                         {",
        "                                             Usage = ResourceUsage.Default,",
        "                                             SizeInBytes = Marshal.SizeOf(typeof(ParticleStateLayout)) * newParticleCount,",
        "                                             StructureByteStride = Marshal.SizeOf(typeof(ParticleStateLayout)),",
        "                                             BindFlags = BindFlags.ShaderResource | BindFlags.UnorderedAccess,",
        "                                             OptionFlags = ResourceOptionFlags.BufferStructured",
        "                                         };",
        "                    _particleStateBuffer = new Buffer(context.D3DDevice, data, bufferDesc);",
        "                }",
        "                _maxNumParticles = newParticleCount;",
        "            }",
        "        }",
        "",
        "        public override int NumCodes()",
        "        {",
        "            return 3;",
        "        }",
        "",
        "        public override CompilerErrorCollection Compile(int codeIdx)",
        "        {",
        "            var errors = new CompilerErrorCollection();",
        "            try",
        "            {",
        "                switch (codeIdx)",
        "                {",
        "                    case 0:",
        "                    {",
        "                        Utilities.DisposeObj(ref _csInitParticles);",
        "                        var t = GetCode(codeIdx);",
        "                        using (var bytecode = ShaderBytecode.Compile(GetCode(codeIdx), \"CSInitParticles\", \"cs_5_0\", ShaderFlags.Debug))",
        "                            _csInitParticles = new ComputeShader(D3DDevice.Device, bytecode);",
        "                        break;",
        "                    }",
        "                    case 1:",
        "                    {",
        "                        Utilities.DisposeObj(ref _csUpdateParticles);",
        "                        using (var bytecode = ShaderBytecode.Compile(GetCode(codeIdx), \"CSUpdateParticles\", \"cs_5_0\", ShaderFlags.Debug))",
        "                            _csUpdateParticles = new ComputeShader(D3DDevice.Device, bytecode);",
        "                        break;",
        "                    }",
        "                    case 2:",
        "                    {",
        "                        Utilities.DisposeObj(ref _fxRenderParticles);",
        "                        using (var bytecode = ShaderBytecode.Compile(GetCode(codeIdx), \"fx_5_0\", ShaderFlags.Debug, EffectFlags.None, null, null))",
        "                            _fxRenderParticles = new Effect(D3DDevice.Device, bytecode);",
        "                        break;",
        "                    }",
        "                }",
        "            }",
        "            catch (SharpDX.CompilationException ex)",
        "            {",
        "                errors = ErrorsFromString(ex.Message);",
        "                Logger.Error(this,\"Fx compile error: {0}\", ex.Message);",
        "            }",
        "            return errors;",
        "        }",
        "",
        "        ShaderResourceView _imageView;",
        "        ComputeShader _csInitParticles;",
        "        ComputeShader _csUpdateParticles;",
        "        Effect _fxRenderParticles;",
        "        Buffer _particleStateBuffer;",
        "        Vector3 _centerPosition;",
        "        Vector3 _spacing;",
        "        int _chainCount;",
        "        int _chainSegmentCount;        ",
        "        int _maxNumParticles;",
        "        float _time;",
        "    }",
        "}",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "39888b48-9696-458a-afa2-dc9caa168838"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7ca3cfa7-78f1-4e0f-8d0a-5e6130203018",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f6f42f42-6903-417b-a0ba-28517743c0ec",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cffcf04d-37b7-46dc-8944-e5d1b01373ca",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ee5d18f2-721a-4c5c-9233-a80037ccc563",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4ddbbc6d-9de1-48ce-be04-93ebcbdb6154",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "77bb6d01-35ee-42df-9d57-6a581642c656",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c6297dac-a531-4d30-93d8-a2c31d0c16b7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0f48742d-e855-4591-a0b3-74d68bcceaef",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "21459944-d887-44f9-852d-900fedc1c62d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "760afd16-7b88-486a-95a2-99f141e7fc13",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "726e1f2d-73d1-4905-82b1-57adc3832b68",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ece3e744-c0ee-4096-b91e-7d5ee33cd6f6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f9cca175-1280-42a7-92a7-0341d6be5e46",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a8d652d8-a6b3-4b2d-81bf-424533e159aa",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "fef73605-8971-47af-afdd-308881f101f5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4725e700-931a-446a-9bc6-56801185d387",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "124e1921-1cc5-48b2-86e4-98ec0cafdecd",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2d32d69e-53a1-42cb-9c30-d72a696bd6a1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "30b4e0ef-09c7-4410-9253-07cd1a83784c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2d32f5df-4af0-40b5-b0da-d20b175c9892",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a65f49bc-1b08-4f5c-b581-90c4e0373813",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a0b0f290-b6de-4421-b5ed-162ffc60f006",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8b4aeb8b-7a47-42dc-9f3e-e3758afb4c5a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de4b10c-3c8a-45bf-89b7-bac44af980f5"
    }
  ]
}