{
  "Name": "InstanciateMesh",
  "_id": "8230efa6-11ff-469b-97d4-fdc03a784def",
  "Namespace": "lib.mesh.modify",
  "Description": "This operator instanciates the incoming Mesh at list of of SurfacePoints. This surface points are generated by a number of operators like...\r\n- MeshSurfaceCenters\r\n- Mesh",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "8713396c-24cd-4194-aafb-632e331b3b68",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "\r",
          "\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "    float4 objToWorldRow0 : INSTANCE_OBJ_TO_WORLD_ROW0;\r",
          "    float4 objToWorldRow1 : INSTANCE_OBJ_TO_WORLD_ROW1;\r",
          "    float4 objToWorldRow2 : INSTANCE_OBJ_TO_WORLD_ROW2;\r",
          "    float4 objToWorldRow3 : INSTANCE_OBJ_TO_WORLD_ROW3;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "PS_IN VS( VS_IN input )\r",
          "{\r",
          "    PS_IN output = (PS_IN)0;\r",
          "    float4x4 instanceToWorldMatrix =  float4x4(input.objToWorldRow0,\r",
          "                                              input.objToWorldRow1,\r",
          "                                              input.objToWorldRow2,\r",
          "                                              input.objToWorldRow3);\r",
          "                                              \r",
          "    //instanceToWorldMatrix = instanceToWorldMatrix * ;\r",
          "    output.pos = mul(input.pos, instanceToWorldMatrix);\r",
          "    output.normal = normalize(mul(input.normal, (float3x3)instanceToWorldMatrix));\r",
          "    output.texCoord = input.texCoord;//mul(float4(input.texCoord, 0, 1), textureMatrix).xy;\r",
          "    output.col = input.col;\r",
          "    //output.col = float4(0,1,0,1);\r",
          "    output.tangent = input.tangent;\r",
          "    output.binormal = input.binormal;\r",
          "      \r",
          "    return output;\r",
          "}\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle PS_IN input[3], inout TriangleStream<PS_IN> outputStream)\r",
          "{\r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "        PS_IN vertex = input[i];\r",
          "        outputStream.Append(vertex);\r",
          "    }\r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VS()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          " "
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "InstanceMesh",
      "MetaInstanceID": "c0e7c81d-3fdb-450e-997d-97368c911e7f",
      "DefaultValue": {
        "Type": "Mesh",
        "Value": "Framefield.Core.MeshValue"
      },
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SurfacePoints",
      "MetaInstanceID": "e639f872-4767-4e3f-a8c3-bf17dfe0c1c3",
      "DefaultValue": {
        "Type": "Dynamic",
        "Value": "Framefield.Core.Dynamic"
      },
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "OutputMesh",
      "MetaInstanceID": "9d81571e-5f1c-4d99-9f1c-d8ecf8f0be8f",
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "e0e7ba2e-98cb-4606-9b04-f94f8b99f281",
      "MetaID": "398fe1da-995e-4361-b370-02be9592afd5",
      "Name": "InstanciateMeshFunc",
      "Version": "d064fd08-1017-4533-9022-2f66b21394f7",
      "Type": "Scene",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using SharpDX;",
        "using SharpDX.Direct3D;",
        "using SharpDX.Direct3D11;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.ID398fe1da_995e_4361_b370_02be9592afd5",
        "{",
        "",
        "    public class Class_InstanciateMesh : FXSourceCodeFunction",
        "    {",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            InstanceMesh = 1,",
        "            SurfacePoints = 2",
        "        }",
        "        //<<< _inputids",
        "",
        "",
        "        private bool _firstEval = true;",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var InstanceMesh = inputs[(int)InputId.InstanceMesh].Eval(context).Mesh;",
        "            var SurfacePoints = inputs[(int)InputId.SurfacePoints].Eval(context).Dynamic;  // Needs to be checked for null!",
        "            //<<< _params        ",
        "",
        "            if (InstanceMesh == null  || SurfacePoints == null)",
        "            {",
        "                return context;",
        "            }",
        "            ",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i) ",
        "                {",
        "                    Compile(i);",
        "                }",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            _mesh.AttributesSize = InstanceMesh.AttributesSize;",
        "            _mesh.InputElements = InstanceMesh.InputElements;",
        "            int instanceMeshSize = InstanceMesh.Vertices.Description.SizeInBytes;",
        "            //Logger.Info(this, \"instance mesh size: {0}\", instanceMeshSize);",
        "            Buffer pointBuffer = SurfacePoints.PosBuffer;",
        "            const int instanceDataSize = 4*16; // float4x4",
        "            int numInstances = pointBuffer.Description.SizeInBytes / instanceDataSize;",
        "            _mesh.NumTriangles = InstanceMesh.NumTriangles*numInstances;",
        "            int targetSize = instanceMeshSize * numInstances;",
        "            //Logger.Info(this, \"target size: {0}\", targetSize);",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != targetSize)",
        "            {",
        "                Utilities.DisposeObj(ref _mesh.Vertices);",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                  {",
        "                                                                      BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                      CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                      OptionFlags = ResourceOptionFlags.None,",
        "                                                                      SizeInBytes = targetSize,",
        "                                                                      Usage = ResourceUsage.Default,                                                                      ",
        "                                                                  }) ",
        "                                     {",
        "                                         DebugName = \"MeshReplicateOnSurfaceBuffer\"",
        "                                     };",
        "            }",
        "",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            var pass = technique.GetPassByIndex(0);",
        "           ",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = new InputLayout(context.D3DDevice, pass.Description.Signature, _instanceDataInputElements);",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "",
        "            // Configure Pipeline for stream output",
        "            int streamOutputOffset = 0;",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, streamOutputOffset) });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new [] { InstanceMesh.Vertices, pointBuffer }, new [] {76, instanceDataSize}, new [] {0,0} );",
        "",
        "            // draw",
        "            //Logger.Info(this, \"Draw {0} instances\", numInstances);",
        "            pass.Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.DrawInstanced(InstanceMesh.NumTriangles*3, numInstances, 0, 0);",
        "",
        "            // clean up pipeline",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(null,0,0));",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(1, new VertexBufferBinding(null,0,0));",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            context.Mesh = _mesh;",
        "",
        "            return context;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "        private InputElement[] _instanceDataInputElements = new []",
        "                                                                {",
        "                                                                    new InputElement(\"POSITION\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0, 0),",
        "                                                                    new InputElement(\"NORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 16, 0),",
        "                                                                    new InputElement(\"COLOR\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 28, 0),",
        "                                                                    new InputElement(\"TEXCOORD\", 0, SharpDX.DXGI.Format.R32G32_Float, 44, 0),",
        "                                                                    new InputElement(\"TANGENT\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 52, 0),",
        "                                                                    new InputElement(\"BINORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 64, 0),",
        "                                                                    new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                    new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 1, SharpDX.DXGI.Format.R32G32B32A32_Float, 16,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                    new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 2, SharpDX.DXGI.Format.R32G32B32A32_Float, 32,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                    new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 3, SharpDX.DXGI.Format.R32G32B32A32_Float, 48,",
        "                                                                                     1, InputClassification.PerInstanceData, 1),",
        "                                                                };",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8713396c-24cd-4194-aafb-632e331b3b68",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e0e7ba2e-98cb-4606-9b04-f94f8b99f281"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c0e7c81d-3fdb-450e-997d-97368c911e7f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e0e7ba2e-98cb-4606-9b04-f94f8b99f281"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e639f872-4767-4e3f-a8c3-bf17dfe0c1c3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e0e7ba2e-98cb-4606-9b04-f94f8b99f281"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e0e7ba2e-98cb-4606-9b04-f94f8b99f281",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9d81571e-5f1c-4d99-9f1c-d8ecf8f0be8f"
    }
  ]
}