{
  "Name": "_BendGeometry",
  "_id": "7af20931-583a-44a7-952d-a074c79c7fd6",
  "Namespace": "lib.geometry.modify",
  "Description": "Bends a geomentry around an axis. This is a implementation op. Please use [BendGeometry] that comes with a handy gizmo.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "037b1ef2-8b9d-44c4-a2ba-bd0d5cb872d7",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _parameters\r",
          "float3 Center;",
          "float3 Axis;",
          "float AngleStart;",
          "float AngleEnd;",
          "float3 Orientation;",
          "float SpiralOffset;",
          "float Radius;",
          "float2 Rotate;",
          "//<<< _parameters\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "\r",
          "float Lerp(float a, float b, float t)\r",
          "{\r",
          "    return a + t*(b - a);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "float _noiseTime=0;\r",
          "float _frequency=0;\r",
          "\r",
          "Matrix RotationMatrix(float3 axis, float angle)\r",
          "{\r",
          "    axis = normalize(axis);\r",
          "    float s = sin(angle);\r",
          "    float c = cos(angle);\r",
          "    float oc = 1.0 - c;\r",
          "    \r",
          "    return Matrix(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\r",
          "                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\r",
          "                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\r",
          "                0.0,                                0.0,                                0.0,                                1.0);\r",
          "}\r",
          "\r",
          "//float PointToLineDistance(float3 P, float3 A, float3 B)\r",
          "//{   \r",
          "    //float normalLength = sqrt((B.x - A.x) * (B.x - A.x) + (B.y - A.y) * (B.y - A.y));\r",
          "    //return abs((P.x - A.x) * (B.y - A.y) - (P.y - A.y) * (B.x - A.x)) / normalLength;\r",
          "    \r",
          "  //vec2 lineDir = B - A;\r",
          "  //vec2 perpDir = vec2(lineDir.y, -lineDir.x);\r",
          "  //vec2 dirToPt1 = pt1 - testPt;\r",
          "  //return abs(dot(normalize(perpDir), dirToPt1));    \r",
          "//}\r",
          "\r",
          "\r",
          "float PointToLineDistance( float3 P, float3 lp0, float3 lp1)\r",
          "{\r",
          "     float3 v = lp1 - lp0;\r",
          "     float3 w = P - lp0;\r",
          "\r",
          "     float c1 = dot(w,v);\r",
          "     float c2 = dot(v,v);\r",
          "     float b = c1 / c2;\r",
          "\r",
          "     float3 Pb = lp0 + b * v;\r",
          "     return length(P - Pb);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{\r",
          "    \r",
          "    // For a point P, and a normalized vector V, the point closest to P along V is \r",
          "    // P' = V * dot( P, V ) \r",
          "    //float orientationCenter = dot( Center, Orientation);\r",
          "    \r",
          "    //float distanceToPlane = dot( Center, Orientation);\r",
          "\r",
          "    //float RangeStart = Radius * AngleStart;\r",
          "    //float RangeEnd  = Radius * AngleEnd;\r",
          "    \r",
          "    //float3 spiralDirection = cross( Axis, Orientation); \r",
          "    //float3 vDirection = Orientation;\r",
          "\r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "\t\t\r",
          "        Vertex vertex = input[i];\r",
          "        float4 p = vertex.pos;\r",
          "                \r",
          "        float dRadius = PointToLineDistance( p, Center, Center + Axis) / Radius;\r",
          "        float distanceToNeutral = dot((Center - p),  Orientation);\r",
          "\r",
          "        //vertex.col.r = 0.5 + distanceToNeutral + (Center-p);\r",
          "                \r",
          "        float angle = -distanceToNeutral / Radius;\r",
          "        float angleClamped=  clamp(angle, AngleStart,  AngleEnd + AngleStart + AngleStart );\r",
          "        float restAngle = angleClamped;\r",
          "        \r",
          "        float3 rest = Orientation*(restAngle - angle) * Radius;\r",
          "        \r",
          "        Matrix mRotate = RotationMatrix( Axis, angleClamped);\r",
          "        p = mul(mRotate, p + distanceToNeutral * Orientation - Center - rest); \r",
          "        p.xyz+=Center;\r",
          "\r",
          "        vertex.pos.xyz = p.xyz;        \r",
          "        vertex.normal = mul(mRotate, vertex.normal);\r",
          "        \r",
          "        outputStream.Append(vertex);\r",
          "    }\r",
          "    \r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scene",
      "MetaInstanceID": "2737b693-ff13-4f51-8c88-442b42f5c5a9",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.X",
      "MetaInstanceID": "d0443b01-0d13-45af-a3d4-c969eaf0596f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Y",
      "MetaInstanceID": "14507405-5191-48ef-bc2f-01fb7167dd7e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Z",
      "MetaInstanceID": "d884f10e-7da8-4a02-9875-7589021b309a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Axis.X",
      "MetaInstanceID": "7a3a7870-24bc-48fc-9638-4ca4971f5d55",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Axis.Y",
      "MetaInstanceID": "336e8b53-ff78-4de6-b950-507ff860223e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Axis.Z",
      "MetaInstanceID": "7ed9449a-aace-4bcc-b415-c40c57d96b7d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "AngleStart",
      "MetaInstanceID": "fdd9f108-833e-4c69-b593-7286000bcd44",
      "DefaultValue": {
        "Type": "Float",
        "Value": "-1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "AngleEnd",
      "MetaInstanceID": "6381515d-d017-43d1-a6c8-fd3e687bbc29",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Orientation.X",
      "MetaInstanceID": "db06acec-781a-4d51-9b93-147e318772c7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Orientation.Y",
      "MetaInstanceID": "7db72237-4850-4a64-909c-6e4eb19b8cf1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Orientation.Z",
      "MetaInstanceID": "c2c22da7-adde-44c8-8493-3f232a9ca85d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SpiralOffset",
      "MetaInstanceID": "9ef1ca0a-627e-435c-8df1-ec973ef71915",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Radius",
      "MetaInstanceID": "0f57ffb7-65ac-4cc8-942d-e663f20133ff",
      "DefaultValue": {
        "Type": "Float",
        "Value": "5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate.Direction",
      "MetaInstanceID": "df451a2e-47de-4386-a0d7-c8f50cf7bf18",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate.Tilt",
      "MetaInstanceID": "9ba22e84-0ad3-4996-98ee-18f811ba5995",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "71053813-1f45-41fd-ab17-b1653fa10933",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "15cf7797-6058-4170-83ab-5c49ba2b44cf",
      "MetaID": "25323be5-3502-49b7-9fcf-55381996d152",
      "Name": "_BendGeometryFunc",
      "Version": "65844bbe-48e2-401e-a425-0cd09bdf5468",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using SharpDX.Direct3D;",
        "",
        "namespace Framefield.Core.ID25323be5_3502_49b7_9fcf_55381996d152",
        "{",
        "    public class Class__BendGeometry : FXSourceCodeFunction, IFXSceneSourceCode, IMeshSupplier",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scene = 1,",
        "            CenterX = 2,",
        "            CenterY = 3,",
        "            CenterZ = 4,",
        "            AxisX = 5,",
        "            AxisY = 6,",
        "            AxisZ = 7,",
        "            AngleStart = 8,",
        "            AngleEnd = 9,",
        "            OrientationX = 10,",
        "            OrientationY = 11,",
        "            OrientationZ = 12,",
        "            SpiralOffset = 13,",
        "            Radius = 14,",
        "            RotateDirection = 15,",
        "            RotateTilt = 16",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class__BendGeometry()",
        "        {",
        "            _meshCollector = new MeshCollector(this);",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public void AddMeshesTo(ICollection<Mesh> meshes)",
        "        {",
        "            UpdateMesh(new OperatorPartContext(), OperatorPart.Connections);",
        "            if (_mesh != null)",
        "                meshes.Add(_mesh);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "",
        "                if (_mesh.Vertices != null)",
        "                {",
        "                    // render stream output to screen or whatever target is set",
        "                    context.Renderer.SetupEffect(context);",
        "                    context.Renderer.Render(_mesh, context);",
        "                }",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            if (!Changed && _mesh.Vertices != null)",
        "                return;",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Scene = inputs[(int)InputId.Scene];",
        "            var CenterX = inputs[(int)InputId.CenterX].Eval(context).Value;",
        "            var CenterY = inputs[(int)InputId.CenterY].Eval(context).Value;",
        "            var CenterZ = inputs[(int)InputId.CenterZ].Eval(context).Value;",
        "            var Center = new Vector3(CenterX, CenterY, CenterZ);",
        "            var AxisX = inputs[(int)InputId.AxisX].Eval(context).Value;",
        "            var AxisY = inputs[(int)InputId.AxisY].Eval(context).Value;",
        "            var AxisZ = inputs[(int)InputId.AxisZ].Eval(context).Value;",
        "            var Axis = new Vector3(AxisX, AxisY, AxisZ);",
        "            var AngleStart = inputs[(int)InputId.AngleStart].Eval(context).Value;",
        "            var AngleEnd = inputs[(int)InputId.AngleEnd].Eval(context).Value;",
        "            var OrientationX = inputs[(int)InputId.OrientationX].Eval(context).Value;",
        "            var OrientationY = inputs[(int)InputId.OrientationY].Eval(context).Value;",
        "            var OrientationZ = inputs[(int)InputId.OrientationZ].Eval(context).Value;",
        "            var Orientation = new Vector3(OrientationX, OrientationY, OrientationZ);",
        "            var SpiralOffset = inputs[(int)InputId.SpiralOffset].Eval(context).Value;",
        "            var Radius = inputs[(int)InputId.Radius].Eval(context).Value;",
        "            var RotateDirection = inputs[(int)InputId.RotateDirection].Eval(context).Value;",
        "            var RotateTilt = inputs[(int)InputId.RotateTilt].Eval(context).Value;",
        "            var Rotate = new Vector2(RotateDirection, RotateTilt);",
        "            //<<< _params",
        "",
        "            if (Scene.Func.Changed || _mesh.Vertices == null)",
        "            {",
        "                //Logger.Info(this, \"collect meshes\");",
        "                _meshCollector.Collect(Scene);",
        "                Scene.Func.Changed = false;",
        "            }",
        "",
        "            var inputMesh = _meshCollector.FirstMeshOrDefault;",
        "            if (inputMesh == null)",
        "                return;",
        "",
        "            _mesh.AttributesSize = inputMesh.AttributesSize;",
        "            _mesh.NumTriangles = inputMesh.NumTriangles;",
        "            _mesh.InputElements = inputMesh.InputElements;",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != inputMesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                if (_mesh.Vertices != null)",
        "                    _mesh.Vertices.Dispose();",
        "",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                    {",
        "                                                                        BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                        CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                        OptionFlags = ResourceOptionFlags.None,",
        "                                                                        SizeInBytes = _mesh.NumTriangles*inputMesh.AttributesSize*3,",
        "                                                                        Usage = ResourceUsage.Default",
        "                                                                    });",
        "            }",
        "            ",
        "            var up = new Vector3(0,1,0);",
        "            var m =  Matrix.Identity;",
        "            Matrix.RotationAxis( ref up, RotateDirection / 180f*3.141578f, out m);",
        "            ",
        "            var rotatedOrientation  = Vector3.Transform( Orientation, m);",
        "            var rotatedAxis = Vector3.Transform( Axis, m);",
        "            ",
        "            SetScalar(\"AngleStart\", AngleStart / 180f * 3.141578f);",
        "            SetScalar(\"AngleEnd\",   AngleEnd / 180f * 3.141578f);",
        "            SetScalar(\"SpiralOffset\", SpiralOffset);",
        "            SetScalar(\"Radius\",     Radius);",
        "            SetVector(\"Center\",     Center);",
        "            SetVector(\"Orientation\", Vector3.Normalize( new Vector3( rotatedOrientation.X , rotatedOrientation.Y, rotatedOrientation.Z)));",
        "            SetVector(\"Axis\",       Vector3.Normalize( new Vector3( rotatedAxis.X, rotatedAxis.Y, rotatedAxis.Z)));",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, 0) });",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(inputMesh.Vertices, inputMesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw(_mesh.NumTriangles*3, 0);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "        private MeshCollector _meshCollector;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "15cf7797-6058-4170-83ab-5c49ba2b44cf",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "71053813-1f45-41fd-ab17-b1653fa10933"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "037b1ef2-8b9d-44c4-a2ba-bd0d5cb872d7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15cf7797-6058-4170-83ab-5c49ba2b44cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2737b693-ff13-4f51-8c88-442b42f5c5a9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15cf7797-6058-4170-83ab-5c49ba2b44cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d0443b01-0d13-45af-a3d4-c969eaf0596f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15cf7797-6058-4170-83ab-5c49ba2b44cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "14507405-5191-48ef-bc2f-01fb7167dd7e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15cf7797-6058-4170-83ab-5c49ba2b44cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d884f10e-7da8-4a02-9875-7589021b309a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15cf7797-6058-4170-83ab-5c49ba2b44cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7a3a7870-24bc-48fc-9638-4ca4971f5d55",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15cf7797-6058-4170-83ab-5c49ba2b44cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "336e8b53-ff78-4de6-b950-507ff860223e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15cf7797-6058-4170-83ab-5c49ba2b44cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7ed9449a-aace-4bcc-b415-c40c57d96b7d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15cf7797-6058-4170-83ab-5c49ba2b44cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "fdd9f108-833e-4c69-b593-7286000bcd44",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15cf7797-6058-4170-83ab-5c49ba2b44cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6381515d-d017-43d1-a6c8-fd3e687bbc29",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15cf7797-6058-4170-83ab-5c49ba2b44cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "db06acec-781a-4d51-9b93-147e318772c7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15cf7797-6058-4170-83ab-5c49ba2b44cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7db72237-4850-4a64-909c-6e4eb19b8cf1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15cf7797-6058-4170-83ab-5c49ba2b44cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c2c22da7-adde-44c8-8493-3f232a9ca85d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15cf7797-6058-4170-83ab-5c49ba2b44cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9ef1ca0a-627e-435c-8df1-ec973ef71915",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15cf7797-6058-4170-83ab-5c49ba2b44cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0f57ffb7-65ac-4cc8-942d-e663f20133ff",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15cf7797-6058-4170-83ab-5c49ba2b44cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "df451a2e-47de-4386-a0d7-c8f50cf7bf18",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15cf7797-6058-4170-83ab-5c49ba2b44cf"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9ba22e84-0ad3-4996-98ee-18f811ba5995",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "15cf7797-6058-4170-83ab-5c49ba2b44cf"
    }
  ]
}