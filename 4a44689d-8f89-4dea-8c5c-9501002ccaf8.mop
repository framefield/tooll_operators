{
  "Name": "RenderCubemapInContext",
  "_id": "4a44689d-8f89-4dea-8c5c-9501002ccaf8",
  "Namespace": "user.pixtur.",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "d806e437-793e-480b-b58d-cd41d9002e7f",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 worldToCameraMatrix;\r",
          "float4x4 objectToWorldMatrix;\r",
          "float4x4 projMatrix;\r",
          "float4x4 textureMatrix;\r",
          "\r",
          "Texture2D txDiffuse;\r",
          "TextureCube CubeMap;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal: NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD;\r",
          "    float3 tangent: TANGENT;\r",
          "    float3 binormal: BINORMAL;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float4 col : COLOR;\r",
          "    float3 normal : NORMAL;\r",
          "    float2 texCoord: TEXCOORD0;\r",
          "};\r",
          "\r",
          "PS_IN VS( VS_IN input )\r",
          "{\r",
          "    PS_IN output = (PS_IN)0;\r",
          "\r",
          "    output.pos = mul(input.pos, objectToWorldMatrix);\r",
          "    output.pos = mul(output.pos, worldToCameraMatrix);\r",
          "    output.pos = mul(output.pos, projMatrix);\r",
          "    output.normal = mul(input.normal, (float3x3)objectToWorldMatrix);\r",
          "    output.col = input.col;\r",
          "    output.texCoord = mul(float4(input.texCoord.xy, 0, 1), textureMatrix).xy;\r",
          "\r",
          "    return output;\r",
          "}\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    return CubeMap.Sample(samLinear, normalize(input.normal))*input.col;// + float4(0,0,0,1);\r",
          "}\r",
          "\r",
          "technique10 Render\r",
          "{\r",
          "    pass P0\r",
          "    {\r",
          "        SetGeometryShader( 0 );\r",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );\r",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );\r",
          "    }\r",
          "}\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scene",
      "MetaInstanceID": "3252841a-9023-4370-8983-319a1df259d6",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "14d8ab29-88df-457c-a034-b6be23aacf2d",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "601f9315-dc0d-4db9-9c8b-af9e78fe2660",
      "MetaID": "0a0286c6-a72a-40d2-ae62-c46990e8dbca",
      "Name": "RenderCubemapInContextFunc",
      "Version": "d3502abb-d049-412d-b5a3-47157a4caa72",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.Rendering;",
        "",
        "namespace Framefield.Core.ID0a0286c6_a72a_40d2_ae62_c46990e8dbca",
        "{",
        "    public class Class_RenderCubemapInContext : FXSourceCodeFunction, IFXSceneSourceCode",
        "    {",
        "",
        "        class Renderer : BaseRenderer",
        "        {",
        "        }",
        "",
        "        public override void Dispose() {",
        "            Utilities.DisposeObj(ref _renderer);",
        "            base.Dispose();",
        "        }",
        "",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scene = 1",
        "        }",
        "        //<<< _inputids",
        "",
        "        bool _firstEval = true;",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Scene = inputs[(int)InputId.Scene];",
        "            //<<< _params",
        "",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i) {",
        "                    Compile(i);",
        "                }",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "            ",
        "            var cubeMapView = context.SkySphereSRV;",
        "            _effect.GetVariableByName(\"CubeMap\").AsShaderResource().SetResource(cubeMapView);",
        "",
        "            using (new PropertyStasher<OperatorPartContext>(context, \"Effect\", \"Renderer\"))",
        "            {",
        "                context.Effect = _effect;",
        "                context.Renderer = _renderer;",
        "                Scene.Eval(context);",
        "            }",
        "            return context;",
        "        }",
        "",
        "        private Renderer _renderer = new Renderer();",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "601f9315-dc0d-4db9-9c8b-af9e78fe2660",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "14d8ab29-88df-457c-a034-b6be23aacf2d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d806e437-793e-480b-b58d-cd41d9002e7f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "601f9315-dc0d-4db9-9c8b-af9e78fe2660"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3252841a-9023-4370-8983-319a1df259d6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "601f9315-dc0d-4db9-9c8b-af9e78fe2660"
    }
  ]
}