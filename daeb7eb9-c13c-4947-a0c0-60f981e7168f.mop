{
  "Name": "CircularReplicate",
  "_id": "daeb7eb9-c13c-4947-a0c0-60f981e7168f",
  "Namespace": "lib.mesh.modify",
  "Description": "Instanciates the incoming mesh. ",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "ccacbffe-38a4-476a-868b-bbcc82dc4624",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 objectToWorldMatrix;\r",
          "float4x4 worldToCameraMatrix;\r",
          "float4x4 cameraToObjectMatrix; // modelview inverse\r",
          "float4x4 projMatrix;\r",
          "float4x4 textureMatrix;\r",
          "\r",
          "/*\r",
          "struct PointLight\r",
          "{\r",
          "    float4 position;\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float4 attenuation;\r",
          "};\r",
          "\r",
          "struct SpotLight\r",
          "{\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float constantAttenuation;\r",
          "    float linearAttenuation;\r",
          "    float quadraticAttenuation;\r",
          "    float spotCutoff;\r",
          "    float spotCosCutoff;\r",
          "    float spotExponent;\r",
          "};\r",
          "\r",
          "cbuffer FogSettings\r",
          "{\r",
          "    float4 fogColor;\r",
          "    float fogStart;\r",
          "    float fogEnd;\r",
          "    float fogScale;\r",
          "}\r",
          "\r",
          "cbuffer MaterialBuffer\r",
          "{\r",
          "    float4 materialAmbient;\r",
          "    float4 materialDiffuse;\r",
          "    float4 materialSpecular;\r",
          "    float4 materialEmission;\r",
          "    float materialShininess;\r",
          "};\r",
          "\r",
          "\r",
          "cbuffer PointLightsBuffer\r",
          "{\r",
          "    int numPointLights;\r",
          "    PointLight pointLights[3];\r",
          "};\r",
          "\r",
          "\r",
          "Texture2D txDiffuse;\r",
          "*/\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "    float4 objToWorldRow0 : INSTANCE_OBJ_TO_WORLD_ROW0;\r",
          "    float4 objToWorldRow1 : INSTANCE_OBJ_TO_WORLD_ROW1;\r",
          "    float4 objToWorldRow2 : INSTANCE_OBJ_TO_WORLD_ROW2;\r",
          "    float4 objToWorldRow3 : INSTANCE_OBJ_TO_WORLD_ROW3;\r",
          "};\r",
          "\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "PS_IN VS( VS_IN input )\r",
          "{\r",
          "    PS_IN output = (PS_IN)0;\r",
          "    float4x4 instanceToWorldMatrix = float4x4(input.objToWorldRow0,\r",
          "                                              input.objToWorldRow1,\r",
          "                                              input.objToWorldRow2,\r",
          "                                              input.objToWorldRow3);\r",
          "    output.pos = mul(input.pos, instanceToWorldMatrix);\r",
          "    \r",
          "    float4 n4 = float4(input.normal.xyz,0);\r",
          "    output.normal = normalize(mul(n4, instanceToWorldMatrix));\r",
          "    output.texCoord = mul(float4(input.texCoord, 0, 1), textureMatrix).xy;\r",
          "    output.col = input.col;\r",
          "    output.tangent = input.tangent;\r",
          "    output.binormal = input.binormal;\r",
          "      \r",
          "    return output;\r",
          "}\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle PS_IN input[3], inout TriangleStream<PS_IN> outputStream)\r",
          "{\r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "        PS_IN vertex = input[i];\r",
          "        outputStream.Append(vertex);\r",
          "    }\r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VS()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MeshInput",
      "MetaInstanceID": "2b6e48c9-c27b-4403-a3a2-ed2b838ccb8c",
      "DefaultValue": {
        "Type": "Mesh",
        "Value": "Framefield.Core.MeshValue"
      },
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206",
      "IsMultiInput": "True",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Radius",
      "MetaInstanceID": "b2580cc1-663d-4a72-ba0a-0e5bcd5efa43",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Count.X",
      "MetaInstanceID": "7c920f79-ad01-4b8f-969d-5353a814420b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "50"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.X",
      "MetaInstanceID": "a4aeea2d-9dfe-4d12-a68d-88f02ce0ed6c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Y",
      "MetaInstanceID": "b861c939-e1ee-4898-8961-258e0017e80e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Count.Y",
      "MetaInstanceID": "5885990d-8026-44f0-b76e-58b3ea4088cc",
      "DefaultValue": {
        "Type": "Float",
        "Value": "50"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Z",
      "MetaInstanceID": "7275e22d-fc26-40d7-84fa-bd7d0dce3f8d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Count.Z",
      "MetaInstanceID": "8dcb4a9b-8ae9-473c-99e8-6a86a26b1668",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spread.X",
      "MetaInstanceID": "151d94fc-378b-42fa-8709-81bca5f08a3e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spread.Y",
      "MetaInstanceID": "12484ead-fcf9-4af6-a039-e8920f0ff2d0",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spread.Z",
      "MetaInstanceID": "717b7cd5-8aed-424c-9255-96b6f1e29bf8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scatter.X",
      "MetaInstanceID": "9e595f4a-b6ad-49bb-9bf1-0ff06ed07550",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scatter.Y",
      "MetaInstanceID": "bcfe95d6-6230-4488-89ce-9f4dab1ad9ab",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scatter.Z",
      "MetaInstanceID": "66e1ca02-4d1f-4c6d-bc1b-732b8875fadb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scale",
      "MetaInstanceID": "c304e070-e850-4f26-9ad1-6fa77e7b3c70",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ScaleRandom",
      "MetaInstanceID": "134fa3c2-dcfb-49a0-8b36-a583272f3e4b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Orientation",
      "MetaInstanceID": "30da0ff9-1f2d-44ff-aa96-c988a45f214b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Fixed",
          "Value": "0"
        },
        {
          "Name": "FaceCamera",
          "Value": "1"
        }
      ]
    },
    {
      "Name": "Spin.X",
      "MetaInstanceID": "9563e7f8-4546-41f2-a023-0958b67d9311",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spin.Y",
      "MetaInstanceID": "cdd9c084-af99-4081-9d36-de20e1b17191",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spin.Z",
      "MetaInstanceID": "76b33f78-e440-4bd4-bf60-a35924bed1cf",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SpinRandom.X",
      "MetaInstanceID": "cc496291-cf72-4393-a4b3-b98c360e30ea",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SpinRandom.Y",
      "MetaInstanceID": "1df42a28-b9f4-4b72-a0fe-4adbf69538e2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SpinRandom.Z",
      "MetaInstanceID": "0d8d2e67-08d4-493e-8197-cde753973324",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Seed",
      "MetaInstanceID": "4654913e-1b26-4cbb-8d59-a1d88e21854e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Pattern",
      "MetaInstanceID": "f794d61c-888c-403d-a89a-50c04a220a77",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Grid",
          "Value": "0"
        },
        {
          "Name": "Triangle",
          "Value": "1"
        },
        {
          "Name": "Hexa",
          "Value": "2"
        },
        {
          "Name": "Spiral",
          "Value": "3"
        }
      ]
    },
    {
      "Name": "SpinEffect",
      "MetaInstanceID": "ab496b09-7220-4287-9469-07f9a54c15c9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ScaleEffect",
      "MetaInstanceID": "9c75ef34-e8f3-4559-bf8b-2c7f8dac43f6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EffectCenter.X",
      "MetaInstanceID": "685b59f5-9358-47db-bacd-4776b1153430",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EffectCenter.Y",
      "MetaInstanceID": "3e77da91-a78f-46c4-b5ca-67b7aa17b91b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EffectCenter.Z",
      "MetaInstanceID": "464cc66c-cf66-4d90-a37d-3c8e968673af",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EffectRange.Radius",
      "MetaInstanceID": "f8bc19c1-4d81-46a5-8278-bc2c0f651a4b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EffectRange.FallOff",
      "MetaInstanceID": "b7ecc63c-4825-4a8c-8770-d6b38bb9017e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EffectRange.Scatter",
      "MetaInstanceID": "bc41a0d4-af1f-437d-b6ce-d5a35fa3d56b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Angle.Start",
      "MetaInstanceID": "00183c6e-9a34-45d8-ac8a-f7df22bbe9e4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Angle.Amount",
      "MetaInstanceID": "e584a356-ace4-4f89-9557-50b557a4c2a7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "360"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spiral.X",
      "MetaInstanceID": "f87eb04d-0314-4d28-80ca-554e4725f268",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spiral.Y",
      "MetaInstanceID": "1d2dc625-dfed-4562-a474-3b091f31c1bd",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spiral.Z",
      "MetaInstanceID": "7e8aea22-b508-4820-8668-d57830b0079c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spacing",
      "MetaInstanceID": "03227b47-3a64-48d7-9651-a6a12bf9955f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Even",
          "Value": "0"
        },
        {
          "Name": "Sparse",
          "Value": "1"
        },
        {
          "Name": "Skip",
          "Value": "2"
        }
      ]
    }
  ],
  "Outputs": [
    {
      "Name": "SceneTransformOut",
      "MetaInstanceID": "a18c37d3-3270-44a4-af95-bb43954b1860",
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6",
      "MetaID": "30747e71-e57a-4198-aa79-1cb99c56875c",
      "Name": "CircularReplicateFunc",
      "Version": "91e2077e-7169-4716-b9f2-2e2fa0c5c83e",
      "Type": "Scene",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using SharpDX;",
        "using SharpDX.Direct3D;",
        "using SharpDX.Direct3D11;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.ID30747e71_e57a_4198_aa79_1cb99c56875c",
        "{",
        "    public class Class_CircularReplicate : FXSourceCodeFunction",
        "    {",
        "        #region Renderer",
        "        public class Renderer : BaseRenderer",
        "        {",
        "            public override void SetupEffect(OperatorPartContext context)",
        "            {",
        "                base.SetupEffect(context);",
        "                try",
        "                {",
        "                    SetupMaterialConstBuffer(context);",
        "                    SetupFogSettingsConstBuffer(context);",
        "                    SetupPointLightsConstBuffer(context);",
        "                }",
        "                catch (Exception e)",
        "                {",
        "                    Logger.Error(ParentFunc, \"Error building constant buffer: {0} - Source: {1}\", e.Message, e.Source);",
        "                }",
        "            }",
        "            public OperatorPart.Function ParentFunc {get;set;}            ",
        "        }",
        "        #endregion",
        "",
        "        public Class_CircularReplicate()",
        "        {",
        "            _renderer = new Renderer(){ParentFunc = this};",
        "        }",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _renderer);",
        "            base.Dispose();",
        "        }",
        "",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            CountX = 1,",
        "            CountY = 2,",
        "            CountZ = 3,",
        "            SpreadX = 4,",
        "            SpreadY = 5,",
        "            ScatterX = 6,",
        "            SpreadZ = 7,",
        "            ScatterY = 8,",
        "            ScatterZ = 9,",
        "            ScaleRandom = 10,",
        "            Orientation = 11,",
        "            SpinX = 12,",
        "            SpinRandomX = 13,",
        "            Seed = 14,",
        "            MeshInput = 15,",
        "            Scale = 16,",
        "            Pattern = 17,",
        "            CenterX = 18,",
        "            CenterY = 19,",
        "            CenterZ = 20,",
        "            SpinEffect = 21,",
        "            ScaleEffect = 22,",
        "            EffectCenterX = 23,",
        "            EffectCenterY = 24,",
        "            EffectCenterZ = 25,",
        "            EffectRangeRadius = 26,",
        "            EffectRangeFallOff = 27,",
        "            SpinY = 28,",
        "            SpinZ = 29,",
        "            SpinRandomY = 30,",
        "            SpinRandomZ = 31,",
        "            AngleStart = 32,",
        "            AngleAmount = 33,",
        "            Radius = 34,",
        "            SpiralX = 35,",
        "            SpiralZ = 36,",
        "            SpiralY = 37,",
        "            Spacing = 38,",
        "            EffectRangeScatter = 39",
        "        }",
        "        //<<< _inputids",
        "",
        "",
        "        private bool _firstEval = true;",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var CountX = inputs[(int)InputId.CountX].Eval(context).Value;",
        "            var CountY = inputs[(int)InputId.CountY].Eval(context).Value;",
        "            var CountZ = inputs[(int)InputId.CountZ].Eval(context).Value;",
        "            var Count = new Vector3(CountX, CountY, CountZ);",
        "            var SpreadX = inputs[(int)InputId.SpreadX].Eval(context).Value;",
        "            var SpreadY = inputs[(int)InputId.SpreadY].Eval(context).Value;",
        "            var SpreadZ = inputs[(int)InputId.SpreadZ].Eval(context).Value;",
        "            var Spread = new Vector3(SpreadX, SpreadY, SpreadZ);",
        "            var ScatterX = inputs[(int)InputId.ScatterX].Eval(context).Value;",
        "            var ScatterY = inputs[(int)InputId.ScatterY].Eval(context).Value;",
        "            var ScatterZ = inputs[(int)InputId.ScatterZ].Eval(context).Value;",
        "            var Scatter = new Vector3(ScatterX, ScatterY, ScatterZ);",
        "            var ScaleRandom = inputs[(int)InputId.ScaleRandom].Eval(context).Value;",
        "            var Orientation = (int) inputs[(int)InputId.Orientation].Eval(context).Value;",
        "            var SpinX = inputs[(int)InputId.SpinX].Eval(context).Value;",
        "            var SpinY = inputs[(int)InputId.SpinY].Eval(context).Value;",
        "            var SpinZ = inputs[(int)InputId.SpinZ].Eval(context).Value;",
        "            var Spin = new Vector3(SpinX, SpinY, SpinZ);",
        "            var SpinRandomX = inputs[(int)InputId.SpinRandomX].Eval(context).Value;",
        "            var SpinRandomY = inputs[(int)InputId.SpinRandomY].Eval(context).Value;",
        "            var SpinRandomZ = inputs[(int)InputId.SpinRandomZ].Eval(context).Value;",
        "            var SpinRandom = new Vector3(SpinRandomX, SpinRandomY, SpinRandomZ);",
        "            var Seed = inputs[(int)InputId.Seed].Eval(context).Value;",
        "            var MeshInput = inputs[(int)InputId.MeshInput].Eval(context).Mesh;",
        "            var Scale = inputs[(int)InputId.Scale].Eval(context).Value;",
        "            var Pattern = (int) inputs[(int)InputId.Pattern].Eval(context).Value;",
        "            var CenterX = inputs[(int)InputId.CenterX].Eval(context).Value;",
        "            var CenterY = inputs[(int)InputId.CenterY].Eval(context).Value;",
        "            var CenterZ = inputs[(int)InputId.CenterZ].Eval(context).Value;",
        "            var Center = new Vector3(CenterX, CenterY, CenterZ);",
        "            var SpinEffect = inputs[(int)InputId.SpinEffect].Eval(context).Value;",
        "            var ScaleEffect = inputs[(int)InputId.ScaleEffect].Eval(context).Value;",
        "            var EffectCenterX = inputs[(int)InputId.EffectCenterX].Eval(context).Value;",
        "            var EffectCenterY = inputs[(int)InputId.EffectCenterY].Eval(context).Value;",
        "            var EffectCenterZ = inputs[(int)InputId.EffectCenterZ].Eval(context).Value;",
        "            var EffectCenter = new Vector3(EffectCenterX, EffectCenterY, EffectCenterZ);",
        "            var EffectRangeRadius = inputs[(int)InputId.EffectRangeRadius].Eval(context).Value;",
        "            var EffectRangeFallOff = inputs[(int)InputId.EffectRangeFallOff].Eval(context).Value;",
        "            var EffectRangeScatter = inputs[(int)InputId.EffectRangeScatter].Eval(context).Value;",
        "            var EffectRange = new Vector3(EffectRangeRadius, EffectRangeFallOff, EffectRangeScatter);",
        "            var AngleStart = inputs[(int)InputId.AngleStart].Eval(context).Value;",
        "            var AngleAmount = inputs[(int)InputId.AngleAmount].Eval(context).Value;",
        "            var Angle = new Vector2(AngleStart, AngleAmount);",
        "            var Radius = inputs[(int)InputId.Radius].Eval(context).Value;",
        "            var SpiralX = inputs[(int)InputId.SpiralX].Eval(context).Value;",
        "            var SpiralZ = inputs[(int)InputId.SpiralZ].Eval(context).Value;",
        "            var SpiralY = inputs[(int)InputId.SpiralY].Eval(context).Value;",
        "            var Spiral = new Vector3(SpiralX, SpiralZ, SpiralY);",
        "            var Spacing = (int) inputs[(int)InputId.Spacing].Eval(context).Value;",
        "            //<<< _params        ",
        "",
        "",
        "            //CountX = (float)Math.Abs(AngleAmount * Math.PI * 2 * Radius / SpreadX);",
        "",
        "            var intCountX = (int)(Utilities.Clamp(CountX, 1, 1000));",
        "            var intCountY = (int)(Utilities.Clamp(CountY, 1, 1000));",
        "            var intCountZ = (int)(Utilities.Clamp(CountZ, 1, 1000));",
        "",
        "            var numInstances = intCountX * intCountY * intCountZ;",
        "",
        "            if (MeshInput == null || numInstances == 0 )",
        "            {",
        "                //_bakedMesh.NumTriangles = 0;            ",
        "                context.Mesh = null;",
        "                return context;",
        "            }",
        "",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i) {",
        "                    Compile(i);",
        "                    ",
        "                }",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            const float toRad = (float) Math.PI/180f;",
        "",
        "            var prevTransform = context.ObjectTWorld;",
        "            var rand = new Random((int) Seed);",
        "",
        "            var instancedMesh = MeshInput;",
        "            ",
        "            var alwaysNeedsUpdate = false; //Orientation > 0.5;",
        "",
        "            if(!Changed && !alwaysNeedsUpdate) {",
        "                context.Mesh = _bakedMesh;",
        "                return context;",
        "            }",
        "",
        "",
        "            // Compute size of required vertex buffer and create it",
        "            _bakedMesh.NumTriangles = instancedMesh.NumTriangles * numInstances;",
        "",
        "            _bakedMesh.AttributesSize = instancedMesh.AttributesSize;",
        "            _bakedMesh.InputElements = instancedMesh.InputElements;",
        "            ",
        "            if (_bakedMesh.Vertices == null || _bakedMesh.Vertices.Description.SizeInBytes != instancedMesh.Vertices.Description.SizeInBytes * numInstances)",
        "            {",
        "                Utilities.DisposeObj(ref _bakedMesh.Vertices);",
        "                _bakedMesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                  {",
        "                                                                      BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                      CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                      OptionFlags = ResourceOptionFlags.None,",
        "                                                                      SizeInBytes = instancedMesh.Vertices.Description.SizeInBytes * numInstances,",
        "                                                                      Usage = ResourceUsage.Default",
        "                                                                  });",
        "            }",
        "",
        "            // instance data buffer",
        "            const int instanceDataSize = 4*16; // float4x4",
        "            var streamSize = numInstances * instanceDataSize;",
        "            if (_instanceDataBuffer == null || _instanceDataBuffer.Description.SizeInBytes != streamSize)",
        "            {",
        "                Utilities.DisposeObj(ref _instanceDataBuffer);",
        "                _instanceDataBuffer = new Buffer(context.D3DDevice, streamSize, ResourceUsage.Dynamic, BindFlags.VertexBuffer,",
        "                                                 CpuAccessFlags.Write, ResourceOptionFlags.None, instanceDataSize);",
        "            }",
        "",
        "            var zeroTransform = Matrix.Identity;",
        "            //Matrix.ScaleTransform(0,0,0, out zeroTransform);",
        "",
        "            var validInstanceCount = 0;",
        "",
        "            DataStream instanceDataStream;",
        "            context.D3DDevice.ImmediateContext.MapSubresource(_instanceDataBuffer, MapMode.WriteDiscard, MapFlags.None, out instanceDataStream);",
        "            using (instanceDataStream)",
        "            {",
        "                instanceDataStream.Position = 0;",
        "                ",
        "                                ",
        "                for(var indexY = 0; indexY < intCountY; indexY ++) {",
        "                    for(var indexZ = 0; indexZ < intCountZ; indexZ ++) {",
        "                        float angle = -AngleStart * toRad +  SpiralY * toRad * indexY;",
        "                        float lastAngle = angle;",
        "",
        "                        for(var indexX = 0; indexX < intCountX; indexX ++) {",
        "                        ",
        "                            var fx = (indexX + 0.5f) / CountX;",
        "                            var fy = (indexY + 0.5f) / CountY;",
        "                            var fz = (indexZ + 0.5f) / CountZ;",
        "",
        "                            float r = (float)(Radius * (1 + indexX * SpiralX * SpreadX)) ",
        "                                    + (fy - 0.5f) * (SpreadY * (CountY));",
        "                            ",
        "                            ",
        "                            if(indexX == 0) ",
        "                            {",
        "                                lastAngle = angle;",
        "                            }",
        "                            else ",
        "                            {",
        "                                if(Spacing < 0.5f) {",
        "                                    angle = -AngleStart * toRad + (toRad* SpreadX * indexX) + SpiralY * toRad * indexY;",
        "                                    ",
        "                                }",
        "                                else if (Spacing < 1.5f) {",
        "                                    var optimalAngle = (float)Math.Atan(  SpreadX / r );",
        "                                    angle+= optimalAngle;",
        "                                }",
        "                                ",
        "                                else  {",
        "                                    angle = -AngleStart * toRad + (toRad* SpreadX * indexX) + SpiralY * toRad * indexY;",
        "                                    var dA = angle - lastAngle;                             ",
        "                                    if(Math.Abs(dA) < Math.Abs(SpreadX * toRad * (1-fy)) * 3.1415f) ",
        "                                    {",
        "                                        continue;",
        "                                    }",
        "                                }",
        "                                lastAngle = angle;",
        "                            }",
        "                            ",
        "                            ",
        "                            if(angle >  AngleAmount * toRad  - AngleStart * toRad + SpiralY * toRad * indexY ) {                                ",
        "                                break;",
        "                            }",
        "                            ",
        "                            ",
        "                            var t = new Vector3( ",
        "                                (float)Math.Sin( angle ) * r,",
        "                                (float)Math.Cos( angle ) * r,",
        "                                (fz - 0.5f) * (SpreadZ * CountZ) + indexX * SpiralZ",
        "                            );",
        "                            ",
        "                            Matrix transform;",
        "                            ",
        "                            //var rot = new Vector3( ",
        "                            //    0,0, -angle",
        "                            //);",
        "                            ",
        "                            ",
        "                            ",
        "                            // Effects",
        "                            var effectR = (t-EffectCenter).Length() + (float)(rand.NextDouble()-0.5f) * EffectRangeScatter;",
        "                            t+= Center;",
        "                            var effectF = Fade( Utilities.Clamp( (effectR - EffectRangeRadius) / -EffectRangeFallOff, 0,1));                            ",
        "                            ",
        "                            //var effectR = (t-EffectCenter).Length();",
        "                            //t+= Center;",
        "                            //var effectF = Fade( Utilities.Clamp( (effectR - EffectRangeRadius) / -EffectRangeFallOff, 0,1));",
        "                            ",
        "",
        "                            float s = (Scale + (float)rand.NextDouble() * ScaleRandom) * (effectF * ScaleEffect+1);",
        "                            var scale = new Vector3(s, s, s);",
        "                            ",
        "                            Matrix.RotationYawPitchRoll(0,",
        "                                                        0,",
        "                                                        -angle ,",
        "                                                        out transform);",
        "                                                                            ",
        "                            var tSpin= Matrix.RotationYawPitchRoll(",
        "                                (SpinX + (float)rand.NextDouble() * SpinRandomX + effectF * SpinEffect) * toRad,",
        "                                (SpinY + (float)rand.NextDouble() * SpinRandomY) * toRad,",
        "                                (SpinZ + (float)rand.NextDouble() * SpinRandomZ) * toRad",
        "                            );",
        "                            transform =  tSpin * transform;            ",
        "",
        "",
        "                            var tScale = Matrix.Scaling( scale.X, scale.Y, scale.Z);",
        "                            transform= tScale * transform;                            ",
        "    ",
        "                            var tScatter= Matrix.Translation(new Vector3((float)(rand.NextDouble() -0.5f) * ( ScatterX),",
        "                                                                        (float)(rand.NextDouble() -0.5f) * ( ScatterY),",
        "                                                                        (float)(rand.NextDouble() -0.5f) * ( ScatterZ)));",
        "                            transform =  tScatter * transform;",
        "",
        "",
        "        ",
        "                            transform *= Matrix.Transformation(new Vector3(), new Quaternion(), new Vector3(1,1,1), new Vector3(), new Quaternion(), t);",
        "                            instanceDataStream.Write(transform);",
        "                            validInstanceCount++;",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "            context.D3DDevice.ImmediateContext.UnmapSubresource(_instanceDataBuffer, 0);",
        "",
        "            var prevEffect = context.Effect;",
        "            var prevRenderer = context.Renderer;",
        "            context.Effect = _effect;",
        "            context.Renderer = _renderer;",
        "",
        "            try",
        "            {",
        "                _renderer.SetupEffect(context);",
        "",
        "                if (context.DepthStencilView != null)",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.DepthStencilView, context.RenderTargetView);",
        "                else",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.RenderTargetView);",
        "",
        "                if (context.BlendState != null)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.BlendState = context.BlendState;",
        "                }",
        "",
        "                if (context.DepthStencilState != null)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = context.DepthStencilState;",
        "                }",
        "",
        "                if (context.RasterizerState != null)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.Rasterizer.State = context.RasterizerState;",
        "                }",
        "",
        "                var technique = _effect.GetTechniqueByIndex(0);",
        "                var pass = technique.GetPassByIndex(0);",
        "",
        "                context.D3DDevice.ImmediateContext.Rasterizer.SetViewport(context.Viewport);",
        "                context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = new InputLayout(context.D3DDevice, pass.Description.Signature, _instanceDataInputElements);",
        "                context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "                context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new [] { instancedMesh.Vertices, _instanceDataBuffer}, new [] {76, instanceDataSize}, new [] {0,0} );",
        "                ",
        "                // Configure Pipeline for stream output",
        "                context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_bakedMesh.Vertices, 0) });",
        "                pass.Apply(context.D3DDevice.ImmediateContext);",
        "    ",
        "                // Draw mesh into vertex buffer",
        "                context.D3DDevice.ImmediateContext.DrawInstanced(instancedMesh.NumTriangles*3, validInstanceCount, 0, 0);",
        "                context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "                ",
        "                _bakedMesh.NumTriangles = instancedMesh.NumTriangles * validInstanceCount;",
        "                ",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this,\"Replicate2 - An error occured during evaluation: {0}\", exception.Message);",
        "            }",
        "",
        "            context.Effect = prevEffect;",
        "            context.Renderer = prevRenderer;",
        "            ",
        "            context.Mesh = _bakedMesh;",
        "            Changed =false;",
        "            return context;",
        "        }",
        "",
        "",
        "        #region helpers",
        "",
        "        public float Noise(int x, int seed)",
        "        {",
        "            int n = x + seed*137;",
        "            n = (n << 13) ^ n;",
        "            return (float) (1.0 - ((n*(n*n*15731 + 789221) + 1376312589) & 0x7fffffff)/1073741824.0);",
        "        }",
        "",
        "        public float Lerp(float a, float b, float t)",
        "        {",
        "            return a + t*(b - a);",
        "        }",
        "",
        "        public float Fade(float t)",
        "        {",
        "            return t*t*t*(t*(t*6 - 15) + 10);",
        "        }",
        "",
        "        public float Interpolate(float a, float b, float t)",
        "        {",
        "            float ft = t*3.1415927f;",
        "            float f = (float) (1.0 - Math.Cos(ft))*0.5f;",
        "            return a*(1.0f - f) + b*f;",
        "        }",
        "",
        "        private float getNoise(float value)",
        "        {",
        "            float noiseSum = 0.0f;",
        "            value *= _frequency;",
        "            value += _noiseTime+10000;",
        "",
        "",
        "            noiseSum = Lerp(Noise((int) value, SEED),",
        "                            Noise((int) value + 1, SEED),",
        "                            Fade(value - (float) Math.Floor(value)));",
        "            return noiseSum;",
        "        }",
        "",
        "        #endregion",
        "",
        "        private Mesh _bakedMesh = new Mesh();",
        "        private const int SEED = 0;",
        "        private float _frequency = 1;",
        "        private float _noiseTime;",
        "        private OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier> _meshCollector = new OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier>();",
        "        private Renderer _renderer;",
        "        private Buffer _instanceDataBuffer;",
        "        private InputElement[] _instanceDataInputElements ",
        "            = new []",
        "            {",
        "                new InputElement(\"POSITION\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0, 0),",
        "                new InputElement(\"NORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 16, 0),",
        "                new InputElement(\"COLOR\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 28, 0),",
        "                new InputElement(\"TEXCOORD\", 0, SharpDX.DXGI.Format.R32G32_Float, 44, 0),",
        "                new InputElement(\"TANGENT\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 52, 0),",
        "                new InputElement(\"BINORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 64, 0),",
        "                new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0,",
        "                                 1, InputClassification.PerInstanceData, 1),",
        "                new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 1, SharpDX.DXGI.Format.R32G32B32A32_Float, 16,",
        "                                 1, InputClassification.PerInstanceData, 1),",
        "                new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 2, SharpDX.DXGI.Format.R32G32B32A32_Float, 32,",
        "                                 1, InputClassification.PerInstanceData, 1),",
        "                new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 3, SharpDX.DXGI.Format.R32G32B32A32_Float, 48,",
        "                                 1, InputClassification.PerInstanceData, 1),",
        "            };",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ccacbffe-38a4-476a-868b-bbcc82dc4624",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7c920f79-ad01-4b8f-969d-5353a814420b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5885990d-8026-44f0-b76e-58b3ea4088cc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8dcb4a9b-8ae9-473c-99e8-6a86a26b1668",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "151d94fc-378b-42fa-8709-81bca5f08a3e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "12484ead-fcf9-4af6-a039-e8920f0ff2d0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9e595f4a-b6ad-49bb-9bf1-0ff06ed07550",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "717b7cd5-8aed-424c-9255-96b6f1e29bf8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bcfe95d6-6230-4488-89ce-9f4dab1ad9ab",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "66e1ca02-4d1f-4c6d-bc1b-732b8875fadb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "134fa3c2-dcfb-49a0-8b36-a583272f3e4b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "30da0ff9-1f2d-44ff-aa96-c988a45f214b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9563e7f8-4546-41f2-a023-0958b67d9311",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cc496291-cf72-4393-a4b3-b98c360e30ea",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4654913e-1b26-4cbb-8d59-a1d88e21854e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2b6e48c9-c27b-4403-a3a2-ed2b838ccb8c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c304e070-e850-4f26-9ad1-6fa77e7b3c70",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f794d61c-888c-403d-a89a-50c04a220a77",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a4aeea2d-9dfe-4d12-a68d-88f02ce0ed6c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b861c939-e1ee-4898-8961-258e0017e80e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7275e22d-fc26-40d7-84fa-bd7d0dce3f8d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ab496b09-7220-4287-9469-07f9a54c15c9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9c75ef34-e8f3-4559-bf8b-2c7f8dac43f6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "685b59f5-9358-47db-bacd-4776b1153430",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3e77da91-a78f-46c4-b5ca-67b7aa17b91b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "464cc66c-cf66-4d90-a37d-3c8e968673af",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f8bc19c1-4d81-46a5-8278-bc2c0f651a4b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b7ecc63c-4825-4a8c-8770-d6b38bb9017e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cdd9c084-af99-4081-9d36-de20e1b17191",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "76b33f78-e440-4bd4-bf60-a35924bed1cf",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1df42a28-b9f4-4b72-a0fe-4adbf69538e2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0d8d2e67-08d4-493e-8197-cde753973324",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "00183c6e-9a34-45d8-ac8a-f7df22bbe9e4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e584a356-ace4-4f89-9557-50b557a4c2a7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b2580cc1-663d-4a72-ba0a-0e5bcd5efa43",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f87eb04d-0314-4d28-80ca-554e4725f268",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7e8aea22-b508-4820-8668-d57830b0079c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1d2dc625-dfed-4562-a474-3b091f31c1bd",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "03227b47-3a64-48d7-9651-a6a12bf9955f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bc41a0d4-af1f-437d-b6ce-d5a35fa3d56b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "652cd340-4ae9-45c7-9cc1-fc7f4c20c2e6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a18c37d3-3270-44a4-af95-bb43954b1860"
    }
  ]
}