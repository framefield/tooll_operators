{
  "Name": "BeatTapper",
  "_id": "294d8a18-7dd9-4eef-b0f0-a2c7ac45a170",
  "Namespace": "lib.time",
  "Description": "Generates a coherent timing-signal that can be used for VJ like projects. It's best used with [KeyInput] or [MidiInput].\r\n\r\nSee [BeatTappingExample] for more details how to use this operator.\r\n\r\nYou can use the .OffsetSync to shift tapping and generate sync. This can be useful if you the generated visuals and the audio signal you're using for tapping are offset (e.g. if you are too far from the stage or the video-pipeline delays the signal) ",
  "Inputs": [
    {
      "Name": "TapTrigger",
      "MetaInstanceID": "c49a9f71-c0d9-4f3f-a375-7f1d7ab0748b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ResyncTrigger",
      "MetaInstanceID": "7b924d4d-4045-4cb1-85a6-ac021522b0e1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ResetTotalTrigger",
      "MetaInstanceID": "20401446-a8da-454c-88e5-833941ac787a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "OffsetSync",
      "MetaInstanceID": "bf8defb7-1ead-4cb4-8519-349f4ef27133",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RoundBPMTrigger",
      "MetaInstanceID": "3b37f2c2-6473-4e8e-b6c4-28181dbfca1c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ChangeTempo",
      "MetaInstanceID": "af03ddd2-c4e2-45cc-99ae-c35e519d628a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Fragment",
      "MetaInstanceID": "0031984f-2383-475d-b4ed-8ce6fd85d00d",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "BPM",
      "MetaInstanceID": "067a7dc1-f825-4186-9d17-b7f32d9c8a74",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "SyncedTime",
      "MetaInstanceID": "ac5d865b-ba06-4e3b-8b77-9e27427beb8b",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "f47b88cf-ec2e-425c-9688-45710ca6e589",
      "MetaID": "1dafae7b-cfcd-4fb1-bb13-6aa71effe76b",
      "Name": "BeatTapperFunc",
      "Version": "fc20660b-c28f-48d3-ba9e-e5b059fce28e",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID1dafae7b_cfcd_4fb1_bb13_6aa71effe76b",
        "{",
        "    public class Class_BeatTapper : OperatorPart.Function, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            TapTrigger = 0,",
        "            ResyncTrigger = 1,",
        "            ResetTotalTrigger = 2,",
        "            OffsetSync = 3,",
        "            RoundBPMTrigger = 4,",
        "            ChangeTempo = 5",
        "        }",
        "        //<<< _inputids",
        "        ",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            Fragment = 0,",
        "            BPM = 1,",
        "            SyncedTime = 2",
        "        }",
        "        //<<< _outputids",
        "                ",
        "                ",
        "        /*",
        "            This code seems much too complicated, but getting flexible and conherent beat detection",
        "            seems to be much trickier, than I though. After playing with a couple of methods, it ",
        "            finally settled on keeping a \"fragmentTime\" counter wrapping over the _beatDuration.",
        "            The fragmentTime is than additionaly offset with. Maybe there is a method that works",
        "            without the separate offset-variable, but since I wanted to have damped transition is",
        "            syncing (no jumps please), keeping both seperated seemed to work.",
        "        */",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) ",
        "        {",
        "            //>>> _params",
        "            var TapTrigger = inputs[(int)InputId.TapTrigger].Eval(context).Value;",
        "            var ResyncTrigger = inputs[(int)InputId.ResyncTrigger].Eval(context).Value;",
        "            var ResetTotalTrigger = inputs[(int)InputId.ResetTotalTrigger].Eval(context).Value;",
        "            var OffsetSync = inputs[(int)InputId.OffsetSync].Eval(context).Value;",
        "            var RoundBPMTrigger = inputs[(int)InputId.RoundBPMTrigger].Eval(context).Value;",
        "            var ChangeTempo = inputs[(int)InputId.ChangeTempo].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            var time = context.GlobalTime;          ",
        "            var timeDelta =  time - _lastTime;",
        "",
        "",
        "            if(time != _lastTime) ",
        "            {            ",
        "                _lastTime = time;",
        "                _beatDuration += ChangeTempo;",
        "                var barDuration = _dampedBeatDuration * BeatsPerBar;",
        "                                                                      ",
        "                // Detect Flanks",
        "                bool justResynced = (ResyncTrigger - _oldResyncTrigger > 0.5f);",
        "                _oldResyncTrigger =ResyncTrigger;                ",
        "                ",
        "                bool justTapped = (TapTrigger - _oldTapTrigger > 0.5f);",
        "                if(justTapped) {",
        "                    _resyncTime = 0;    // disable resync-retiming when tapping",
        "                }",
        "                justTapped |= justResynced; //  treat resyncs as triggers",
        "                _oldTapTrigger =TapTrigger;",
        "    ",
        "                ",
        "                if(ResetTotalTrigger > 0.5f) {",
        "                    _barCounter = 0;",
        "                    _dampedBeatDuration=120;",
        "                }",
        "                ",
        "                if(RoundBPMTrigger > 0.5f) {",
        "                    Logger.Info(\"Just Tapped\");",
        "                ",
        "                    var BPM = (float)(60.0f / _beatDuration);",
        "                    var roundedBPM = (float)Math.Round(BPM);",
        "                    _beatDuration = 60 / roundedBPM;",
        "                }",
        "                ",
        "                // Update tap",
        "                if(justTapped) ",
        "                {                ",
        "                    AddTapAndShiftTimings(context.GlobalTime);",
        "                }                   ",
        "                    ",
        "                if(justResynced) ",
        "                {",
        "                    var measureDuration = _beatDuration * BeatsPerBar;",
        "                    var timeInMeasure = time - _barStartTime;",
        "                    if(timeInMeasure > measureDuration/2) {",
        "                        timeInMeasure -= measureDuration;",
        "                    }",
        "                    if(Math.Abs(timeInMeasure) > measureDuration / 16) {",
        "                        // Reset measure-timing",
        "                        _tappedBarStartTime  = _barStartTime = time;",
        "                    }",
        "                    else {",
        "                        // Sliding is sufficient",
        "                        _tappedBarStartTime = time;",
        "                    }",
        "                    ",
        "                    // stretch _beatTime",
        "                    if(_resyncTime != 0) {",
        "                        var timeSinceResync = time - _resyncTime;",
        "",
        "                        var measureCount = timeSinceResync / measureDuration;",
        "                        var measureCountInt = Math.Round(measureCount); ",
        "                        Logger.Info(\"MeasureCount:\" + measureCount);",
        "                        var mod = measureCount - measureCountInt;",
        "                        Logger.Info(\" Mod:\"+ mod);",
        "                        if( Math.Abs(mod) < 0.1 && measureCountInt > 0) {",
        "                            var measureFragment = mod * measureDuration / measureCountInt;",
        "                            var beatShift=  measureFragment / BeatsPerBar;",
        "                            _beatDuration += beatShift; ",
        "                            Logger.Info(\"Resync-Offset:\" + mod + \" shift:\" + beatShift);",
        "                        }",
        "                    }",
        "                    _resyncTime = time;                ",
        "                }",
        "                ",
        "                // Smooth offset and beatduration to avoid jumps",
        "                _dampedBeatDuration = Lerp(_dampedBeatDuration, _beatDuration, 0.05f);",
        "",
        "                // Slide start-time to match last beat-trigger",
        "                var timeInBar = time - _barStartTime;",
        "                var _tappedTimeInBar = time - _tappedBarStartTime;",
        "                var tappedBeatTime = (_tappedTimeInBar / _dampedBeatDuration) % 1f ;",
        "                var beatTime = (timeInBar / _dampedBeatDuration ) % 1f ;",
        "                ",
        "                _barStartTime += (beatTime < tappedBeatTime) ? -0.01f : 0.01f;",
        "",
        "                // Check for next bar               ",
        "                if(timeInBar > barDuration) {",
        "                    _barCounter++;",
        "                    //_barStartTime = time - (_timeInBar - barDuration);",
        "                    _barStartTime += barDuration;",
        "                    timeInBar -= barDuration;",
        "                }",
        "                ",
        "                _tappedBarStartTime = time +  (_tappedBarStartTime - time) % barDuration;",
        "                _barProgress = (float)(timeInBar / barDuration);",
        "            }            ",
        "                       ",
        "            switch(outputIdx) ",
        "            {",
        "                case (int)OutputId.Fragment:                                 ",
        "                    context.Value = 1 - _barProgress;                    ",
        "                    break;",
        "                    ",
        "                case (int)OutputId.BPM:",
        "                    context.Value =  (float)(60.0f/_dampedBeatDuration);",
        "                    break;",
        "                    ",
        "                case (int)OutputId.SyncedTime:",
        "                    context.Value = (float)(_barCounter + _barProgress) * 4 + OffsetSync;",
        "                    break;",
        "                    ",
        "            }            ",
        "            ",
        "            return context;",
        "        }",
        "        ",
        "        ",
        "",
        "        ",
        "        private void AddTapAndShiftTimings(double time) ",
        "        {",
        "            var newSeriesStarted = _tapTimes.Count == 0 || Math.Abs(time - _tapTimes.Last()) > 4* _beatDuration;",
        "            ",
        "            if(newSeriesStarted) {",
        "                //Logger.Info(\"New Tap Series started\");",
        "                _tapTimes.Clear();",
        "            }",
        "            ",
        "            _tapTimes.Add( time );",
        "            ",
        "            var taps = _tapTimes.Count;            ",
        "            if (taps < 4)",
        "                return;",
        "            ",
        "            ",
        "            var avgBeatDuration = (_tapTimes.Last() - _tapTimes.First()) / (taps - 1);",
        "            ",
        "            var sum = 0.0;",
        "            var goodCount = 0.0;",
        "            var goodSum = 0.0;",
        "            var lastT = 0.0;",
        "            ",
        "            foreach(var t in _tapTimes) ",
        "            {",
        "                var dt = t - lastT ;",
        "                lastT = t;",
        "                ",
        "                var matchRate = ( dt / avgBeatDuration) ;",
        "                //Logger.Info(\"MatchRate:\" + matchRate);",
        "                if(matchRate < 0.7f || matchRate > 1.2f) {",
        "                    continue;",
        "                }",
        "                goodSum += dt;",
        "                goodCount++;",
        "            }",
        "            ",
        "            if(goodCount > 3) {            ",
        "                _beatDuration = goodSum / goodCount;",
        "            }",
        "            Logger.Info(\" \" + goodCount + \"/\" + taps);",
        "            ",
        "            _tappedBarStartTime = time - _beatDuration;  ",
        "        }",
        "        ",
        "        ",
        "        private double Lerp(double a, double b, float t) {",
        "            return a * (1-t) + b * t; ",
        "        }",
        "        ",
        "        ",
        "        private float _beatTime = 0;",
        "        private float _tapTime = 0;",
        "        private float _resyncTime = 0;",
        "        ",
        "        double _barStartTime = 0;",
        "        ",
        "        double _beatDuration=0.5;",
        "        double _dampedBeatDuration= 0.5;",
        "        double _tappedBarStartTime = 0;",
        "        ",
        "        int _barCounter = 0;",
        "        ",
        "        private const float BeatsPerBar =16;",
        "        float _barProgress;",
        "        //double _timeInBar;",
        "        double _lastTime;",
        "        ",
        "        //float _lastDefaultBpm;",
        "        float _oldTapTrigger;",
        "        float _oldResyncTrigger;",
        "        ",
        "        List<double> _tapTimes = new List<double>();",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c49a9f71-c0d9-4f3f-a375-7f1d7ab0748b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7b924d4d-4045-4cb1-85a6-ac021522b0e1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "20401446-a8da-454c-88e5-833941ac787a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bf8defb7-1ead-4cb4-8519-349f4ef27133",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3b37f2c2-6473-4e8e-b6c4-28181dbfca1c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "af03ddd2-c4e2-45cc-99ae-c35e519d628a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0031984f-2383-475d-b4ed-8ce6fd85d00d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "067a7dc1-f825-4186-9d17-b7f32d9c8a74"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f47b88cf-ec2e-425c-9688-45710ca6e589",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ac5d865b-ba06-4e3b-8b77-9e27427beb8b"
    }
  ]
}