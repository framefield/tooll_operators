{
  "Name": "BlendCameras",
  "_id": "1f374aae-a076-445d-b82c-0c3483686e81",
  "Namespace": "lib.geometry.modify",
  "Description": "This Operator blends all connected cameras. \r\nFor now, .RotationOffset and .Positionoffset are ignored.",
  "Inputs": [
    {
      "Name": "SceneInput",
      "MetaInstanceID": "ffed8fda-056d-4c40-b010-3d85c4785600",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Camera",
      "MetaInstanceID": "c71ed25d-1df5-4e05-bb19-72cf538cf516",
      "DefaultValue": {
        "Type": "Dynamic",
        "Value": "Framefield.Core.Dynamic"
      },
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76",
      "IsMultiInput": "True",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "CameraIndex",
      "MetaInstanceID": "207cf851-d650-48c2-830c-27f9bf2f16e9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SoftBlend",
      "MetaInstanceID": "7693752b-9085-4400-9f27-68469f0b7148",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.2"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Output",
      "MetaInstanceID": "92219281-c1cb-4710-a83f-a04884e2a433",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    },
    {
      "Name": "Camera",
      "MetaInstanceID": "9efc538b-30a0-401b-b8c3-10cecf7050a1",
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "5ff30a3c-911a-49e8-a3ed-1602a533a308",
      "MetaID": "bba514be-5d8b-437e-a198-7c52a347dc95",
      "Name": "BlendCamerasFunc",
      "Version": "b05fca6d-a3a7-4b63-a415-c284d0dec843",
      "Type": "Scene",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using System.Dynamic;",
        "using Framefield.Core.OperatorPartTraits;",
        "",
        "namespace Framefield.Core.IDbba514be_5d8b_437e_a198_7c52a347dc95",
        "{",
        "    public class Class_BlendCameras : OperatorPart.Function",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            SceneInput = 0,",
        "            Camera = 1,",
        "            CameraIndex = 2,",
        "            SoftBlend = 3",
        "        }",
        "        //<<< _inputids",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            Output = 0,",
        "            Camera = 1",
        "        }",
        "        //<<< _outputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params_OFF",
        "            var SceneInput = inputs[(int)InputId.SceneInput];",
        "            var cameraInput = inputs[(int)InputId.Camera];  // Needs to be checked for null!",
        "            var CameraIndex = inputs[(int)InputId.CameraIndex].Eval(context).Value;",
        "            var SoftBlend = inputs[(int)InputId.SoftBlend].Eval(context).Value;",
        "            //<<< _params_OFF",
        "",
        "",
        "",
        "            var prevTransform = context.WorldToCamera;",
        "            var prevCamProj = context.CameraProjection;",
        "",
        "            if (cameraInput != null)",
        "            {",
        "                var camCount = (int)cameraInput.Connections.Count;",
        "                ",
        "                ",
        "                int indexA= (int)(CameraIndex % camCount);",
        "                int indexB = (int)((CameraIndex + 1) % camCount);",
        "            ",
        "                try {",
        "                    var dynamicResultA = cameraInput.Connections[indexA].Eval(context).Dynamic;  // Needs to be checked for null!",
        "                    var dynamicResultB = cameraInput.Connections[indexB].Eval(context).Dynamic;  // Needs to be checked for null!                    ",
        "",
        "                    var camA = dynamicResultA.This as ICameraProvider;",
        "                    var camB = dynamicResultB.This as ICameraProvider;",
        "                    if(camA != null && camB != null) ",
        "                    {",
        "                        float f = CameraIndex % 1;",
        "                        f = Utilities.SmoothStep( Utilities.Clamp( f / SoftBlend, 0.001f,1) );",
        "                        //Logger.Info(\"Count:\" + camCount+ \" f\" + ff );    ",
        "                        var target = Vector3.Lerp( camA.GetLastTarget(), camB.GetLastTarget(), f); ",
        "                        var position = Vector3.Lerp( camA.GetLastPosition(), camB.GetLastPosition(), f); ",
        "                        var roll = Utilities.Lerp( (float)camA.GetLastRoll(), (float)camB.GetLastRoll(), f);",
        "                        var fov = Utilities.Lerp( (float)camA.GetLastFOV(), (float)camB.GetLastFOV(), f);",
        "                        context.WorldToCamera = CalcWorldToCamera( position, target, roll, Vector3.Zero, Vector3.Zero);",
        "                        context.CameraProjection = camA.GetLastCameraToView();",
        "                    }",
        "                }",
        "                catch (Exception e) {",
        "                }",
        "            }",
        "            ",
        "            /*",
        "            switch (outputIdx)",
        "            {",
        "                case (int)OutputId.Output:",
        "                    SceneInput.Eval(context);",
        "                    break;",
        "                case (int)OutputId.This:",
        "                    dynamic obj = new ExpandoObject();",
        "                    obj.This = this;",
        "                    context.Dynamic = obj;",
        "                    break;",
        "            }*/            ",
        "",
        "            SceneInput.Eval(context);",
        "",
        "            context.CameraProjection = prevCamProj;",
        "            context.WorldToCamera = prevTransform;",
        "",
        "            return context;",
        "        }",
        "        ",
        "        ",
        "        Matrix CalcWorldToCamera(Vector3 position, Vector3 target, float roll, Vector3 positionOffset, Vector3 rotateOffset)",
        "        {",
        "            var worldToCamera = Matrix.LookAtLH(position, target, new Vector3(0, 1, 0));",
        "            var rollRotation = Matrix.RotationAxis(new Vector3(0, 0, 1), -(float)roll);",
        "            var additionalTranslation = Matrix.Translation(positionOffset);",
        "            var additionalRotation = Matrix.RotationYawPitchRoll((float)Utilities.DegreeToRad(rotateOffset.Y),",
        "                                                                 (float)Utilities.DegreeToRad(rotateOffset.X),",
        "                                                                 (float)Utilities.DegreeToRad(rotateOffset.Z));",
        "",
        "            return worldToCamera*rollRotation*additionalTranslation*additionalRotation;",
        "        }        ",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ffed8fda-056d-4c40-b010-3d85c4785600",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5ff30a3c-911a-49e8-a3ed-1602a533a308"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c71ed25d-1df5-4e05-bb19-72cf538cf516",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5ff30a3c-911a-49e8-a3ed-1602a533a308"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "207cf851-d650-48c2-830c-27f9bf2f16e9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5ff30a3c-911a-49e8-a3ed-1602a533a308"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7693752b-9085-4400-9f27-68469f0b7148",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "5ff30a3c-911a-49e8-a3ed-1602a533a308"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5ff30a3c-911a-49e8-a3ed-1602a533a308",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "92219281-c1cb-4710-a83f-a04884e2a433"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5ff30a3c-911a-49e8-a3ed-1602a533a308",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9efc538b-30a0-401b-b8c3-10cecf7050a1"
    }
  ]
}