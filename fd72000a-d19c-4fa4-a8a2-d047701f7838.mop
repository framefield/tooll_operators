{
  "Name": "Pick",
  "_id": "fd72000a-d19c-4fa4-a8a2-d047701f7838",
  "Namespace": "lib.geometry.experimental",
  "Description": "gets the color and the world position of the intersection point between a view ray, defined by the view position (lower left: -1, -1, upper right: 1, 1), and the image buffer with depth.\r\nnote: a camera must be defined within the subtree.",
  "Inputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "bbc41029-f244-444c-aebd-bce3f74f657a",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Camera",
      "MetaInstanceID": "6c97b8bb-a9b0-48ff-84a8-d4fa1cd21265",
      "DefaultValue": {
        "Type": "Dynamic",
        "Value": "Framefield.Core.Dynamic"
      },
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ScreenPosition.X",
      "MetaInstanceID": "5f372364-4202-459d-80fa-b64fab51f9b6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-1",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ScreenPosition.Y",
      "MetaInstanceID": "a96d6a86-f37e-460c-83d7-74698ae8d6e2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-1",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DepthOffset",
      "MetaInstanceID": "ecbb948c-0e5d-4cd8-89f0-cb9406e8c8f6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "WorldPosition.X",
      "MetaInstanceID": "48c9c23a-b4be-4743-ab44-c0ce0b8974ae",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "WorldPosition.Y",
      "MetaInstanceID": "3024ab8b-425a-4cb0-bde6-9cbc6ad93cb9",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "WorldPosition.Z",
      "MetaInstanceID": "6b92d40a-03d5-421d-8496-5d107ce47252",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "Color.R",
      "MetaInstanceID": "90130fad-1a71-456a-b11c-ab2bbd67602e",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "Color.G",
      "MetaInstanceID": "0826bf90-c6c4-4ec6-bae2-0285db2b8fc8",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "Color.B",
      "MetaInstanceID": "59ebf513-2eb4-4d9c-93ec-d657c348695b",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "Color.A",
      "MetaInstanceID": "d639c1fc-63f1-4f9e-ac32-c255bb0d0619",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "d1b1c8a2-1481-4e42-9be9-567e3fb9da34",
      "MetaID": "c733aa45-cac1-4c19-afe4-f6cba4e632b9",
      "Name": "PickFunc",
      "Version": "2d01845a-e36d-4f53-bcac-0f9b2f3cba8d",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using SharpDX.DXGI;",
        "using System.Diagnostics;",
        "",
        "namespace Framefield.Core.IDc733aa45_cac1_4c19_afe4_f6cba4e632b9",
        "{",
        "    public class Class_Pick : OperatorPart.Function",
        "    {",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            WorldPositionX = 0,",
        "            WorldPositionY = 1,",
        "            WorldPositionZ = 2,",
        "            ColorR = 3,",
        "            ColorG = 4,",
        "            ColorB = 5,",
        "            ColorA = 6",
        "        }",
        "        //<<< _outputids",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Image = 0,",
        "            Camera = 1,",
        "            ScreenPositionX = 2,",
        "            ScreenPositionY = 3,",
        "            DepthOffset = 4",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _imageWithCPUAccess);",
        "            Utilities.DisposeObj(ref _depthImageWithCPUAccess);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) ",
        "        {",
        "            //>>> __params",
        "            var ScreenPositionX = inputs[(int)InputId.ScreenPositionX].Eval(context).Value;",
        "            var ScreenPositionY = inputs[(int)InputId.ScreenPositionY].Eval(context).Value;",
        "            var ScreenPosition = new Vector2(ScreenPositionX, ScreenPositionY);",
        "            var DepthOffset = inputs[(int)InputId.DepthOffset].Eval(context).Value;",
        "            var Camera = inputs[(int)InputId.Camera].Eval(context).Dynamic;",
        "            //<<< __params",
        "",
        "            if (Changed)",
        "            {",
        "                var resultContextOfImageInput = inputs[(int)InputId.Image].Eval(context);",
        "                var image = resultContextOfImageInput.Image;",
        "                var depthImage = resultContextOfImageInput.DepthImage;",
        "                _depthOffset = DepthOffset;",
        "                _lastEvaluationSucceeded = DoPicking(context, ScreenPosition, image, depthImage, Camera);",
        "                if (_lastEvaluationSucceeded)",
        "                    Changed = false;",
        "            }",
        "",
        "            context.Value = 0.0f;",
        "            if (!_lastEvaluationSucceeded)",
        "                return context;",
        "",
        "            switch (outputIdx)",
        "            {",
        "                case (int)OutputId.WorldPositionX: context.Value = _lastEvaluatedWorldTPickPosition.X; break;",
        "                case (int)OutputId.WorldPositionY: context.Value = _lastEvaluatedWorldTPickPosition.Y; break;",
        "                case (int)OutputId.WorldPositionZ: context.Value = _lastEvaluatedWorldTPickPosition.Z; break;",
        "                case (int)OutputId.ColorR: context.Value = _lastEvaluatedColor.X; break;",
        "                case (int)OutputId.ColorG: context.Value = _lastEvaluatedColor.Y; break;",
        "                case (int)OutputId.ColorB: context.Value = _lastEvaluatedColor.Z; break;",
        "                case (int)OutputId.ColorA: context.Value = _lastEvaluatedColor.W; break;",
        "            }            ",
        "            return context;",
        "        }",
        "",
        "        bool DoPicking(OperatorPartContext context, Vector2 screenPosition, Texture2D image, Texture2D depthImage, dynamic camera)",
        "        {",
        "            if (screenPosition.X < -1 || screenPosition.X > 1 ||",
        "                screenPosition.Y < -1 || screenPosition.Y > 1)",
        "                return false;",
        "",
        "            if (image == null || depthImage == null || camera == null)",
        "                return false;",
        "",
        "            Framefield.Core.OperatorPartTraits.ICameraProvider camProvider = camera.This as Framefield.Core.OperatorPartTraits.ICameraProvider;",
        "            if (camProvider == null)",
        "                return false;",
        "",
        "            var worldToCamera = camProvider.GetLastWorldToCamera();",
        "            var cameraToView = camProvider.GetLastCameraToView();",
        "            var viewToWorld = Matrix.Invert(worldToCamera*cameraToView);",
        "",
        "            if (_imageWithCPUAccess == null ||",
        "                _imageWithCPUAccess.Description.Format != image.Description.Format ||",
        "                _imageWithCPUAccess.Description.Width != image.Description.Width ||",
        "                _imageWithCPUAccess.Description.Height != image.Description.Height ||",
        "                _imageWithCPUAccess.Description.MipLevels != image.Description.MipLevels ||",
        "                _depthImageWithCPUAccess.Description.Format != depthImage.Description.Format ||",
        "                _depthImageWithCPUAccess.Description.Width != depthImage.Description.Width ||",
        "                _depthImageWithCPUAccess.Description.Height != depthImage.Description.Height ||",
        "                _depthImageWithCPUAccess.Description.MipLevels != depthImage.Description.MipLevels)",
        "            {    ",
        "                var imageDesc = new Texture2DDescription",
        "                                    {",
        "                                        BindFlags = BindFlags.None,",
        "                                        Format = image.Description.Format,",
        "                                        Width = image.Description.Width,",
        "                                        Height = image.Description.Height,",
        "                                        MipLevels = image.Description.MipLevels,",
        "                                        SampleDescription = new SampleDescription(1, 0),",
        "                                        Usage = ResourceUsage.Staging,",
        "                                        OptionFlags = ResourceOptionFlags.None,",
        "                                        CpuAccessFlags = CpuAccessFlags.Read,",
        "                                        ArraySize = 1",
        "                                    };",
        "    ",
        "                var depthImageDesc = new Texture2DDescription",
        "                                         {",
        "                                             BindFlags = BindFlags.None,",
        "                                             Format = depthImage.Description.Format,                                           ",
        "                                             Width = depthImage.Description.Width,",
        "                                             Height = depthImage.Description.Height,",
        "                                             MipLevels = depthImage.Description.MipLevels,",
        "                                             SampleDescription = new SampleDescription(1, 0),",
        "                                             Usage = ResourceUsage.Staging,",
        "                                             OptionFlags = ResourceOptionFlags.None,",
        "                                             CpuAccessFlags = CpuAccessFlags.Read,",
        "                                             ArraySize = 1",
        "                                         };",
        "",
        "                Utilities.DisposeObj(ref _imageWithCPUAccess);",
        "                Utilities.DisposeObj(ref _depthImageWithCPUAccess);",
        "                _imageWithCPUAccess = new Texture2D(D3DDevice.Device, imageDesc);",
        "                _depthImageWithCPUAccess = new Texture2D(D3DDevice.Device, depthImageDesc);",
        "            }",
        "",
        "            var immediateContext = D3DDevice.Device.ImmediateContext;",
        "            immediateContext.CopyResource(image, _imageWithCPUAccess);",
        "            immediateContext.CopyResource(depthImage, _depthImageWithCPUAccess);",
        "",
        "            int x = (int)Utilities.Clamp(image.Description.Width*(screenPosition.X + 1.0f)*0.5f, 0, image.Description.Width - 1);",
        "            int y = (int)Utilities.Clamp(image.Description.Height*(screenPosition.Y - 1.0f)*-0.5f, 0, image.Description.Height - 1);",
        "            ",
        "            DataStream imageStream;",
        "            DataBox dataBox = immediateContext.MapSubresource(_imageWithCPUAccess, 0, 0, MapMode.Read, SharpDX.Direct3D11.MapFlags.None, out imageStream);",
        "            using (imageStream)",
        "            {",
        "                imageStream.Position = (long)y*dataBox.RowPitch + (long)x*4;",
        "                var color = new Color(imageStream.Read<Int32>());",
        "                _lastEvaluatedColor = new Vector4(color.R/255.0f, color.G/255.0f, color.B/255.0f, color.A/255.0f);",
        "                immediateContext.UnmapSubresource(_imageWithCPUAccess, 0);",
        "            }",
        "",
        "            dataBox = immediateContext.MapSubresource(_depthImageWithCPUAccess, 0, 0, MapMode.Read, SharpDX.Direct3D11.MapFlags.None, out imageStream);",
        "            using (imageStream)",
        "            {",
        "                imageStream.Position = (long)y*dataBox.RowPitch + (long)x*4;",
        "                float depth = imageStream.Read<float>();",
        "                Vector4 viewTPickPositionNormalized = new Vector4(screenPosition.X, screenPosition.Y, depth, 1.0f);",
        "                _lastEvaluatedWorldTPickPosition = Vector4.Transform(viewTPickPositionNormalized, viewToWorld);",
        "                var v2=_lastEvaluatedWorldTPickPosition;",
        "                v2.Normalize();",
        "                ",
        "                _lastEvaluatedWorldTPickPosition /= _lastEvaluatedWorldTPickPosition.W;",
        "                _lastEvaluatedWorldTPickPosition += v2 * _depthOffset;",
        "                immediateContext.UnmapSubresource(_depthImageWithCPUAccess, 0);",
        "            }",
        "            return true;",
        "        }",
        "",
        "        bool _lastEvaluationSucceeded;",
        "        float _depthOffset;",
        "        Texture2D _imageWithCPUAccess;",
        "        Texture2D _depthImageWithCPUAccess;",
        "        Vector4 _lastEvaluatedColor;",
        "        Vector4 _lastEvaluatedWorldTPickPosition;",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d1b1c8a2-1481-4e42-9be9-567e3fb9da34",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "48c9c23a-b4be-4743-ab44-c0ce0b8974ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bbc41029-f244-444c-aebd-bce3f74f657a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d1b1c8a2-1481-4e42-9be9-567e3fb9da34"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6c97b8bb-a9b0-48ff-84a8-d4fa1cd21265",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d1b1c8a2-1481-4e42-9be9-567e3fb9da34"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5f372364-4202-459d-80fa-b64fab51f9b6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d1b1c8a2-1481-4e42-9be9-567e3fb9da34"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a96d6a86-f37e-460c-83d7-74698ae8d6e2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d1b1c8a2-1481-4e42-9be9-567e3fb9da34"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ecbb948c-0e5d-4cd8-89f0-cb9406e8c8f6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d1b1c8a2-1481-4e42-9be9-567e3fb9da34"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d1b1c8a2-1481-4e42-9be9-567e3fb9da34",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "3024ab8b-425a-4cb0-bde6-9cbc6ad93cb9"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d1b1c8a2-1481-4e42-9be9-567e3fb9da34",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6b92d40a-03d5-421d-8496-5d107ce47252"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d1b1c8a2-1481-4e42-9be9-567e3fb9da34",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "90130fad-1a71-456a-b11c-ab2bbd67602e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d1b1c8a2-1481-4e42-9be9-567e3fb9da34",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0826bf90-c6c4-4ec6-bae2-0285db2b8fc8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d1b1c8a2-1481-4e42-9be9-567e3fb9da34",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "59ebf513-2eb4-4d9c-93ec-d657c348695b"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d1b1c8a2-1481-4e42-9be9-567e3fb9da34",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d639c1fc-63f1-4f9e-ac32-c255bb0d0619"
    }
  ]
}