{
  "Name": "ReplicateToGrid",
  "_id": "8d94f42d-4503-4fc7-bee0-9b2e4afb5ceb",
  "Namespace": "lib.mesh.modify",
  "Description": "Instanciates the incoming mesh. ",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "5929d28d-c220-410d-9892-fe2308aae0ed",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 objectToWorldMatrix;\r",
          "float4x4 worldToCameraMatrix;\r",
          "float4x4 cameraToObjectMatrix; // modelview inverse\r",
          "float4x4 projMatrix;\r",
          "float4x4 textureMatrix;\r",
          "\r",
          "\r",
          "struct PointLight\r",
          "{\r",
          "    float4 position;\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float4 attenuation;\r",
          "};\r",
          "\r",
          "struct SpotLight\r",
          "{\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float constantAttenuation;\r",
          "    float linearAttenuation;\r",
          "    float quadraticAttenuation;\r",
          "    float spotCutoff;\r",
          "    float spotCosCutoff;\r",
          "    float spotExponent;\r",
          "};\r",
          "\r",
          "cbuffer FogSettings\r",
          "{\r",
          "    float4 fogColor;\r",
          "    float fogStart;\r",
          "    float fogEnd;\r",
          "    float fogScale;\r",
          "}\r",
          "\r",
          "cbuffer MaterialBuffer\r",
          "{\r",
          "    float4 materialAmbient;\r",
          "    float4 materialDiffuse;\r",
          "    float4 materialSpecular;\r",
          "    float4 materialEmission;\r",
          "    float materialShininess;\r",
          "};\r",
          "\r",
          "\r",
          "cbuffer PointLightsBuffer\r",
          "{\r",
          "    int numPointLights;\r",
          "    PointLight pointLights[3];\r",
          "};\r",
          "\r",
          "\r",
          "Texture2D txDiffuse;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "    float4 objToWorldRow0 : INSTANCE_OBJ_TO_WORLD_ROW0;\r",
          "    float4 objToWorldRow1 : INSTANCE_OBJ_TO_WORLD_ROW1;\r",
          "    float4 objToWorldRow2 : INSTANCE_OBJ_TO_WORLD_ROW2;\r",
          "    float4 objToWorldRow3 : INSTANCE_OBJ_TO_WORLD_ROW3;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "float mod(float a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "float3 mod(float3 a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "\r",
          "PS_IN VS( VS_IN input )\r",
          "{\r",
          "    PS_IN output = (PS_IN)0;\r",
          "    float4x4 instanceToWorldMatrix = float4x4(input.objToWorldRow0,\r",
          "                                              input.objToWorldRow1,\r",
          "                                              input.objToWorldRow2,\r",
          "                                              input.objToWorldRow3);\r",
          "                                              \r",
          "    output.pos = mul(input.pos, instanceToWorldMatrix);\r",
          "    float4 n4 = float4(input.normal.xyz,0);\r",
          "    output.normal = mul(n4, instanceToWorldMatrix).xyz;\r",
          "    float4x4 worldToInstance = transpose(instanceToWorldMatrix);\r",
          "    output.normal = mul((float3x3)worldToInstance, input.normal);\r",
          "//    output.normal = mul(input.normal, (float3x3)instanceToWorldMatrix);\r",
          "    \r",
          "    output.texCoord = input.texCoord;\r",
          "    output.col = input.col;\r",
          "    //output.col = float4(1,1,1,1);\r",
          "    output.tangent = input.tangent;\r",
          "    output.binormal = input.binormal;\r",
          "      \r",
          "    return output;\r",
          "}\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle PS_IN input[3], inout TriangleStream<PS_IN> outputStream)\r",
          "{\r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "        PS_IN vertex = input[i];\r",
          "        outputStream.Append(vertex);\r",
          "    }\r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VS()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MeshInput",
      "MetaInstanceID": "48f1e26c-0c7c-4a08-8e79-a35cdb27ffc4",
      "DefaultValue": {
        "Type": "Mesh",
        "Value": "Framefield.Core.MeshValue"
      },
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206",
      "IsMultiInput": "True",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Count.X",
      "MetaInstanceID": "6b50a24d-5766-486f-aacc-3a13bfb3ac07",
      "DefaultValue": {
        "Type": "Float",
        "Value": "50"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Count.Y",
      "MetaInstanceID": "bc5a848f-e01b-459c-947d-24667ecaebc0",
      "DefaultValue": {
        "Type": "Float",
        "Value": "50"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Count.Z",
      "MetaInstanceID": "06dc1519-cedb-4481-8acb-fa82d89ce14a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.X",
      "MetaInstanceID": "4c0fe6ac-c540-4b3e-9dce-075bf379eb17",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Y",
      "MetaInstanceID": "e2664071-32fc-4c6b-b269-4d68826877a4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Z",
      "MetaInstanceID": "eef8505b-80ef-4449-b4dd-b2d59c6eb324",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spread.X",
      "MetaInstanceID": "b22ff5fd-7201-49af-ac8e-fa9d8f0be7a6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spread.Y",
      "MetaInstanceID": "044c3924-b7d6-4f52-b734-27ff0e7f7079",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spread.Z",
      "MetaInstanceID": "43d75e1e-d5e9-4574-9094-be88bfd533e4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scatter.X",
      "MetaInstanceID": "35b31963-ed7f-4b5d-9dd0-b4baf6a4335e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scatter.Y",
      "MetaInstanceID": "f47e3b13-8306-4519-bd2e-5244e8d2c1a3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scatter.Z",
      "MetaInstanceID": "f41b39d4-b2bd-4cb3-a098-6340d10b56cb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scale",
      "MetaInstanceID": "4ada840b-dcaf-415f-b403-99e81ca2003b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ScaleRandom",
      "MetaInstanceID": "36a331c2-59e3-405a-8bd3-0180e5f9d12e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Orientation",
      "MetaInstanceID": "5dc3048d-2575-4d5e-8025-77556cfaeed7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Fixed",
          "Value": "0"
        },
        {
          "Name": "FaceCamera",
          "Value": "1"
        }
      ]
    },
    {
      "Name": "Spin.X",
      "MetaInstanceID": "5873123f-3b68-4f7f-b080-7929f63715b9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spin.Y",
      "MetaInstanceID": "77a4d9cb-9f58-44b5-86bb-846b2854d5ed",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spin.Z",
      "MetaInstanceID": "41ca8e60-c269-4db5-b6af-08837aa19960",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SpinRandom.X",
      "MetaInstanceID": "79016abf-e7f2-41dd-b38b-5222e273ac5b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SpinRandom.Y",
      "MetaInstanceID": "e5225c69-bd74-4ddc-a345-856895cba706",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SpinRandom.Z",
      "MetaInstanceID": "b4a2889e-ff98-49e2-b06f-513ae7fed28e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Seed",
      "MetaInstanceID": "03e3f275-3a4e-4449-a8f5-37b2677781c6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Pattern",
      "MetaInstanceID": "6c08be1a-14d2-4d06-aa27-0db6538cecbc",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Grid",
          "Value": "0"
        },
        {
          "Name": "Triangle",
          "Value": "1"
        },
        {
          "Name": "Hexa",
          "Value": "2"
        },
        {
          "Name": "Spiral",
          "Value": "3"
        }
      ]
    },
    {
      "Name": "SpinEffect.X",
      "MetaInstanceID": "5096335e-7ec7-4bea-a903-3a6919487005",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SpinEffect.Y",
      "MetaInstanceID": "c299d688-40d5-4d0c-a449-507ae934ac37",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SpinEffect.Z",
      "MetaInstanceID": "58ee0cf7-d6a5-4f9e-83ab-71718ca1805a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ScaleEffect",
      "MetaInstanceID": "6f14f13e-ad62-49f2-ac25-5c519cf3ca0e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EffectCenter.X",
      "MetaInstanceID": "cc69d94e-f654-4756-b77e-9d5a1038ba61",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EffectCenter.Y",
      "MetaInstanceID": "1932d429-e1b3-4420-a3cf-4c059fcb8b5d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EffectCenter.Z",
      "MetaInstanceID": "a7ce231a-c757-49d6-8ea1-95db099aaf3c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EffectRange.Radius",
      "MetaInstanceID": "675f4961-b3f3-4df6-bc8f-4b39faeabc27",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EffectRange.FallOff",
      "MetaInstanceID": "5787ab8c-4f87-4067-8880-83b79632c93f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EffectRange.Scatter",
      "MetaInstanceID": "4004d925-d1d7-42e8-84a9-cfd872d29385",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "SceneTransformOut",
      "MetaInstanceID": "0ef65b4f-1494-4acf-8279-bcf565bc5be4",
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "8c9cf664-38f3-4a1c-8ec6-6758882bc629",
      "MetaID": "1b6d97b4-af5f-455b-a1a4-406f1611f78f",
      "Name": "ReplicateToGridFunc",
      "Version": "205db167-9168-4779-b9df-ea00cd71e73b",
      "Type": "Scene",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using SharpDX;",
        "using SharpDX.Direct3D;",
        "using SharpDX.Direct3D11;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.ID1b6d97b4_af5f_455b_a1a4_406f1611f78f",
        "{",
        "    public class Class_ReplicateToGrid : FXSourceCodeFunction",
        "    {",
        "        #region Renderer",
        "        public class Renderer : BaseRenderer",
        "        {",
        "            public override void SetupEffect(OperatorPartContext context)",
        "            {",
        "                base.SetupEffect(context);",
        "                try",
        "                {",
        "                    SetupMaterialConstBuffer(context);",
        "                    SetupFogSettingsConstBuffer(context);",
        "                    SetupPointLightsConstBuffer(context);",
        "                }",
        "                catch (Exception e)",
        "                {",
        "                    Logger.Error(ParentFunc, \"Error building constant buffer: {0} - Source: {1}\", e.Message, e.Source);",
        "                }",
        "            }",
        "            public OperatorPart.Function ParentFunc {get;set;}            ",
        "        }",
        "        #endregion",
        "",
        "        public Class_ReplicateToGrid()",
        "        {",
        "            _renderer = new Renderer(){ParentFunc = this};",
        "        }",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _renderer);",
        "            base.Dispose();",
        "        }",
        "",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            CountX = 1,",
        "            CountY = 2,",
        "            CountZ = 3,",
        "            SpreadX = 4,",
        "            SpreadY = 5,",
        "            ScatterX = 6,",
        "            SpreadZ = 7,",
        "            ScatterY = 8,",
        "            ScatterZ = 9,",
        "            ScaleRandom = 10,",
        "            Orientation = 11,",
        "            SpinX = 12,",
        "            SpinRandomX = 13,",
        "            Seed = 14,",
        "            MeshInput = 15,",
        "            Scale = 16,",
        "            Pattern = 17,",
        "            CenterX = 18,",
        "            CenterY = 19,",
        "            CenterZ = 20,",
        "            SpinEffectX = 21,",
        "            ScaleEffect = 22,",
        "            EffectCenterX = 23,",
        "            EffectCenterY = 24,",
        "            EffectCenterZ = 25,",
        "            EffectRangeRadius = 26,",
        "            EffectRangeFallOff = 27,",
        "            SpinY = 28,",
        "            SpinZ = 29,",
        "            SpinRandomY = 30,",
        "            SpinRandomZ = 31,",
        "            SpinEffectY = 32,",
        "            SpinEffectZ = 33,",
        "            EffectRangeScatter = 34",
        "        }",
        "        //<<< _inputids",
        "",
        "",
        "        private bool _firstEval = true;",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var CountX = inputs[(int)InputId.CountX].Eval(context).Value;",
        "            var CountY = inputs[(int)InputId.CountY].Eval(context).Value;",
        "            var CountZ = inputs[(int)InputId.CountZ].Eval(context).Value;",
        "            var Count = new Vector3(CountX, CountY, CountZ);",
        "            var SpreadX = inputs[(int)InputId.SpreadX].Eval(context).Value;",
        "            var SpreadY = inputs[(int)InputId.SpreadY].Eval(context).Value;",
        "            var SpreadZ = inputs[(int)InputId.SpreadZ].Eval(context).Value;",
        "            var Spread = new Vector3(SpreadX, SpreadY, SpreadZ);",
        "            var ScatterX = inputs[(int)InputId.ScatterX].Eval(context).Value;",
        "            var ScatterY = inputs[(int)InputId.ScatterY].Eval(context).Value;",
        "            var ScatterZ = inputs[(int)InputId.ScatterZ].Eval(context).Value;",
        "            var Scatter = new Vector3(ScatterX, ScatterY, ScatterZ);",
        "            var ScaleRandom = inputs[(int)InputId.ScaleRandom].Eval(context).Value;",
        "            var Orientation = (int) inputs[(int)InputId.Orientation].Eval(context).Value;",
        "            var SpinX = inputs[(int)InputId.SpinX].Eval(context).Value;",
        "            var SpinY = inputs[(int)InputId.SpinY].Eval(context).Value;",
        "            var SpinZ = inputs[(int)InputId.SpinZ].Eval(context).Value;",
        "            var Spin = new Vector3(SpinX, SpinY, SpinZ);",
        "            var SpinRandomX = inputs[(int)InputId.SpinRandomX].Eval(context).Value;",
        "            var SpinRandomY = inputs[(int)InputId.SpinRandomY].Eval(context).Value;",
        "            var SpinRandomZ = inputs[(int)InputId.SpinRandomZ].Eval(context).Value;",
        "            var SpinRandom = new Vector3(SpinRandomX, SpinRandomY, SpinRandomZ);",
        "            var Seed = inputs[(int)InputId.Seed].Eval(context).Value;",
        "            var MeshInput = inputs[(int)InputId.MeshInput].Eval(context).Mesh;",
        "            var Scale = inputs[(int)InputId.Scale].Eval(context).Value;",
        "            var Pattern = (int) inputs[(int)InputId.Pattern].Eval(context).Value;",
        "            var CenterX = inputs[(int)InputId.CenterX].Eval(context).Value;",
        "            var CenterY = inputs[(int)InputId.CenterY].Eval(context).Value;",
        "            var CenterZ = inputs[(int)InputId.CenterZ].Eval(context).Value;",
        "            var Center = new Vector3(CenterX, CenterY, CenterZ);",
        "            var SpinEffectX = inputs[(int)InputId.SpinEffectX].Eval(context).Value;",
        "            var SpinEffectY = inputs[(int)InputId.SpinEffectY].Eval(context).Value;",
        "            var SpinEffectZ = inputs[(int)InputId.SpinEffectZ].Eval(context).Value;",
        "            var SpinEffect = new Vector3(SpinEffectX, SpinEffectY, SpinEffectZ);",
        "            var ScaleEffect = inputs[(int)InputId.ScaleEffect].Eval(context).Value;",
        "            var EffectCenterX = inputs[(int)InputId.EffectCenterX].Eval(context).Value;",
        "            var EffectCenterY = inputs[(int)InputId.EffectCenterY].Eval(context).Value;",
        "            var EffectCenterZ = inputs[(int)InputId.EffectCenterZ].Eval(context).Value;",
        "            var EffectCenter = new Vector3(EffectCenterX, EffectCenterY, EffectCenterZ);",
        "            var EffectRangeRadius = inputs[(int)InputId.EffectRangeRadius].Eval(context).Value;",
        "            var EffectRangeFallOff = inputs[(int)InputId.EffectRangeFallOff].Eval(context).Value;",
        "            var EffectRangeScatter = inputs[(int)InputId.EffectRangeScatter].Eval(context).Value;",
        "            var EffectRange = new Vector3(EffectRangeRadius, EffectRangeFallOff, EffectRangeScatter);",
        "            //<<< _params        ",
        "",
        "",
        "            var intCountX = (int)(Utilities.Clamp(CountX, 0, 1000));",
        "            var intCountY = (int)(Utilities.Clamp(CountY, 0, 1000));",
        "            var intCountZ = (int)(Utilities.Clamp(CountZ, 0, 1000));",
        "",
        "            var numInstances = intCountX * intCountY * intCountZ;",
        "",
        "            if (MeshInput == null || numInstances == 0 )",
        "            {",
        "                //_bakedMesh.NumTriangles = 0;            ",
        "                context.Mesh = null;",
        "                return context;",
        "            }",
        "",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i) {",
        "                    Compile(i);",
        "                    ",
        "                }",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            const float toRad = (float) Math.PI/180f;",
        "",
        "            var prevTransform = context.ObjectTWorld;",
        "            var rand = new Random((int) Seed);",
        "",
        "            var instancedMesh = MeshInput;",
        "            ",
        "            var alwaysNeedsUpdate = Orientation > 0.5;",
        "",
        "            if(!Changed && !alwaysNeedsUpdate) {",
        "                context.Mesh = _bakedMesh;",
        "                return context;",
        "            }",
        "",
        "",
        "            // Compute size of required vertex buffer and create it",
        "            _bakedMesh.NumTriangles = instancedMesh.NumTriangles * numInstances;",
        "",
        "            _bakedMesh.AttributesSize = instancedMesh.AttributesSize;",
        "            _bakedMesh.InputElements = instancedMesh.InputElements;",
        "            if (_bakedMesh.Vertices == null || _bakedMesh.Vertices.Description.SizeInBytes != instancedMesh.Vertices.Description.SizeInBytes * numInstances)",
        "            {",
        "                Utilities.DisposeObj(ref _bakedMesh.Vertices);",
        "                _bakedMesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                  {",
        "                                                                      BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                      CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                      OptionFlags = ResourceOptionFlags.None,",
        "                                                                      SizeInBytes = instancedMesh.Vertices.Description.SizeInBytes * numInstances,",
        "                                                                      Usage = ResourceUsage.Default",
        "                                                                  });",
        "            }",
        "",
        "            // instance data buffer",
        "            const int instanceDataSize = 4*16; // float4x4",
        "            var streamSize = numInstances * instanceDataSize;",
        "            if (_instanceDataBuffer == null || _instanceDataBuffer.Description.SizeInBytes != streamSize)",
        "            {",
        "                Utilities.DisposeObj(ref _instanceDataBuffer);",
        "                _instanceDataBuffer = new Buffer(context.D3DDevice, streamSize, ResourceUsage.Dynamic, BindFlags.VertexBuffer,",
        "                                                 CpuAccessFlags.Write, ResourceOptionFlags.None, instanceDataSize);",
        "            }",
        "",
        "            DataStream instanceDataStream;",
        "            context.D3DDevice.ImmediateContext.MapSubresource(_instanceDataBuffer, MapMode.WriteDiscard, MapFlags.None, out instanceDataStream);",
        "            using (instanceDataStream)",
        "            {",
        "                instanceDataStream.Position = 0;",
        "",
        "                for(var indexX = 0; indexX < intCountX; indexX ++) {",
        "                    for(var indexY = 0; indexY < intCountY; indexY ++) {",
        "                        for(var indexZ = 0; indexZ < intCountZ; indexZ ++) ",
        "                        {",
        "                            var fx = (indexX + 0.5f) / CountX;",
        "                            var fy = (indexY + 0.5f) /CountY;",
        "                            var fz = (indexZ + 0.5f) / CountZ;",
        "                            ",
        "                            var t = Vector3.Zero;",
        "                            ",
        "                            ",
        "",
        "                            //Matrix rotation;",
        "                            Matrix transform;",
        "                            var rotX = SpinX * toRad;",
        "                            var rotY = SpinY * toRad;",
        "                            var rotZ = SpinZ * toRad;",
        "                            ",
        "                            // Triangular-pattern",
        "                            if(Pattern == 1)",
        "                            {",
        "                                var isOdd = indexX % 2 > 0;",
        "                                var verticalOffset= isOdd",
        "                                                    ? (0.331f * SpreadY) ",
        "                                                    : 0;",
        "                                                    ",
        "                                const float TriangleScale = 0.581f;",
        "                                t = new Vector3((float) ((indexX - intCountX/2 + 0.5f) * SpreadX * TriangleScale),",
        "                                                (float) ((indexY - intCountY/2 + 0.5f) * SpreadY + verticalOffset),",
        "                                                (float) (0));",
        "                                rotZ+=  isOdd ? 120f*3.141578f / 360f : 0;",
        "    ",
        "                            }",
        "                            // Hexa-pattern",
        "                            else if(Pattern == 2)",
        "                            {",
        "                                var isOddColumn = indexX % 2 == 0;",
        "                                var isOddRow = indexY % 2 > 0;",
        "                                var verticalOffset= isOddColumn ^ isOddRow? (0.331f * SpreadY) : 0;",
        "                                                    ",
        "                                const float HexScale = 0.58f;",
        "                                t = new Vector3((float) ((indexX - intCountX/2 + 0.5f) * SpreadX * HexScale),",
        "                                                (float) ((indexY - intCountY/2 + 0.5f) * SpreadY + verticalOffset),",
        "                                                (fz - 0.5f) * (SpreadZ * (CountZ)));",
        "                                rotZ+=  (isOddColumn^isOddRow ) ? 120f*3.141578f / 360f : 0;",
        "    ",
        "                            }                            // Spiral",
        "                            else if (Pattern == 3) {",
        "                                var n = indexX + indexY * intCountX ;",
        "                                var SpiralOffset = SpreadY;",
        "                                var SpiralSpin = 0;",
        "                                ",
        "                                var angle =  (double)n * (137.5095 + (double)SpiralOffset / 100.0) + SpiralSpin * Math.PI/180; //137.508;",
        "                                var radius = (double)SpreadX * Math.Sqrt(n);",
        "                                t = new Vector3((float) ( Math.Sin( angle) * radius )  ,",
        "                                                (float) ( Math.Cos( angle) * radius),",
        "                                                (fz - 0.5f) * (SpreadZ * (CountZ)));",
        "                                rotZ -= (float)angle;",
        "                            ",
        "                            }",
        "                            // Grid",
        "                            else {",
        "                                t = new Vector3( ",
        "                                    (fx - 0.5f) * (SpreadX * (CountX)),   ",
        "                                    (fy - 0.5f) * (SpreadY * (CountY)),   ",
        "                                    (fz - 0.5f) * (SpreadZ * (CountZ))   ",
        "                                    );",
        "                            }",
        "                            ",
        "                            // Effects",
        "                            var effectR = (t-EffectCenter).Length() + (float)(rand.NextDouble()-0.5f) * EffectRangeScatter;",
        "                            t+= Center;",
        "                            var effectF = Fade( Utilities.Clamp( (effectR - EffectRangeRadius) / -EffectRangeFallOff, 0,1));",
        "                            ",
        "",
        "                            float s = (Scale + (float)rand.NextDouble() * ScaleRandom) * (effectF * ScaleEffect+1);",
        "                            var scale = new Vector3(s, s, s);",
        "                            ",
        "                            rotX += effectF * SpinEffectX * toRad;",
        "                            rotY += effectF * SpinEffectY * toRad;",
        "                            rotZ += effectF * SpinEffectZ * toRad;",
        "                            ",
        "",
        "                            Matrix.RotationYawPitchRoll(rotX + (float)(rand.NextDouble()) * SpinRandomX * toRad,",
        "                                                        rotY + (float)(rand.NextDouble()) * SpinRandomY * toRad,",
        "                                                        rotZ + (float)(rand.NextDouble()) * SpinRandomZ * toRad,",
        "                                                        out transform);",
        "                                                                            ",
        "                            var tScale = Matrix.Scaling( scale.X, scale.Y, scale.Z);",
        "                            transform= tScale * transform;",
        "        ",
        "                            // Rotation to camera",
        "                            if(Orientation > 0.5) {                            ",
        "                                var cameraToWorld = context.WorldToCamera;",
        "                                cameraToWorld.Invert();",
        "                                ",
        "                                var objectToWorldWithoutTranslation = context.ObjectTWorld;",
        "                                var newObjectToWorld = cameraToWorld;",
        "                                newObjectToWorld.Row4 = context.ObjectTWorld.Row4;",
        "                                //Matrix.Translation(0,0,0, out newObjectToWorld);",
        "                                transform *= newObjectToWorld;                        ",
        "                            }",
        "",
        "                            var translation= Matrix.Translation(new Vector3( (float)(rand.NextDouble() -0.5f) * ( ScatterX),",
        "                                                                    (float)(rand.NextDouble() -0.5f) * ( ScatterY),",
        "                                                                    (float)(rand.NextDouble() -0.5f) * ( ScatterZ)));",
        "                            transform =  translation * transform;",
        "",
        "        ",
        "                            transform *= Matrix.Transformation(new Vector3(), new Quaternion(), new Vector3(1,1,1), new Vector3(), new Quaternion(), t);",
        "                            instanceDataStream.Write(transform);",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "            context.D3DDevice.ImmediateContext.UnmapSubresource(_instanceDataBuffer, 0);",
        "",
        "            var prevEffect = context.Effect;",
        "            var prevRenderer = context.Renderer;",
        "            context.Effect = _effect;",
        "            context.Renderer = _renderer;",
        "",
        "            try",
        "            {",
        "                _renderer.SetupEffect(context);",
        "",
        "                if (context.DepthStencilView != null)",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.DepthStencilView, context.RenderTargetView);",
        "                else",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.RenderTargetView);",
        "",
        "                if (context.BlendState != null)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.BlendState = context.BlendState;",
        "                }",
        "",
        "                if (context.DepthStencilState != null)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = context.DepthStencilState;",
        "                }",
        "",
        "                if (context.RasterizerState != null)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.Rasterizer.State = context.RasterizerState;",
        "                }",
        "",
        "                var technique = _effect.GetTechniqueByIndex(0);",
        "                var pass = technique.GetPassByIndex(0);",
        "",
        "                context.D3DDevice.ImmediateContext.Rasterizer.SetViewport(context.Viewport);",
        "                context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = new InputLayout(context.D3DDevice, pass.Description.Signature, _instanceDataInputElements);",
        "                context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "                context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new [] { instancedMesh.Vertices, _instanceDataBuffer}, new [] {76, instanceDataSize}, new [] {0,0} );",
        "                ",
        "                // Configure Pipeline for stream output",
        "                context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_bakedMesh.Vertices, 0) });",
        "                pass.Apply(context.D3DDevice.ImmediateContext);",
        "    ",
        "                // Draw mesh into vertex buffer",
        "                context.D3DDevice.ImmediateContext.DrawInstanced(instancedMesh.NumTriangles*3, numInstances, 0, 0);",
        "                context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this,\"Replicate2 - An error occured during evaluation: {0}\", exception.Message);",
        "            }",
        "",
        "            context.Effect = prevEffect;",
        "            context.Renderer = prevRenderer;",
        "            ",
        "            context.Mesh = _bakedMesh;",
        "            Changed =false;",
        "            return context;",
        "        }",
        "",
        "",
        "        #region helpers",
        "",
        "        public float Noise(int x, int seed)",
        "        {",
        "            int n = x + seed*137;",
        "            n = (n << 13) ^ n;",
        "            return (float) (1.0 - ((n*(n*n*15731 + 789221) + 1376312589) & 0x7fffffff)/1073741824.0);",
        "        }",
        "",
        "        public float Lerp(float a, float b, float t)",
        "        {",
        "            return a + t*(b - a);",
        "        }",
        "",
        "        public float Fade(float t)",
        "        {",
        "            return t*t*t*(t*(t*6 - 15) + 10);",
        "        }",
        "",
        "        public float Interpolate(float a, float b, float t)",
        "        {",
        "            float ft = t*3.1415927f;",
        "            float f = (float) (1.0 - Math.Cos(ft))*0.5f;",
        "            return a*(1.0f - f) + b*f;",
        "        }",
        "",
        "        private float getNoise(float value)",
        "        {",
        "            float noiseSum = 0.0f;",
        "            value *= _frequency;",
        "            value += _noiseTime+10000;",
        "",
        "",
        "            noiseSum = Lerp(Noise((int) value, SEED),",
        "                            Noise((int) value + 1, SEED),",
        "                            Fade(value - (float) Math.Floor(value)));",
        "            return noiseSum;",
        "        }",
        "",
        "        #endregion",
        "",
        "        private Mesh _bakedMesh = new Mesh();",
        "        private const int SEED = 0;",
        "        private float _frequency = 1;",
        "        private float _noiseTime;",
        "        private OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier> _meshCollector = new OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier>();",
        "        private Renderer _renderer;",
        "        private Buffer _instanceDataBuffer;",
        "        private InputElement[] _instanceDataInputElements ",
        "            = new []",
        "            {",
        "                new InputElement(\"POSITION\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0, 0),",
        "                new InputElement(\"NORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 16, 0),",
        "                new InputElement(\"COLOR\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 28, 0),",
        "                new InputElement(\"TEXCOORD\", 0, SharpDX.DXGI.Format.R32G32_Float, 44, 0),",
        "                new InputElement(\"TANGENT\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 52, 0),",
        "                new InputElement(\"BINORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 64, 0),",
        "                new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0,",
        "                                 1, InputClassification.PerInstanceData, 1),",
        "                new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 1, SharpDX.DXGI.Format.R32G32B32A32_Float, 16,",
        "                                 1, InputClassification.PerInstanceData, 1),",
        "                new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 2, SharpDX.DXGI.Format.R32G32B32A32_Float, 32,",
        "                                 1, InputClassification.PerInstanceData, 1),",
        "                new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 3, SharpDX.DXGI.Format.R32G32B32A32_Float, 48,",
        "                                 1, InputClassification.PerInstanceData, 1),",
        "            };",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5929d28d-c220-410d-9892-fe2308aae0ed",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6b50a24d-5766-486f-aacc-3a13bfb3ac07",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bc5a848f-e01b-459c-947d-24667ecaebc0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "06dc1519-cedb-4481-8acb-fa82d89ce14a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b22ff5fd-7201-49af-ac8e-fa9d8f0be7a6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "044c3924-b7d6-4f52-b734-27ff0e7f7079",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "35b31963-ed7f-4b5d-9dd0-b4baf6a4335e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "43d75e1e-d5e9-4574-9094-be88bfd533e4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f47e3b13-8306-4519-bd2e-5244e8d2c1a3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f41b39d4-b2bd-4cb3-a098-6340d10b56cb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "36a331c2-59e3-405a-8bd3-0180e5f9d12e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5dc3048d-2575-4d5e-8025-77556cfaeed7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5873123f-3b68-4f7f-b080-7929f63715b9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "79016abf-e7f2-41dd-b38b-5222e273ac5b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "03e3f275-3a4e-4449-a8f5-37b2677781c6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "48f1e26c-0c7c-4a08-8e79-a35cdb27ffc4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4ada840b-dcaf-415f-b403-99e81ca2003b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6c08be1a-14d2-4d06-aa27-0db6538cecbc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4c0fe6ac-c540-4b3e-9dce-075bf379eb17",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e2664071-32fc-4c6b-b269-4d68826877a4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "eef8505b-80ef-4449-b4dd-b2d59c6eb324",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5096335e-7ec7-4bea-a903-3a6919487005",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6f14f13e-ad62-49f2-ac25-5c519cf3ca0e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cc69d94e-f654-4756-b77e-9d5a1038ba61",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1932d429-e1b3-4420-a3cf-4c059fcb8b5d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a7ce231a-c757-49d6-8ea1-95db099aaf3c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "675f4961-b3f3-4df6-bc8f-4b39faeabc27",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5787ab8c-4f87-4067-8880-83b79632c93f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "77a4d9cb-9f58-44b5-86bb-846b2854d5ed",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "41ca8e60-c269-4db5-b6af-08837aa19960",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e5225c69-bd74-4ddc-a345-856895cba706",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b4a2889e-ff98-49e2-b06f-513ae7fed28e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c299d688-40d5-4d0c-a449-507ae934ac37",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "58ee0cf7-d6a5-4f9e-83ab-71718ca1805a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4004d925-d1d7-42e8-84a9-cfd872d29385",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8c9cf664-38f3-4a1c-8ec6-6758882bc629",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0ef65b4f-1494-4acf-8279-bcf565bc5be4"
    }
  ]
}