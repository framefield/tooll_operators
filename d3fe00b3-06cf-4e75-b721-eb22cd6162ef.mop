{
  "Name": "StripeDisplace",
  "_id": "d3fe00b3-06cf-4e75-b721-eb22cd6162ef",
  "Namespace": "lib.image.adjust",
  "Description": "A new version of displace with angle",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "3c34155a-5423-4dff-8dfa-53505c2e121d",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D Image;",
          "float Angle;",
          "float Width;",
          "float2 Center;",
          "float2 Shift;",
          "float2 Offset;",
          "float4 FillColor;",
          "float NoiseScale;",
          "float NoiseOffset;",
          "float SampleCount;",
          "float ChromaticAberation;",
          "float MotionBlur;",
          "//<<< _parameters\r",
          " \r",
          "//>>> setup\r",
          "SamplerState samLinear\r",
          "{\r",
          "    //Filter = MIN_MAG_LINEAR_MIP_POINT;\r",
          "    \r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "//<<< setup\r",
          "\r",
          "SamplerState samPoint\r",
          "{\r",
          "    //Filter = MIN_MAG_LINEAR_MIP_POINT;\r",
          "    \r",
          "    Filter = MIN_MAG_MIP_POINT;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "    //MipFilter = None \r",
          "};\r",
          "\r",
          "\r",
          "//>>> declarations\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float2 texCoord : TEXCOORD;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float2 texCoord: TEXCOORD0;\t    \r",
          "    float3 worldTViewPos: TEXCOORD1;\r",
          "    float3 worldTViewDir: TEXCOORD2;\r",
          "};\r",
          "//<<< declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "//>>> PS\r",
          "float2 rotate( float2 v, float deg) \r",
          "{\r",
          "    float rx = (v.x * cos(deg)) - (v.y * sin(deg));\r",
          "    float ry = (v.x * sin(deg)) + (v.y * cos(deg));\r",
          "    return float2(rx, ry);\r",
          "}\r",
          "\r",
          "float4 chromaShift(float4 c, float range) {\r",
          "    return float4(\r",
          "        c.r * clamp( 1.5 - abs(range + 1), 0,1) * 2,\r",
          "        c.g * clamp( 1.5 - abs(range ), 0,1),\r",
          "        c.b * clamp( 1.5 - abs(range - 1), 0,1) * 2,\r",
          "        c.a\r",
          "    );\r",
          "}\r",
          "\r",
          "float Seed = 137;\r",
          "\r",
          "// Calculate noise between 0 .. 1\r",
          "float noise( float x) \r",
          "{   \r",
          "    x = fmod(x,1234);\r",
          "    int n = (int)x + (int)Seed*137;\r",
          "       \r",
          "    n = (n << 13) ^ n;    \r",
          "    return abs(1.0f - ((n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0f);\r",
          "}\r",
          "\r",
          "\r",
          "float noiseSmooth (float x)\r",
          "{\r",
          "    float t= x - floor(x);\r",
          "    return lerp( noise(x), noise(x+1),t);    \r",
          "}\r",
          "\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float aspectRatio = RenderTargetSize.x/RenderTargetSize.y;\r",
          "    float4 color = 1;\r",
          "    \r",
          "    float deg = -Angle / 180 * 3.141578; \r",
          "    \r",
          "    float2 p = input.texCoord;\r",
          "    //return Image.Sample( samLinear, p, 0);\r",
          "    \r",
          "    float2 pWithoutAspect = float2(p.x * aspectRatio, p.y);\r",
          "    float2 p2 = (pWithoutAspect  - Center);\r",
          "   \r",
          "    float2 pRotated = rotate( p2, deg);\r",
          "    \r",
          "    float2 displacement = 0;;\r",
          "    \r",
          "    float stripeIndex = floor((pRotated.x) / Width );\r",
          "        \r",
          "    float posInsideStripe =  pRotated.x / Width - stripeIndex ;\r",
          "\r",
          "    displacement.x = Offset.x + Offset.y * (noiseSmooth((stripeIndex + NoiseOffset ) * NoiseScale)  - 0.5);\r",
          "    displacement.y = Shift.x + Shift.y * (noiseSmooth((stripeIndex  + NoiseOffset + 234.1516) * NoiseScale) - 0.5);\r",
          "    \r",
          "    float2 displacementRotated= rotate( displacement, -deg);\r",
          "        \r",
          "    float4 colorSum = float4(0,0,0,0);\r",
          "    float4 chromaticalSum = float4(0,0,0,0);\r",
          "    float2 blurOffset = displacementRotated * MotionBlur;\r",
          "    \r",
          "    blurOffset.x /= aspectRatio;\r",
          "    \r",
          "    float2 samplePos = p +  float2(displacementRotated.x / aspectRatio, displacementRotated.y);\r",
          "    float samples = float(SampleCount);\r",
          "    \r",
          "    for(int i = 0; i < SampleCount ; ++i) { \r",
          "    \r",
          "        if(   \r",
          "            displacementRotated.y + p.y < 0        \r",
          "            || displacementRotated.y + p.y > 1\r",
          "            || posInsideStripe.x + displacement.x / Width < 0\r",
          "            || posInsideStripe.x + displacement.x / Width > 1\r",
          "        ) {\r",
          "            colorSum += FillColor;\r",
          "            chromaticalSum += chromaShift(FillColor, (i+0.5) / samples - 0.5);\r",
          "        }\r",
          "        else {\r",
          "        \r",
          "            float4 sampledColor = Image.Sample( samLinear, samplePos, 0);\r",
          "            colorSum += sampledColor / samples;\r",
          "            chromaticalSum += chromaShift(sampledColor, (i+0.5) / samples - 0.5)  / samples;            \r",
          "        }\r",
          "        \r",
          "        samplePos+= blurOffset;\r",
          "    }\r",
          "    \r",
          "    float weight=1;\r",
          "    \r",
          "    return lerp(colorSum, chromaticalSum, ChromaticAberation);\r",
          "    //return float4(rgb, 1);\r",
          "    \r",
          "    /*\r",
          "    for (int i = 0; i < NumberOfSamples; ++i)\r",
          "    {\r",
          "        c += Image.SampleLevel(samLinear, input.texCoord + pos, 0)*weight;\r",
          "        c += Image.SampleLevel(samLinear, input.texCoord - pos, 0)*weight;\r",
          "        pos += dir;\r",
          "        totalWeight += 2*weight;\r",
          "    }\r",
          "    c.rgb /= totalWeight;\r",
          "    c.a = 1.0;\r",
          "    */\r",
          "    \r",
          "    return colorSum/SampleCount;\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_5_0, PS() ) );",
          "    }",
          "}",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "b7c8956c-be7e-4aea-9c29-80726272af83",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Angle",
      "MetaInstanceID": "a26d2278-2e4b-4381-9880-0b5545aebbd0",
      "DefaultValue": {
        "Type": "Float",
        "Value": "45"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Width",
      "MetaInstanceID": "7745772f-945b-457d-9284-4f465a0fb525",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.X",
      "MetaInstanceID": "b7624fa4-60aa-4cf5-a45f-e9275f847bbf",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Y",
      "MetaInstanceID": "96cde99c-9e1b-46b9-9d82-99ebdc806ed7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Shift.Amount",
      "MetaInstanceID": "2198d0b9-aa15-43a1-8d89-9592a04abe62",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Shift.Random",
      "MetaInstanceID": "366f19e3-85c9-4ea4-a8cd-74b741d1506f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Offset.Amount",
      "MetaInstanceID": "d09f6e72-0797-4728-a2b9-21672d6ac306",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Offset.Random",
      "MetaInstanceID": "f869d7ae-96ae-4cd1-a514-d121ff81cf98",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FillColor.R",
      "MetaInstanceID": "cacf00a5-bab0-47b7-8685-4fa3f2b20e72",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FillColor.G",
      "MetaInstanceID": "55e0ba17-c562-4427-9411-10f3b34a9531",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FillColor.B",
      "MetaInstanceID": "5fcaf1f2-8f7b-4183-bc79-c21a3a070817",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FillColor.A",
      "MetaInstanceID": "1c7f09de-bdae-4b79-8167-8431f3d718c5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseScale",
      "MetaInstanceID": "ae01d1a2-095a-48b2-aee8-a4e094c881cb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseOffset",
      "MetaInstanceID": "bcbb555b-f627-403b-b80d-4538218c15dc",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SampleCount",
      "MetaInstanceID": "620ffb62-c395-46ef-82d5-376e1423ff83",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "100",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ChromaticAberation",
      "MetaInstanceID": "44136e17-0ade-4641-bb7a-7434a57fef8a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MotionBlur",
      "MetaInstanceID": "cb64c29b-9039-45fe-8088-846b915699a1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "4fc8f7f6-69b3-4d73-94c0-db08a140f406",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae",
      "MetaID": "56f95fee-3956-475a-b5bc-a0d173a1a70e",
      "Name": "StripeDisplaceFunc",
      "Version": "4162e774-bbcb-4ae2-bd46-38bed3293366",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID56f95fee_3956_475a_b5bc_a0d173a1a70e",
        "{",
        "    public class Class_StripeDisplace : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Angle = 2,",
        "            Width = 3,",
        "            CenterX = 4,",
        "            CenterY = 5,",
        "            ShiftAmount = 6,",
        "            ShiftRandom = 7,",
        "            OffsetAmount = 8,",
        "            OffsetRandom = 9,",
        "            FillColorR = 10,",
        "            FillColorG = 11,",
        "            FillColorB = 12,",
        "            FillColorA = 13,",
        "            NoiseScale = 14,",
        "            NoiseOffset = 15,",
        "            SampleCount = 16,",
        "            ChromaticAberation = 17,",
        "            MotionBlur = 18",
        "        }",
        "        //<<< _inputids",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Image = inputs[(int)InputId.Image].Eval(context).Image; // Needs to be checked for null!",
        "            var Angle = inputs[(int)InputId.Angle].Eval(context).Value;",
        "            var Width = inputs[(int)InputId.Width].Eval(context).Value;",
        "            var CenterX = inputs[(int)InputId.CenterX].Eval(context).Value;",
        "            var CenterY = inputs[(int)InputId.CenterY].Eval(context).Value;",
        "            var Center = new Vector2(CenterX, CenterY);",
        "            var ShiftAmount = inputs[(int)InputId.ShiftAmount].Eval(context).Value;",
        "            var ShiftRandom = inputs[(int)InputId.ShiftRandom].Eval(context).Value;",
        "            var Shift = new Vector2(ShiftAmount, ShiftRandom);",
        "            var OffsetAmount = inputs[(int)InputId.OffsetAmount].Eval(context).Value;",
        "            var OffsetRandom = inputs[(int)InputId.OffsetRandom].Eval(context).Value;",
        "            var Offset = new Vector2(OffsetAmount, OffsetRandom);",
        "            var FillColorR = inputs[(int)InputId.FillColorR].Eval(context).Value;",
        "            var FillColorG = inputs[(int)InputId.FillColorG].Eval(context).Value;",
        "            var FillColorB = inputs[(int)InputId.FillColorB].Eval(context).Value;",
        "            var FillColorA = inputs[(int)InputId.FillColorA].Eval(context).Value;",
        "            var FillColor = new Color4(FillColorR, FillColorG, FillColorB, FillColorA);",
        "            var NoiseScale = inputs[(int)InputId.NoiseScale].Eval(context).Value;",
        "            var NoiseOffset = inputs[(int)InputId.NoiseOffset].Eval(context).Value;",
        "            var SampleCount = inputs[(int)InputId.SampleCount].Eval(context).Value;",
        "            var ChromaticAberation = inputs[(int)InputId.ChromaticAberation].Eval(context).Value;",
        "            var MotionBlur = inputs[(int)InputId.MotionBlur].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            return PrepareAndEvalOnChange(context, () => {",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "                ",
        "                //context.BlendState = Renderer.DisabledBlendState;",
        "                ",
        "                if(Image == null)",
        "                    return;",
        "",
        "                //SampleCount = (float)Math.Floor(SampleCount);",
        "                //>>> _setup",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"Angle\").AsScalar().Set(Angle);",
        "                    _effect.GetVariableByName(\"Width\").AsScalar().Set(Width);",
        "                    _effect.GetVariableByName(\"Center\").AsVector().Set(new Vector2(CenterX, CenterY));",
        "                    _effect.GetVariableByName(\"Shift\").AsVector().Set(new Vector2(ShiftAmount, ShiftRandom));",
        "                    _effect.GetVariableByName(\"Offset\").AsVector().Set(new Vector2(OffsetAmount, OffsetRandom));",
        "                    _effect.GetVariableByName(\"FillColor\").AsVector().Set(new Vector4(FillColorR, FillColorG, FillColorB, FillColorA));",
        "                    _effect.GetVariableByName(\"NoiseScale\").AsScalar().Set(NoiseScale);",
        "                    _effect.GetVariableByName(\"NoiseOffset\").AsScalar().Set(NoiseOffset);",
        "                    _effect.GetVariableByName(\"SampleCount\").AsScalar().Set(SampleCount);",
        "                    _effect.GetVariableByName(\"ChromaticAberation\").AsScalar().Set(ChromaticAberation);",
        "                    _effect.GetVariableByName(\"MotionBlur\").AsScalar().Set(MotionBlur);",
        "                //<<< _setup",
        "",
        "                    var prevBlendState = context.BlendState;",
        "                    //context.BlendState = OperatorPartContext.DefaultRenderer.DisabledBlendState;",
        "",
        "/*",
        "                    var blendStateDescription = new BlendStateDescription();",
        "                    blendStateDescription.RenderTarget[0].IsBlendEnabled = true;",
        "                    blendStateDescription.RenderTarget[0].SourceBlend = BlendOption.SourceAlpha;",
        "                    blendStateDescription.RenderTarget[0].DestinationBlend = BlendOption.InverseSourceAlpha;",
        "                    blendStateDescription.RenderTarget[0].BlendOperation = BlendOperation.Add;",
        "                    blendStateDescription.RenderTarget[0].SourceAlphaBlend = BlendOption.One;",
        "                    blendStateDescription.RenderTarget[0].DestinationAlphaBlend = BlendOption.InverseSourceAlpha;",
        "                    blendStateDescription.RenderTarget[0].AlphaBlendOperation = BlendOperation.Add;",
        "                    blendStateDescription.RenderTarget[0].RenderTargetWriteMask = ColorWriteMaskFlags.All;",
        "                    blendStateDescription.AlphaToCoverageEnable = false;",
        "                    var newBlendState = new BlendState(D3DDevice.Device, blendStateDescription);",
        "                    context.BlendState = newBlendState;",
        "                    */",
        "                    ",
        "                    Render(context);",
        "    ",
        "                    //context.BlendState = prevBlendState;",
        "",
        "                //Render(context);",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4fc8f7f6-69b3-4d73-94c0-db08a140f406"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3c34155a-5423-4dff-8dfa-53505c2e121d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b7c8956c-be7e-4aea-9c29-80726272af83",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a26d2278-2e4b-4381-9880-0b5545aebbd0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7745772f-945b-457d-9284-4f465a0fb525",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b7624fa4-60aa-4cf5-a45f-e9275f847bbf",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "96cde99c-9e1b-46b9-9d82-99ebdc806ed7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2198d0b9-aa15-43a1-8d89-9592a04abe62",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "366f19e3-85c9-4ea4-a8cd-74b741d1506f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d09f6e72-0797-4728-a2b9-21672d6ac306",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f869d7ae-96ae-4cd1-a514-d121ff81cf98",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cacf00a5-bab0-47b7-8685-4fa3f2b20e72",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "55e0ba17-c562-4427-9411-10f3b34a9531",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5fcaf1f2-8f7b-4183-bc79-c21a3a070817",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1c7f09de-bdae-4b79-8167-8431f3d718c5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ae01d1a2-095a-48b2-aee8-a4e094c881cb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bcbb555b-f627-403b-b80d-4538218c15dc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "620ffb62-c395-46ef-82d5-376e1423ff83",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "44136e17-0ade-4641-bb7a-7434a57fef8a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cb64c29b-9039-45fe-8088-846b915699a1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "570b0602-ad98-4fc4-a6d3-bfa164bbf6ae"
    }
  ]
}