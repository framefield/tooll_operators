{
  "Name": "Wobbler2",
  "_id": "bf331a51-3aff-4c07-942a-c1a49bd2a856",
  "Namespace": "lib.3d.modify",
  "Description": "GPU-based noise deformer derived from Scatter.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "f67f6edf-c954-4e75-aa98-6d4adf4322c4",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _parameters\r",
          "float Value;",
          "float3 Center;",
          "float NoiseTime;",
          "float NoiseAmount;",
          "float2 Range;",
          "float NoiseScale;",
          "//<<< _parameters\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "float Noise(int x, int seed)\r",
          "{\r",
          "    int n = x + seed*137;\r",
          "    n = (n << 13) ^ n;\r",
          "    return (float) (1.0 - ((n*(n*n*15731 + 789221) + 1376312589) & 0x7fffffff)/1073741824.0);\r",
          "}\r",
          "\r",
          "float Lerp(float a, float b, float t)\r",
          "{\r",
          "    return a + t*(b - a);\r",
          "}\r",
          "\r",
          "float Fade(float t)\r",
          "{\r",
          "    return t*t*t*(t*(t*6 - 15) + 10);\r",
          "}\r",
          "\r",
          "float SEED= 2323;\r",
          "\r",
          "float getNoise(float value)\r",
          "{\r",
          "    float noiseSum = 0.0f;\r",
          "    value *= NoiseScale;\r",
          "    value += NoiseTime;\r",
          "\r",
          "\r",
          "    noiseSum = Lerp(Noise((int) value, SEED),\r",
          "                    Noise((int) value + 1, SEED),\r",
          "                    Fade(value - (float) floor(value)));\r",
          "    return noiseSum;\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "float _noiseTime=0;\r",
          "float _frequency=0;\r",
          "\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{\r",
          "\r",
          "    /*\r",
          "    float3 pCenter = (input[0].pos.xyz + input[1].pos.xyz + input[2].pos.xyz)/3 + Translate;\r",
          "\r",
          "    float randomSeedf= ((input[0].pos.x + input[1].pos.x + input[2].pos.x) / 3 +\r",
          "                (input[0].pos.y + input[1].pos.y + input[2].pos.y) / 3 -\r",
          "                (input[0].pos.z + input[1].pos.z + input[2].pos.z) / 3) * 100;\r",
          "    int seed = (int)randomSeedf;\r",
          "\r",
          "    float3 direction = (pCenter-Center);\r",
          "    float distance = length(direction);            \r",
          "    //float x =   clamp(( Range.y - distance) / Range.x, 0, 1);\r",
          "    float falloff = Range.y;\r",
          "    if (falloff == 0) {\r",
          "        falloff = 0.00001;\r",
          "    }\r",
          "    float x = clamp(- (distance - Range.x)/falloff, 0, 1);\r",
          "    \r",
          "    float influence = x*x*(3 - 2*x);  // SmoothStep\r",
          "\r",
          "\r",
          "    float angleX= influence * 3.141578 * Rotate/360 * getNoise(13, seed);\r",
          "    float cax= cos(angleX);\r",
          "    float sax= sin(angleX);    \r",
          "    float4x4 rotx = {    1,    0,    0,    0,\r",
          "                         0,    cax, -sax,  0,\r",
          "                         0,    sax,  cax,  0,\r",
          "                         0,    0,    0,    1};\r",
          "    float angleY= influence * 3.141578 * Rotate/360 * getNoise(1233, seed);\r",
          "    float cay= cos(angleY);\r",
          "    float say= sin(angleY);    \r",
          "    float4x4 roty = {    cay,  0,    say,  0,\r",
          "                         0,    1,    0,    0,\r",
          "                        -say,  0,    cay,  0,\r",
          "                         0,    0,    0,    1};\r",
          "    float4x4 rotation = mul(rotx,roty);                         \r",
          "                             \r",
          "    float4x4 translateToOrigin ={ 1,    0,    0,   -pCenter.x,\r",
          "                             0,    1,    0,   -pCenter.y,\r",
          "                             0,    0,    1,   -pCenter.z,\r",
          "                             0,    0,    0,   1};\r",
          "\r",
          "    float4x4 translateBack={  1,    0,    0,   pCenter.x,\r",
          "                             0,    1,    0,    pCenter.y,\r",
          "                             0,    0,    1,    pCenter.z,\r",
          "                             0,    0,    0,   1};\r",
          "\r",
          "\r",
          "    float3 offset=  normalize(direction) * influence * ( Push + getNoise(2342, seed) * Scatter );\r",
          "    float4x4 translateOffset={ 1,    0,    0,   offset.x,\r",
          "                               0,    1,    0,   offset.y,\r",
          "                               0,    0,    1,   offset.z, \r",
          "                               0,    0,    0,   1};\r",
          "\r",
          "\r",
          "    \r",
          "    float4x4 transform = translateToOrigin;\r",
          "    transform = mul( rotation, transform);\r",
          "    transform = mul( translateBack, transform);\r",
          "    transform = mul( translateOffset, transform);\r",
          "    */\r",
          "/*\r",
          "    Vertex v0 = input[0];\r",
          "    Vertex v1 = input[1];\r",
          "    Vertex v2 = input[2];\r",
          "    \r",
          "    v0.pos.xyz += float3(getNoise((v0.pos.y+v0.pos.z) * NoiseScale - 6.3f), \r",
          "                     getNoise((v0.pos.z) * NoiseScale + 9.3f), \r",
          "                     getNoise((v0.pos.x) * NoiseScale - 0.3f)) * NoiseAmount;\r",
          "\r",
          "    v1.pos.xyz += float3(getNoise((v1.pos.y+v1.pos.z) * NoiseScale - 6.3f), \r",
          "                         getNoise((v1.pos.z) * NoiseScale + 9.3f), \r",
          "                         getNoise((v1.pos.x) * NoiseScale - 0.3f)) * NoiseAmount;\r",
          "    v2.pos.xyz += float3(getNoise((v2.pos.y+v2.pos.z) * NoiseScale - 6.3f), \r",
          "                     getNoise((v2.pos.z) * NoiseScale + 9.3f), \r",
          "                     getNoise((v2.pos.x) * NoiseScale - 0.3f)) * NoiseAmount;\r",
          "\r",
          "    float3 n= cross( v1.pos-v0.pos, v2.pos-v0.pos); \r",
          "    v0.normal =n;\r",
          "    v1.normal =n;\r",
          "    v2.normal =n;\r",
          "                     \r",
          "\r",
          "    outputStream.Append(v0);\r",
          "    outputStream.Append(v1);\r",
          "    outputStream.Append(v2);\r",
          "    */\r",
          "    \r",
          "    //float3 p0 = input[0].pos;\r",
          "    //float3 p1 = input[0].pos;\r",
          "\r",
          "\r",
          "    \r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "        Vertex vertex = input[i];\r",
          "        float4 p = vertex.pos;\r",
          "        //p.xyz+= Translate;\r",
          "        \r",
          "        // Distort\r",
          "        //_noiseTime = Push;\r",
          "        //_frequency = 1/Shrink;\r",
          "        float distance = length(p-Center);\r",
          "        \r",
          "        float fadingNoiseAmount = NoiseAmount * smoothstep(Range.x, Range.y, distance) * Value;\r",
          "        \r",
          "        float3 noiseOffset = float3(getNoise((p.y+p.z) * NoiseScale - 6.3f), \r",
          "                                    getNoise((p.z+p.x) * NoiseScale - 9.3f), \r",
          "                                    getNoise((p.x+p.y) * NoiseScale - 0.3f));\r",
          "                               \r",
          "        vertex.pos.xyz += noiseOffset * fadingNoiseAmount;\r",
          "        outputStream.Append(vertex);\r",
          "\r",
          "        //p.x+= sin( noiseOffset.x * NoiseScale2) * noiseOffset.y * NoiseAmount;\r",
          "        //p.y+= sin( noiseOffset.y * NoiseScale2) * noiseOffset.y * NoiseAmount;\r",
          "        //p.z+= sin( noiseOffset.z * NoiseScale2) * noiseOffset.y * NoiseAmount;\r",
          "        //p.xyz += noiseOffset * NoiseAmount;\r",
          "        \r",
          "        \r",
          "        \r",
          "    }\r",
          "    \r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scene",
      "MetaInstanceID": "455c9f2d-f99f-48af-9561-bd6705f6bb83",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Value",
      "MetaInstanceID": "9287231f-b31b-4192-9b49-0ecde34f0aa2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.X",
      "MetaInstanceID": "00d78062-606d-4f65-92f6-df3e67a34c2d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Y",
      "MetaInstanceID": "f3eec6c2-bd37-4590-8628-09be4041f26e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Z",
      "MetaInstanceID": "3e36299e-614d-42ce-841c-42afac3e31c6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseTime",
      "MetaInstanceID": "6f5450f1-fe57-4e0b-a44d-c59141de8227",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseAmount",
      "MetaInstanceID": "e4a680c9-8bce-4543-b3bb-d7bf7eb739e4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Range.Min",
      "MetaInstanceID": "6f4aa507-da5c-48a2-bf7b-6f8a5f9b3047",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Range.Max",
      "MetaInstanceID": "3d57cf31-db8f-4a69-8168-003b759ca7d8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseScale",
      "MetaInstanceID": "7dc786a9-1fe3-465d-b007-2e04a4f9b681",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "827572d6-bdd0-4253-bd94-a27f87011962",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "a78dc7c5-0461-427c-a431-18a8d567419e",
      "MetaID": "fc9ee2d2-3bcd-4b53-b941-ca4960082f54",
      "Name": "Wobbler2Func",
      "Version": "7b62e58e-317a-4352-8b52-7c2a3cb8fed3",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using SharpDX.Direct3D;",
        "",
        "namespace Framefield.Core.IDfc9ee2d2_3bcd_4b53_b941_ca4960082f54",
        "{",
        "    public class Class_Wobbler2 : FXSourceCodeFunction, IFXSceneSourceCode, IMeshSupplier",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scene = 1,",
        "            Value = 2,",
        "            CenterX = 3,",
        "            CenterY = 4,",
        "            CenterZ = 5,",
        "            NoiseTime = 6,",
        "            NoiseAmount = 7,",
        "            RangeMin = 8,",
        "            RangeMax = 9,",
        "            NoiseScale = 10",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class_Wobbler2()",
        "        {",
        "            _meshCollector = new MeshCollector(this);",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public void AddMeshesTo(ICollection<Mesh> meshes)",
        "        {",
        "            UpdateMesh(new OperatorPartContext(), OperatorPart.Connections);",
        "            if (_mesh != null)",
        "                meshes.Add(_mesh);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "",
        "                if (_mesh.Vertices != null)",
        "                {",
        "                    // render stream output to screen or whatever target is set",
        "                    context.Renderer.SetupEffect(context);",
        "                    context.Renderer.Render(_mesh, context);",
        "                }",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            if (!Changed && _mesh.Vertices != null)",
        "                return;",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Scene = inputs[(int)InputId.Scene];",
        "            var Value = inputs[(int)InputId.Value].Eval(context).Value;",
        "            var CenterX = inputs[(int)InputId.CenterX].Eval(context).Value;",
        "            var CenterY = inputs[(int)InputId.CenterY].Eval(context).Value;",
        "            var CenterZ = inputs[(int)InputId.CenterZ].Eval(context).Value;",
        "            var Center = new Vector3(CenterX, CenterY, CenterZ);",
        "            var NoiseTime = inputs[(int)InputId.NoiseTime].Eval(context).Value;",
        "            var NoiseAmount = inputs[(int)InputId.NoiseAmount].Eval(context).Value;",
        "            var RangeMin = inputs[(int)InputId.RangeMin].Eval(context).Value;",
        "            var RangeMax = inputs[(int)InputId.RangeMax].Eval(context).Value;",
        "            var Range = new Vector2(RangeMin, RangeMax);",
        "            var NoiseScale = inputs[(int)InputId.NoiseScale].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            if (Scene.Func.Changed || _mesh.Vertices == null)",
        "            {",
        "                //Logger.Info(this, \"collect meshes\");",
        "                _meshCollector.Collect(Scene);",
        "                Scene.Func.Changed = false;",
        "            }",
        "",
        "            var inputMesh = _meshCollector.FirstMeshOrDefault;",
        "            if (inputMesh == null)",
        "                return;",
        "",
        "            _mesh.AttributesSize = inputMesh.AttributesSize;",
        "            _mesh.NumTriangles = inputMesh.NumTriangles;",
        "            _mesh.InputElements = inputMesh.InputElements;",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != inputMesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                if (_mesh.Vertices != null)",
        "                    _mesh.Vertices.Dispose();",
        "",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                    {",
        "                                                                        BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                        CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                        OptionFlags = ResourceOptionFlags.None,",
        "                                                                        SizeInBytes = _mesh.NumTriangles*inputMesh.AttributesSize*3,",
        "                                                                        Usage = ResourceUsage.Default",
        "                                                                    });",
        "            }",
        "",
        "            _effect.GetVariableByName(\"Value\").AsScalar().Set(Value);",
        "            _effect.GetVariableByName(\"Center\").AsVector().Set(new Vector3(CenterX, CenterY, CenterZ));",
        "            //_effect.GetVariableByName(\"Translate\").AsVector().Set(new Vector3(TranslateX, TranslateY, TranslateZ));",
        "            //_effect.GetVariableByName(\"Range\").AsVector().Set(new Vector(RangeSize, RangeFallOff));",
        "            _effect.GetVariableByName(\"NoiseTime\").AsScalar().Set(NoiseTime);",
        "            _effect.GetVariableByName(\"NoiseAmount\").AsScalar().Set(NoiseAmount);",
        "            _effect.GetVariableByName(\"Range\").AsVector().Set(Range);",
        "            //_effect.GetVariableByName(\"NoiseMax\").AsScalar().Set(RangeMax);",
        "            _effect.GetVariableByName(\"NoiseScale\").AsScalar().Set(NoiseScale);",
        "            //_effect.GetVariableByName(\"Rotate\").AsScalar().Set(Rotate);",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, 0) });",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(inputMesh.Vertices, inputMesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw(_mesh.NumTriangles*3, 0);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "        private MeshCollector _meshCollector;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a78dc7c5-0461-427c-a431-18a8d567419e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "827572d6-bdd0-4253-bd94-a27f87011962"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f67f6edf-c954-4e75-aa98-6d4adf4322c4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a78dc7c5-0461-427c-a431-18a8d567419e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "455c9f2d-f99f-48af-9561-bd6705f6bb83",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a78dc7c5-0461-427c-a431-18a8d567419e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9287231f-b31b-4192-9b49-0ecde34f0aa2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a78dc7c5-0461-427c-a431-18a8d567419e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "00d78062-606d-4f65-92f6-df3e67a34c2d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a78dc7c5-0461-427c-a431-18a8d567419e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f3eec6c2-bd37-4590-8628-09be4041f26e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a78dc7c5-0461-427c-a431-18a8d567419e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3e36299e-614d-42ce-841c-42afac3e31c6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a78dc7c5-0461-427c-a431-18a8d567419e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6f5450f1-fe57-4e0b-a44d-c59141de8227",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a78dc7c5-0461-427c-a431-18a8d567419e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e4a680c9-8bce-4543-b3bb-d7bf7eb739e4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a78dc7c5-0461-427c-a431-18a8d567419e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6f4aa507-da5c-48a2-bf7b-6f8a5f9b3047",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a78dc7c5-0461-427c-a431-18a8d567419e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3d57cf31-db8f-4a69-8168-003b759ca7d8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a78dc7c5-0461-427c-a431-18a8d567419e"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7dc786a9-1fe3-465d-b007-2e04a4f9b681",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a78dc7c5-0461-427c-a431-18a8d567419e"
    }
  ]
}