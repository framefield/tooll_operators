{
  "Name": "PointBezierCurve",
  "_id": "1b7b2fb7-7fee-4d7a-a921-91a74322beee",
  "Namespace": "lib.basic.curve",
  "Description": "interpolates the incoming points into a cubic curve. This can be used to define movement curves for particles or cameras.",
  "Inputs": [
    {
      "Name": "Points",
      "MetaInstanceID": "a7ad59d5-12a6-4967-8cfb-f90051669d5f",
      "DefaultValue": {
        "Type": "Dynamic",
        "Value": "Framefield.Core.Dynamic"
      },
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76",
      "IsMultiInput": "True",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "U",
      "MetaInstanceID": "462af756-2209-46ba-90bb-6b3f03bce27a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "X",
      "MetaInstanceID": "00ab81b1-df66-4053-ba97-d916da3285af",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "Y",
      "MetaInstanceID": "b20534d0-02ba-465b-b876-0378f436ff77",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "Z",
      "MetaInstanceID": "c8ccba12-abf0-4e74-9117-f8e346ccb754",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "2d963303-0cb8-4416-a47d-f2098b3993c6",
      "MetaID": "488920e6-ddff-4d3f-9c52-211756e3c540",
      "Name": "PointBezierCurveFunc",
      "Version": "07811da0-4a8e-4a00-9f9e-af99d85ed6ea",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "using Framefield.Core.IDb03022e3_8b4f_4d33_b749_ef30a03ef098; // CurveProviderFunc",
        "//<<< _using",
        "",
        "namespace Framefield.Core.ID488920e6_ddff_4d3f_9c52_211756e3c540",
        "{",
        "    public class Class_PointBezierCurve : OperatorPart.Function, ICurveProvider",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Points = 0,",
        "            U = 1",
        "        }",
        "        //<<< _inputids",
        "        ",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            X = 0,",
        "            Y = 1,",
        "            Z = 2",
        "        }",
        "        //<<< _outputids",
        "        ",
        "        public List<Vector4> GetPoints() {",
        "            return _controlPoints;",
        "        }",
        "        ",
        "        public Vector4 SampleAt(double p) {",
        "            return Vector4.Zero;",
        "        }",
        "        ",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) ",
        "        {",
        "            //>>> _params",
        "            var Points = inputs[(int)InputId.Points].Eval(context).Dynamic;  // Needs to be checked for null!",
        "            var U = inputs[(int)InputId.U].Eval(context).Value;",
        "            //<<< _params",
        "            ",
        "            var somePointChanged = false;",
        "            var pointConnections = inputs[(int)InputId.Points].Connections;",
        "            ",
        "            _controlPoints = new List<Vector4>();",
        "           ",
        "           foreach( var c in pointConnections) ",
        "           {",
        "                var p = c.Eval(context).Dynamic; ",
        "                Vector4 pp = p;",
        "                _controlPoints.Add( pp);",
        "                somePointChanged = true;                    ",
        "            }",
        "            ",
        "            _drawingPoints = GetDrawingPoints();",
        "            ",
        "            if( U != _u) {",
        "                _p = GetPointAtU(U);",
        "                _u = U;            ",
        "            }",
        "            ",
        "            switch( (int) outputIdx) {",
        "                case (int)OutputId.X: context.Value= _p.X; break;",
        "                case (int)OutputId.Y: context.Value= _p.Y; break;",
        "                case (int)OutputId.Z: context.Value= _p.Z; break;",
        "            }",
        "                       ",
        "            return context;",
        "        }",
        "",
        "        private float _u;",
        "        private Vector4 _p;",
        "        private const float EPSILON = 0.0001f;",
        "        private List<Vector4> _controlPoints;",
        "        private Vector4[] _drawingPoints;",
        "        private int _numPoints;",
        "        const int SEGMENTS_PER_CURVE = 10;",
        "        ",
        "        ",
        "        private Vector4 GetPointAtU(float u) ",
        "        {",
        "            int nCurves = _drawingPoints.Count() / SEGMENTS_PER_CURVE;",
        "            if(nCurves ==0) {",
        "                return Vector4.Zero;",
        "                ",
        "            }",
        "            else {",
        "            ",
        "                var t = u / 3 * SEGMENTS_PER_CURVE;",
        "                t= Utilities.Clamp( t, 0, _drawingPoints.Count() - 2);",
        "                var n = (int)Math.Floor(t);",
        "                ",
        "                return Vector4.Lerp( _drawingPoints[n], _drawingPoints[n+1], t - n); ",
        "            }",
        "        }",
        "        ",
        "        Vector4 CalculateBezierPoint(float t, Vector4 p0, Vector4 p1, Vector4 p2, Vector4 p3)",
        "        {",
        "            float u = 1.0f - t;",
        "            float tt = t*t;",
        "            float uu = u*u;",
        "            float uuu = uu * u;",
        "            float ttt = tt * t;",
        "            ",
        "            Vector4 p = uuu * p0; //first term",
        "            p += 3.0f * uu * t * p1; //second term",
        "            p += 3.0f * u * tt * p2; //third term",
        "            p += ttt * p3; //fourth term",
        "            ",
        "            return p;",
        "        }  ",
        "        ",
        "        public Vector4[] GetDrawingPoints()",
        "        {",
        "",
        "            var curveCount = (_controlPoints.Count - 3)/3;",
        "            var drawingPoints = new Vector4[(curveCount+1) * SEGMENTS_PER_CURVE +1];",
        "            var index= 0;",
        "            ",
        "            for(int i = 0; i < _controlPoints.Count - 3; i+=3)",
        "            {",
        "                Vector4 p0 = _controlPoints[i];",
        "                Vector4 p1 = _controlPoints[i + 1];",
        "                Vector4 p2 = _controlPoints[i + 2];",
        "                Vector4 p3 = _controlPoints[i + 3];",
        "        ",
        "                if(i == 0) //Only do this for the first endpoint.",
        "                         //When i != 0, this coincides with the end",
        "                         //point of the previous segment",
        "                {",
        "                    drawingPoints[index++] = CalculateBezierPoint(0, p0, p1, p2, p3);",
        "                }    ",
        "        ",
        "                for(int j = 1; j <= SEGMENTS_PER_CURVE; j++)",
        "                {",
        "                    float t = j / (float) SEGMENTS_PER_CURVE;",
        "                    drawingPoints[index++] = CalculateBezierPoint(t, p0, p1, p2, p3);",
        "                }",
        "            }",
        "    ",
        "            return drawingPoints;",
        "        }",
        "    }    ",
        "    ",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [
    {
      "Name": "CurveProvider",
      "MetaInstanceID": "97356d92-9278-4bf1-986f-7bd286180aab",
      "MetaID": "6a030fc7-b200-478e-84a1-dd4825b8d5cc",
      "OperatorProperties": {
        "Name": "",
        "PosX": "100",
        "PosY": "100",
        "Width": "100",
        "Visible": "True",
        "Disabled": "False",
        "Inputs": [],
        "States": []
      }
    }
  ],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a7ad59d5-12a6-4967-8cfb-f90051669d5f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2d963303-0cb8-4416-a47d-f2098b3993c6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "462af756-2209-46ba-90bb-6b3f03bce27a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "2d963303-0cb8-4416-a47d-f2098b3993c6"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2d963303-0cb8-4416-a47d-f2098b3993c6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "00ab81b1-df66-4053-ba97-d916da3285af"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2d963303-0cb8-4416-a47d-f2098b3993c6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b20534d0-02ba-465b-b876-0378f436ff77"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2d963303-0cb8-4416-a47d-f2098b3993c6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "c8ccba12-abf0-4e74-9117-f8e346ccb754"
    }
  ]
}