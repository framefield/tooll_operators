{
  "Name": "ReplicateMesh",
  "_id": "e4fb187c-fded-4518-896f-64bb23fd95fd",
  "Namespace": "lib.mesh.modify",
  "Description": "Instanciates the incoming mesh.\r\n\r\nAlso Try [ReplicateToGrid] and [CircularReplicate]",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "31adc267-5e60-44cf-9fa8-94bf9ff9085a",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 objectToWorldMatrix;\r",
          "float4x4 worldToCameraMatrix;\r",
          "float4x4 cameraToObjectMatrix; // modelview inverse\r",
          "float4x4 projMatrix;\r",
          "float4x4 textureMatrix;\r",
          "\r",
          "\r",
          "struct PointLight\r",
          "{\r",
          "    float4 position;\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float4 attenuation;\r",
          "};\r",
          "\r",
          "struct SpotLight\r",
          "{\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float constantAttenuation;\r",
          "    float linearAttenuation;\r",
          "    float quadraticAttenuation;\r",
          "    float spotCutoff;\r",
          "    float spotCosCutoff;\r",
          "    float spotExponent;\r",
          "};\r",
          "\r",
          "cbuffer FogSettings\r",
          "{\r",
          "    float4 fogColor;\r",
          "    float fogStart;\r",
          "    float fogEnd;\r",
          "    float fogScale;\r",
          "}\r",
          "\r",
          "cbuffer MaterialBuffer\r",
          "{\r",
          "    float4 materialAmbient;\r",
          "    float4 materialDiffuse;\r",
          "    float4 materialSpecular;\r",
          "    float4 materialEmission;\r",
          "    float materialShininess;\r",
          "};\r",
          "\r",
          "\r",
          "cbuffer PointLightsBuffer\r",
          "{\r",
          "    int numPointLights;\r",
          "    PointLight pointLights[3];\r",
          "};\r",
          "\r",
          "\r",
          "Texture2D txDiffuse;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "    float4 objToWorldRow0 : INSTANCE_OBJ_TO_WORLD_ROW0;\r",
          "    float4 objToWorldRow1 : INSTANCE_OBJ_TO_WORLD_ROW1;\r",
          "    float4 objToWorldRow2 : INSTANCE_OBJ_TO_WORLD_ROW2;\r",
          "    float4 objToWorldRow3 : INSTANCE_OBJ_TO_WORLD_ROW3;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "float mod(float a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "float3 mod(float3 a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "\r",
          "PS_IN VS( VS_IN input )\r",
          "{\r",
          "    PS_IN output = (PS_IN)0;\r",
          "    float4x4 instanceToWorldMatrix = float4x4(input.objToWorldRow0,\r",
          "                                              input.objToWorldRow1,\r",
          "                                              input.objToWorldRow2,\r",
          "                                              input.objToWorldRow3);\r",
          "    output.pos = mul(input.pos, instanceToWorldMatrix);\r",
          "    \r",
          "    float4 n4 = float4(input.normal.xyz,0);    \r",
          "    output.normal = normalize(mul(n4, instanceToWorldMatrix));\r",
          "    output.texCoord = mul(float4(input.texCoord, 0, 1), textureMatrix).xy;\r",
          "    output.col = input.col;\r",
          "    //output.col = float4(0,1,0,1);\r",
          "    output.tangent = input.tangent;\r",
          "    output.binormal = input.binormal;\r",
          "      \r",
          "    return output;\r",
          "}\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle PS_IN input[3], inout TriangleStream<PS_IN> outputStream)\r",
          "{\r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "        PS_IN vertex = input[i];\r",
          "        outputStream.Append(vertex);\r",
          "    }\r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VS()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MeshInput",
      "MetaInstanceID": "cfc02766-476a-4b92-9662-f1bbec82f279",
      "DefaultValue": {
        "Type": "Mesh",
        "Value": "Framefield.Core.MeshValue"
      },
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206",
      "IsMultiInput": "True",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Count",
      "MetaInstanceID": "98fe46b7-acd9-42ab-82ee-0b04a0484485",
      "DefaultValue": {
        "Type": "Float",
        "Value": "500"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Radius",
      "MetaInstanceID": "3e2d9c7b-8fc9-4d1d-8643-3fbe72640163",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Stretch.X",
      "MetaInstanceID": "3c61f860-7771-4e30-9210-33476b87f27d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Stretch.Y",
      "MetaInstanceID": "d0351a9f-5bc2-4023-a941-1abade0a6239",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Stretch.Z",
      "MetaInstanceID": "211acee7-a503-4eb4-b063-248904492844",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Shape",
      "MetaInstanceID": "5275bf44-c7e1-492e-9a86-db83a36e301c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Point",
          "Value": "0"
        },
        {
          "Name": "Sphere",
          "Value": "1"
        },
        {
          "Name": "Ring",
          "Value": "2"
        },
        {
          "Name": "Box",
          "Value": "3"
        }
      ]
    },
    {
      "Name": "Layer.X",
      "MetaInstanceID": "0e276c5b-c343-40d9-9445-32e593b5cdab",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Layer.Y",
      "MetaInstanceID": "3c589dc3-5871-4891-b887-2d16d8a30423",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scatter",
      "MetaInstanceID": "a585345d-3d6a-459d-8e61-ca7c5d192af0",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Offset.X",
      "MetaInstanceID": "c4e61f71-901c-42e2-8015-18b11f628257",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Offset.Y",
      "MetaInstanceID": "c1f519d0-14aa-4008-b97c-2b7bec2073d8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Offset.Z",
      "MetaInstanceID": "62ed310d-ff82-457e-9ce1-46a8b06adab1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "OffsetRandom.X",
      "MetaInstanceID": "3ebdbc8b-e15a-4da3-a465-b1ea96fdbf0d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "OffsetRandom.Y",
      "MetaInstanceID": "7a9070e7-c8d7-4704-bef6-ec47ce5aaabb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "OffsetRandom.Z",
      "MetaInstanceID": "60baa899-973f-41aa-af97-6ea734d99f8e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseTime",
      "MetaInstanceID": "3828a384-f831-4eb1-8c4d-d0351fad228c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseAmount",
      "MetaInstanceID": "666e1dce-cdb2-4fed-b887-6921cefbc39e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseScale",
      "MetaInstanceID": "c324e91a-8dc2-4d0d-98d8-743626b971b3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size",
      "MetaInstanceID": "46e07ebc-1898-4ab2-bf09-38b249776649",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SizeRandom",
      "MetaInstanceID": "215389d7-94b9-46c2-87d3-3f09d8fe0bb5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Orientation",
      "MetaInstanceID": "58d3a6b2-7896-4856-a144-595112da70e7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Surface",
          "Value": "0"
        },
        {
          "Name": "Fixed",
          "Value": "1"
        },
        {
          "Name": "FaceCamera",
          "Value": "2"
        }
      ]
    },
    {
      "Name": "Rotate.X",
      "MetaInstanceID": "24afe34e-6f0b-4a66-b7f4-24aa7756b1af",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate.Y",
      "MetaInstanceID": "2faf67db-1965-4bd5-9531-ddb43b68aba7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate.Z",
      "MetaInstanceID": "8ee3331a-6ceb-4a9c-a8a3-eb1df2f6dad3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RotateRandom.X",
      "MetaInstanceID": "1d2f5862-6206-4937-850f-271e30681b0d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RotateRandom.Y",
      "MetaInstanceID": "cdd77f01-37f8-4103-86e5-cd9d6d586664",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RotateRandom.Z",
      "MetaInstanceID": "3569c870-21b1-47a6-99ac-caed2bb2323e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Seed",
      "MetaInstanceID": "719db59e-4d36-4dd6-9ec4-f1dcac729de0",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "SceneTransformOut",
      "MetaInstanceID": "d99c7755-128f-4151-8505-06fe81d03096",
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "6e6d35ad-509c-4477-b210-4e331b7ff0f8",
      "MetaID": "4eb24dee-5087-4fbe-8858-852f3c927c53",
      "Name": "ReplicateMeshFunc",
      "Version": "26b3a343-2684-4c0b-ac7d-2649c7c35cdd",
      "Type": "Scene",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using SharpDX;",
        "using SharpDX.Direct3D;",
        "using SharpDX.Direct3D11;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.ID4eb24dee_5087_4fbe_8858_852f3c927c53",
        "{",
        "    public class Class_ReplicateMesh : FXSourceCodeFunction",
        "    {",
        "        #region Renderer",
        "        public class Renderer : BaseRenderer",
        "        {",
        "            public override void SetupEffect(OperatorPartContext context)",
        "            {",
        "                base.SetupEffect(context);",
        "                try",
        "                {",
        "                    SetupMaterialConstBuffer(context);",
        "                    SetupFogSettingsConstBuffer(context);",
        "                    SetupPointLightsConstBuffer(context);",
        "                }",
        "                catch (Exception e)",
        "                {",
        "                    Logger.Error(ParentFunc, \"Error building constant buffer: {0} - Source: {1}\", e.Message, e.Source);",
        "                }",
        "            }",
        "            public OperatorPart.Function ParentFunc {get;set;}            ",
        "        }",
        "        #endregion",
        "",
        "        public Class_ReplicateMesh()",
        "        {",
        "            _renderer = new Renderer(){ParentFunc = this};",
        "        }",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _renderer);",
        "            Utilities.DisposeObj(ref _bakedMesh);",
        "            Utilities.DisposeObj(ref _instanceDataBuffer);",
        "            base.Dispose();",
        "        }",
        "",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Count = 1,",
        "            Radius = 2,",
        "            StretchX = 3,",
        "            StretchY = 4,",
        "            StretchZ = 5,",
        "            Shape = 6,",
        "            LayerX = 7,",
        "            LayerY = 8,",
        "            Scatter = 9,",
        "            OffsetX = 10,",
        "            OffsetY = 11,",
        "            OffsetZ = 12,",
        "            OffsetRandomX = 13,",
        "            OffsetRandomY = 14,",
        "            OffsetRandomZ = 15,",
        "            NoiseTime = 16,",
        "            NoiseAmount = 17,",
        "            NoiseScale = 18,",
        "            Size = 19,",
        "            SizeRandom = 20,",
        "            Orientation = 21,",
        "            RotateX = 22,",
        "            RotateY = 23,",
        "            RotateZ = 24,",
        "            RotateRandomX = 25,",
        "            RotateRandomY = 26,",
        "            RotateRandomZ = 27,",
        "            Seed = 28,",
        "            MeshInput = 29",
        "        }",
        "        //<<< _inputids",
        "",
        "",
        "        private bool _firstEval = true;",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Count = inputs[(int)InputId.Count].Eval(context).Value;",
        "            var Radius = inputs[(int)InputId.Radius].Eval(context).Value;",
        "            var StretchX = inputs[(int)InputId.StretchX].Eval(context).Value;",
        "            var StretchY = inputs[(int)InputId.StretchY].Eval(context).Value;",
        "            var StretchZ = inputs[(int)InputId.StretchZ].Eval(context).Value;",
        "            var Stretch = new Vector3(StretchX, StretchY, StretchZ);",
        "            var Shape = (int) inputs[(int)InputId.Shape].Eval(context).Value;",
        "            var LayerX = inputs[(int)InputId.LayerX].Eval(context).Value;",
        "            var LayerY = inputs[(int)InputId.LayerY].Eval(context).Value;",
        "            var Layer = new Vector2(LayerX, LayerY);",
        "            var Scatter = inputs[(int)InputId.Scatter].Eval(context).Value;",
        "            var OffsetX = inputs[(int)InputId.OffsetX].Eval(context).Value;",
        "            var OffsetY = inputs[(int)InputId.OffsetY].Eval(context).Value;",
        "            var OffsetZ = inputs[(int)InputId.OffsetZ].Eval(context).Value;",
        "            var Offset = new Vector3(OffsetX, OffsetY, OffsetZ);",
        "            var OffsetRandomX = inputs[(int)InputId.OffsetRandomX].Eval(context).Value;",
        "            var OffsetRandomY = inputs[(int)InputId.OffsetRandomY].Eval(context).Value;",
        "            var OffsetRandomZ = inputs[(int)InputId.OffsetRandomZ].Eval(context).Value;",
        "            var OffsetRandom = new Vector3(OffsetRandomX, OffsetRandomY, OffsetRandomZ);",
        "            var NoiseTime = inputs[(int)InputId.NoiseTime].Eval(context).Value;",
        "            var NoiseAmount = inputs[(int)InputId.NoiseAmount].Eval(context).Value;",
        "            var NoiseScale = inputs[(int)InputId.NoiseScale].Eval(context).Value;",
        "            var Size = inputs[(int)InputId.Size].Eval(context).Value;",
        "            var SizeRandom = inputs[(int)InputId.SizeRandom].Eval(context).Value;",
        "            var Orientation = (int) inputs[(int)InputId.Orientation].Eval(context).Value;",
        "            var RotateX = inputs[(int)InputId.RotateX].Eval(context).Value;",
        "            var RotateY = inputs[(int)InputId.RotateY].Eval(context).Value;",
        "            var RotateZ = inputs[(int)InputId.RotateZ].Eval(context).Value;",
        "            var Rotate = new Vector3(RotateX, RotateY, RotateZ);",
        "            var RotateRandomX = inputs[(int)InputId.RotateRandomX].Eval(context).Value;",
        "            var RotateRandomY = inputs[(int)InputId.RotateRandomY].Eval(context).Value;",
        "            var RotateRandomZ = inputs[(int)InputId.RotateRandomZ].Eval(context).Value;",
        "            var RotateRandom = new Vector3(RotateRandomX, RotateRandomY, RotateRandomZ);",
        "            var Seed = inputs[(int)InputId.Seed].Eval(context).Value;",
        "            var MeshInput = inputs[(int)InputId.MeshInput].Eval(context).Mesh;",
        "            //<<< _params        ",
        "",
        "",
        "            var numInstances = (int) Count;",
        "",
        "            if (MeshInput == null || Count < 0.5f )",
        "            {",
        "            ",
        "                return context;",
        "            }",
        "",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            const float toRad = (float) Math.PI/180f;",
        "",
        "            var prevTransform = context.ObjectTWorld;",
        "            var rand = new Random((int) Seed);",
        "            Layer.X = Math.Max(1, (int) Layer.X);",
        "            Layer.Y = Math.Max(1, (int) Layer.Y);",
        "",
        "            var instancedMesh = MeshInput;",
        "            ",
        "            // Compute size of required vertex buffer and create it",
        "            _bakedMesh.NumTriangles = instancedMesh.NumTriangles * numInstances;",
        "",
        "            _bakedMesh.AttributesSize = instancedMesh.AttributesSize;",
        "            _bakedMesh.InputElements = instancedMesh.InputElements;",
        "            if (_bakedMesh.Vertices == null || _bakedMesh.Vertices.Description.SizeInBytes != instancedMesh.Vertices.Description.SizeInBytes * numInstances)",
        "            {",
        "                Utilities.DisposeObj(ref _bakedMesh.Vertices);",
        "                _bakedMesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                  {",
        "                                                                      BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                      CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                      OptionFlags = ResourceOptionFlags.None,",
        "                                                                      SizeInBytes = instancedMesh.Vertices.Description.SizeInBytes * numInstances,",
        "                                                                      Usage = ResourceUsage.Default",
        "                                                                  });",
        "            }",
        "",
        "            //Logger.Info(this, \"buffser size: {0}\", _bakedMesh.Vertices.Description.SizeInBytes/(1024*1024));",
        "            // instance data buffer",
        "            const int instanceDataSize = 4*16; // float4x4",
        "            var streamSize = numInstances * instanceDataSize;",
        "            //Logger.Info(this, \"buffer size: {0}\", streamSize);",
        "            if (_instanceDataBuffer == null || _instanceDataBuffer.Description.SizeInBytes != streamSize)",
        "            {",
        "                Utilities.DisposeObj(ref _instanceDataBuffer);",
        "                _instanceDataBuffer = new Buffer(context.D3DDevice, streamSize, ResourceUsage.Dynamic, BindFlags.VertexBuffer,",
        "                                                 CpuAccessFlags.Write, ResourceOptionFlags.None, instanceDataSize);",
        "            }",
        "",
        "            DataStream instanceDataStream;",
        "            context.D3DDevice.ImmediateContext.MapSubresource(_instanceDataBuffer, MapMode.WriteDiscard, MapFlags.None, out instanceDataStream);",
        "            using (instanceDataStream)",
        "            {",
        "                instanceDataStream.Position = 0;",
        "",
        "                for (var i = 0; i < numInstances; ++i)",
        "                {",
        "                    Vector3 t = new Vector3();",
        "",
        "                    ",
        "                    switch (Shape)",
        "                    {",
        "                        // Point",
        "                        case 0:",
        "                            t = Vector3.Normalize(new Vector3(",
        "                                            (float) (rand.NextDouble() - 0.5)*Radius*StretchX,",
        "                                            (float) (rand.NextDouble() - 0.5)*Radius*StretchY,",
        "                                            (float) (rand.NextDouble() - 0.5)*Radius*StretchZ)) ",
        "                               * (float)rand.NextDouble() * Radius;",
        "                                      ",
        "                            break;",
        "                        // Sphere",
        "                        case 1:",
        "                        {",
        "                            var inc = Math.PI*(3 - Math.Sqrt(5));",
        "                            var off = 2/(Count + 1);",
        "                            var y = i*off*Stretch.Y + (Stretch.Z -1) - 1 + (off/2);",
        "                            var r = Math.Sqrt(1 - y*y);",
        "                            var phi = i*Stretch.X*inc;",
        "                            t = new Vector3((float) (Math.Cos(phi)*r*Radius),",
        "                                            (float) (y*Radius),",
        "                                            (float) (Math.Sin(phi)*r*Radius));",
        "                            break;                            ",
        "                        }",
        "                                                ",
        "                        // Ring",
        "                        case 2:",
        "                        {",
        "                            float itemsPerShell =  Count/(Layer.X);    // with even distribution                            ",
        "                            float indexInShell = i%itemsPerShell;",
        "                            float shellIndex = (i-indexInShell)/itemsPerShell;",
        "                            ",
        "                            float itemsPerRing = (itemsPerShell / Math.Max(1,Layer.Y));",
        "                            float indexInRing = (int)(indexInShell % itemsPerRing);",
        "                            float layerIndex = (int)(indexInShell / itemsPerRing);",
        "                          ",
        "                            float a = indexInRing / itemsPerRing;",
        "                            ",
        "                            t = new Vector3((float) (Math.Sin(Math.PI*2*a)*(Radius + shellIndex * Stretch.X)),",
        "                                            Layer.Y <= 1 ? 0",
        "                                                         : (layerIndex/(Layer.Y-1)  -0.5f) *Stretch.Y ,",
        "                                            (float) (Math.Cos(Math.PI*2*a)*(Radius + shellIndex*Stretch.Z)));",
        "                            break;",
        "                        }",
        "                        ",
        "                        // Box (can also be used as a plane)",
        "                        case 3:",
        "                        {",
        "                            var volume = Math.Abs(StretchX) * Math.Abs(StretchY) * Math.Abs(StretchZ);",
        "                            ",
        "                            var s1= new Vector3(Math.Abs(StretchX), Math.Abs(StretchY), Math.Abs(StretchZ));",
        "                            var a= s1.Y/s1.X;",
        "                            var b= s1.Z/s1.X;",
        "                            ",
        "                            var xx = (float)Math.Pow( 1/ (a*b), 1.0/3.0);",
        "                            var s2 = s1 * (xx/s1.X);",
        "                                                        ",
        "                            var edgeCount= Math.Pow(Count,1.0/3.0);",
        "                            ",
        "                            var itemsX= Math.Max(1, Math.Round(edgeCount * s2.X));",
        "                            var itemsY= Math.Max(1, Math.Round(edgeCount * s2.Y));",
        "                            var itemsZ= Math.Max(1, Math.Round(edgeCount * s2.Z));",
        "",
        "                            if( itemsZ> itemsX && itemsZ> itemsY) {",
        "                                itemsZ= Count/itemsX/itemsY;",
        "                            }",
        "                            else if( itemsX > itemsY && itemsX > itemsZ) {",
        "                                itemsX= Count/itemsY/itemsZ;",
        "                            }",
        "                            else {",
        "                                itemsY= Count/itemsX/itemsZ;",
        "                            }",
        "",
        "                            var x = (int)(i % itemsX)/ itemsX;",
        "                            var y = (int)((i/itemsX) % itemsY) / itemsY;",
        "                            var z = (int)((i/itemsX/itemsY)) / itemsZ;",
        "                                                                                    ",
        "                            t = new Vector3((float) (x- (itemsX > 1 ? 0.5 : 0)),",
        "                                            (float) (y- (itemsY > 1 ? 0.5 : 0)),",
        "                                            (float) (z- (itemsZ > 1 ? 0.5 : 0))) * Stretch;",
        "                            break;",
        "                        }",
        "",
        "                    }",
        "",
        "                    if (NoiseAmount != 0)",
        "                    {",
        "                        _noiseTime = NoiseTime;",
        "                        _frequency = 1/NoiseScale;",
        "                        var noiseOffset = new Vector3(getNoise(t.X / Radius - 6.3f), getNoise(t.Z / Radius + 9.3f), getNoise((t.Y - 0.3f)));",
        "                        t += noiseOffset * NoiseAmount;",
        "                    }",
        "",
        "                    float s = Size + (float)rand.NextDouble() * SizeRandom;",
        "                    var scale = new Vector3(s, s, s);",
        "                    ",
        "                    //Matrix rotation;",
        "                    Matrix transform;",
        "                    Matrix.RotationYawPitchRoll(Rotate.Y * toRad + (float)(rand.NextDouble()) * RotateRandom.Y * toRad,",
        "                                                Rotate.X * toRad + (float)(rand.NextDouble()) * RotateRandom.X * toRad,",
        "                                                Rotate.Z * toRad + (float)(rand.NextDouble()) * RotateRandom.Z * toRad,",
        "                                                out transform);",
        "                    ",
        "                                                                    ",
        "                    var tScale = Matrix.Scaling( scale.X, scale.Y, scale.Z);",
        "                    transform= tScale * transform;",
        "                    var t2= Matrix.Translation(new Vector3(OffsetX + (float)(rand.NextDouble() -0.5f) * (OffsetRandomX + Scatter),",
        "                                                           OffsetY + (float)(rand.NextDouble() -0.5f) * (OffsetRandomY + Scatter),",
        "                                                           OffsetZ + (float)(rand.NextDouble() -0.5f) * (OffsetRandomZ + Scatter)));",
        "                    transform = transform * t2;",
        "",
        "                    if (Orientation == 0)",
        "                    {",
        "                        if (t.Length() > 0)",
        "                        {",
        "                            var dir = -t;",
        "                            if(Shape == 2) {",
        "                                dir.Y = 0;",
        "                            }",
        "                            dir.Normalize();",
        "                            var helperDir = new Vector3(0, -1, 0);",
        "                            if (Math.Abs(dir.X) < 0.001 && Math.Abs(dir.Z) < 0.001)",
        "                                helperDir = new Vector3(0, 0, 1);",
        "                            var xAxis = Vector3.Cross(dir, helperDir);",
        "                            xAxis.Normalize();",
        "                            var yAxis = Vector3.Cross(-xAxis, dir);",
        "                            yAxis.Normalize();",
        "                            var m = Matrix.Identity;",
        "                            m.Row1 = new Vector4(xAxis, 0);",
        "                            m.Row2 = new Vector4(yAxis, 0);",
        "                            m.Row3 = new Vector4(dir, 0);",
        "                            transform *= m;",
        "                        }",
        "                    }",
        "                    else if (Orientation == 2)",
        "                    {",
        "                        //if (Shape == 2)",
        "                        //{",
        "                        //    var rotationAroundCenter = Matrix.Identity;",
        "                        //    Matrix.RotationY((float)(2 * Math.PI * i / Count), out rotationAroundCenter);",
        "                        //    transform *= rotationAroundCenter;",
        "                        //}",
        "                        var cameraToWorld = context.WorldToCamera;",
        "                        cameraToWorld.Invert();",
        "                        var newObjectToWorld = context.ObjectTWorld * cameraToWorld;",
        "                        newObjectToWorld.Row4 = context.ObjectTWorld.Row4;",
        "                        transform *=    newObjectToWorld;                     ",
        "                        ",
        "                    }",
        "",
        "                    transform *= Matrix.Transformation(new Vector3(), new Quaternion(), new Vector3(1,1,1), new Vector3(), new Quaternion(), t);",
        "                    //transform *= prevTransform; ",
        "",
        "                    instanceDataStream.Write(transform);",
        "                }",
        "            }",
        "            context.D3DDevice.ImmediateContext.UnmapSubresource(_instanceDataBuffer, 0);",
        "",
        "            var prevEffect = context.Effect;",
        "            var prevRenderer = context.Renderer;",
        "            context.Effect = _effect;",
        "            context.Renderer = _renderer;",
        "",
        "            try",
        "            {",
        "                _renderer.SetupEffect(context);",
        "",
        "                if (context.DepthStencilView != null)",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.DepthStencilView, context.RenderTargetView);",
        "                else",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.RenderTargetView);",
        "",
        "                if (context.BlendState != null)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.BlendState = context.BlendState;",
        "                }",
        "",
        "                if (context.DepthStencilState != null)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = context.DepthStencilState;",
        "                }",
        "",
        "                if (context.RasterizerState != null)",
        "                {",
        "                    context.D3DDevice.ImmediateContext.Rasterizer.State = context.RasterizerState;",
        "                }",
        "",
        "                var technique = _effect.GetTechniqueByIndex(0);",
        "                var pass = technique.GetPassByIndex(0);",
        "",
        "                context.D3DDevice.ImmediateContext.Rasterizer.SetViewport(context.Viewport);",
        "                context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = new InputLayout(context.D3DDevice, pass.Description.Signature, _instanceDataInputElements);",
        "                context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "                context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new [] { instancedMesh.Vertices, _instanceDataBuffer}, new [] {76, instanceDataSize}, new [] {0,0} );",
        "                ",
        "                // Configure Pipeline for stream output",
        "                context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_bakedMesh.Vertices, 0) });",
        "                pass.Apply(context.D3DDevice.ImmediateContext);",
        "    ",
        "                // Draw mesh into vertex buffer",
        "                context.D3DDevice.ImmediateContext.DrawInstanced(instancedMesh.NumTriangles*3, numInstances, 0, 0);",
        "                context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this,\"Replicate2 - An error occured during evaluation: {0}\", exception.Message);",
        "            }",
        "",
        "            context.Effect = prevEffect;",
        "            context.Renderer = prevRenderer;",
        "            ",
        "            context.Mesh = _bakedMesh;",
        "",
        "            return context;",
        "        }",
        "",
        "",
        "        #region helpers",
        "",
        "        public float Noise(int x, int seed)",
        "        {",
        "            int n = x + seed*137;",
        "            n = (n << 13) ^ n;",
        "            return (float) (1.0 - ((n*(n*n*15731 + 789221) + 1376312589) & 0x7fffffff)/1073741824.0);",
        "        }",
        "",
        "        public float Lerp(float a, float b, float t)",
        "        {",
        "            return a + t*(b - a);",
        "        }",
        "",
        "        public float Fade(float t)",
        "        {",
        "            return t*t*t*(t*(t*6 - 15) + 10);",
        "        }",
        "",
        "        public float Interpolate(float a, float b, float t)",
        "        {",
        "            float ft = t*3.1415927f;",
        "            float f = (float) (1.0 - Math.Cos(ft))*0.5f;",
        "            return a*(1.0f - f) + b*f;",
        "        }",
        "",
        "        private float getNoise(float value)",
        "        {",
        "            float noiseSum = 0.0f;",
        "            value *= _frequency;",
        "            value += _noiseTime+10000;",
        "",
        "",
        "            noiseSum = Lerp(Noise((int) value, SEED),",
        "                            Noise((int) value + 1, SEED),",
        "                            Fade(value - (float) Math.Floor(value)));",
        "            return noiseSum;",
        "        }",
        "",
        "        #endregion",
        "",
        "        private Mesh _bakedMesh = new Mesh();",
        "        private const int SEED = 0;",
        "        private float _frequency = 1;",
        "        private float _noiseTime;",
        "        private OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier> _meshCollector = new OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier>();",
        "        private Renderer _renderer;",
        "        private Buffer _instanceDataBuffer;",
        "        private InputElement[] _instanceDataInputElements ",
        "            = new []",
        "            {",
        "                new InputElement(\"POSITION\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0, 0),",
        "                new InputElement(\"NORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 16, 0),",
        "                new InputElement(\"COLOR\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 28, 0),",
        "                new InputElement(\"TEXCOORD\", 0, SharpDX.DXGI.Format.R32G32_Float, 44, 0),",
        "                new InputElement(\"TANGENT\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 52, 0),",
        "                new InputElement(\"BINORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 64, 0),",
        "                new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0,",
        "                                 1, InputClassification.PerInstanceData, 1),",
        "                new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 1, SharpDX.DXGI.Format.R32G32B32A32_Float, 16,",
        "                                 1, InputClassification.PerInstanceData, 1),",
        "                new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 2, SharpDX.DXGI.Format.R32G32B32A32_Float, 32,",
        "                                 1, InputClassification.PerInstanceData, 1),",
        "                new InputElement(\"INSTANCE_OBJ_TO_WORLD_ROW\", 3, SharpDX.DXGI.Format.R32G32B32A32_Float, 48,",
        "                                 1, InputClassification.PerInstanceData, 1),",
        "            };",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "31adc267-5e60-44cf-9fa8-94bf9ff9085a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "98fe46b7-acd9-42ab-82ee-0b04a0484485",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3e2d9c7b-8fc9-4d1d-8643-3fbe72640163",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3c61f860-7771-4e30-9210-33476b87f27d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d0351a9f-5bc2-4023-a941-1abade0a6239",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "211acee7-a503-4eb4-b063-248904492844",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5275bf44-c7e1-492e-9a86-db83a36e301c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0e276c5b-c343-40d9-9445-32e593b5cdab",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3c589dc3-5871-4891-b887-2d16d8a30423",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a585345d-3d6a-459d-8e61-ca7c5d192af0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c4e61f71-901c-42e2-8015-18b11f628257",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c1f519d0-14aa-4008-b97c-2b7bec2073d8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "62ed310d-ff82-457e-9ce1-46a8b06adab1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3ebdbc8b-e15a-4da3-a465-b1ea96fdbf0d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7a9070e7-c8d7-4704-bef6-ec47ce5aaabb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "60baa899-973f-41aa-af97-6ea734d99f8e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3828a384-f831-4eb1-8c4d-d0351fad228c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "666e1dce-cdb2-4fed-b887-6921cefbc39e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c324e91a-8dc2-4d0d-98d8-743626b971b3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "46e07ebc-1898-4ab2-bf09-38b249776649",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "215389d7-94b9-46c2-87d3-3f09d8fe0bb5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "58d3a6b2-7896-4856-a144-595112da70e7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "24afe34e-6f0b-4a66-b7f4-24aa7756b1af",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2faf67db-1965-4bd5-9531-ddb43b68aba7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8ee3331a-6ceb-4a9c-a8a3-eb1df2f6dad3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1d2f5862-6206-4937-850f-271e30681b0d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cdd77f01-37f8-4103-86e5-cd9d6d586664",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3569c870-21b1-47a6-99ac-caed2bb2323e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "719db59e-4d36-4dd6-9ec4-f1dcac729de0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cfc02766-476a-4b92-9662-f1bbec82f279",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6e6d35ad-509c-4477-b210-4e331b7ff0f8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d99c7755-128f-4151-8505-06fe81d03096"
    }
  ]
}