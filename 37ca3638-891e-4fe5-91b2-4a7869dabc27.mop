{
  "Name": "MultiIris (2)",
  "_id": "37ca3638-891e-4fe5-91b2-4a7869dabc27",
  "Namespace": "lib.geometry.effects",
  "Description": "Creates instances of a geometry aligned to position of the first PointLight above the operator.\r\n\r\nHave a look at [LensFlareExample2] to get an idea, how different use of textures and parameters can be used to create a wide range for effects.",
  "Inputs": [
    {
      "Name": "LightIndex",
      "MetaInstanceID": "54a36ec5-6b73-44c2-88cb-d8c3e6b8553c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Count",
      "MetaInstanceID": "931da430-8a80-4a58-a1a0-030a22f506c6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Distance",
      "MetaInstanceID": "a6243bbd-93b7-4c99-a289-ad8942f7eb8b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spread.Value",
      "MetaInstanceID": "7a68e273-5505-4fa2-9098-3708ed29f23d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spread.Random",
      "MetaInstanceID": "99c9403d-c867-4799-af79-0bc525e191cc",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size.Value",
      "MetaInstanceID": "4a4ebb79-8845-44cb-9718-0e596fa4a8de",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size.Random",
      "MetaInstanceID": "aba2db64-a386-43f1-9270-7a6600b317e7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate.Value",
      "MetaInstanceID": "d7f44dc6-7b91-4b26-a83f-e5758e833dde",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate.Random",
      "MetaInstanceID": "b6c6282e-8ac6-451a-bb3b-0f62111bd0e5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.R",
      "MetaInstanceID": "45f16d3c-863f-40e2-a61f-1bdedcf2d692",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.G",
      "MetaInstanceID": "81dbbbda-10be-4bc2-badb-2e73408df5cb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.B",
      "MetaInstanceID": "3423fe78-4f09-4bdf-934e-f06b45e37c50",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.A",
      "MetaInstanceID": "5bcb0ba1-1624-4e29-a6e4-44eb9984edb1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorRandom.R",
      "MetaInstanceID": "33f5e956-e8c9-4df9-b4d3-eb1e92ffa5ab",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorRandom.G",
      "MetaInstanceID": "e44a1284-1271-4057-863a-c10db248bbb4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorRandom.B",
      "MetaInstanceID": "828e94db-bbe8-4e28-b0fd-715ef1bb3ea4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorRandom.A",
      "MetaInstanceID": "b4471ec0-3c08-4959-9998-7b6c635f9ae4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TextureCells.Columns",
      "MetaInstanceID": "a8977979-7317-4038-922f-e07871ad5e65",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "16",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TextureCells.Rows",
      "MetaInstanceID": "c8b28301-d7a4-4dcb-bf86-84991e944cef",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "16",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RandomSeed",
      "MetaInstanceID": "8c55c089-7060-4f7d-8a13-fe6d6bb282f6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ImageAtlas",
      "MetaInstanceID": "1e8a5def-a4bf-4e07-912a-3c2d2a03feec",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Stretch.X",
      "MetaInstanceID": "da989082-195c-4884-9272-f493d4104e48",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Stretch.Y",
      "MetaInstanceID": "e55dd14a-3636-42a5-8f60-a18bcfe3928a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Offset.X",
      "MetaInstanceID": "d765da3e-1430-4b3c-a1ba-518b6a18b208",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Offset.Y",
      "MetaInstanceID": "f12b6d16-a616-49e5-8b6c-7bab80e467e2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scatter.X",
      "MetaInstanceID": "2086ef67-1605-4103-a113-1af10e06e411",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scatter.Y",
      "MetaInstanceID": "46e549b9-4b8d-4eaf-8b80-0ac01881a48f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate.Entities",
      "MetaInstanceID": "f1866088-01e6-415f-9dc3-0e6d90faa61a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "AutoRotate",
      "MetaInstanceID": "3ac30647-6c2c-4ace-beb6-6a97743b9149",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Off",
          "Value": "0"
        },
        {
          "Name": "TowardsLight",
          "Value": "1"
        },
        {
          "Name": "TowardsCenter",
          "Value": "2"
        }
      ]
    },
    {
      "Name": "TriggerMode",
      "MetaInstanceID": "9182c67d-9c2e-4713-b2b7-9b57064d7e0e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Off",
          "Value": "0"
        },
        {
          "Name": "LightPosition",
          "Value": "1"
        },
        {
          "Name": "ObjectPosition",
          "Value": "2"
        }
      ]
    },
    {
      "Name": "EdgeTrigger.Inside",
      "MetaInstanceID": "0c684e03-b244-445f-b78a-354dc0719a7f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EdgeTrigger.Outside",
      "MetaInstanceID": "79d96bed-c002-4f5f-ab2a-a36a6b6e5139",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "CenterTrigger.Radius",
      "MetaInstanceID": "f7a9a9a1-cc2f-4d15-b7e0-05e2e0eec10d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "CenterTrigger.Bias",
      "MetaInstanceID": "9b6f4dd3-8a54-49ba-b536-4fb7fb96ce1b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TriggerScaleOffset",
      "MetaInstanceID": "69f6a4ef-a6dc-4e97-a8b7-6472e45b05cc",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TriggerBrightnessOffset",
      "MetaInstanceID": "4d239cb4-a7b5-4d0f-adde-9ab1d56efaca",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "PositionFactor.X",
      "MetaInstanceID": "3078497c-2425-49ed-9fe4-c6952b11a7ac",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "PositionFactor.Y",
      "MetaInstanceID": "7fea7ca2-58f0-4dc3-a062-c57fe406fc84",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "SceneTransformOut",
      "MetaInstanceID": "4de0532c-5575-4ac7-abb9-b58033ebe699",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "ded06cda-580d-4729-ab7a-644d8f7274fe",
      "MetaID": "4b2f4bb1-3171-4bc5-857d-96cc107b2ad5",
      "Name": "MultiIris (2)Func",
      "Version": "2ff36f1e-b34d-46ce-8ef5-848b6213eada",
      "Type": "Scene",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.DXGI;",
        "using SharpDX.Windows;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using Device = SharpDX.Direct3D11.Device;",
        "",
        "namespace Framefield.Core.ID4b2f4bb1_3171_4bc5_857d_96cc107b2ad5",
        "{",
        "    public class Class_MultiIris__2_ : OperatorPart.Function",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            LightIndex = 0,",
        "            Count = 1,",
        "            Distance = 2,",
        "            SpreadValue = 3,",
        "            SpreadRandom = 4,",
        "            SizeValue = 5,",
        "            SizeRandom = 6,",
        "            RotateValue = 7,",
        "            RotateRandom = 8,",
        "            ColorR = 9,",
        "            ColorG = 10,",
        "            ColorB = 11,",
        "            ColorA = 12,",
        "            ColorRandomR = 13,",
        "            ColorRandomG = 14,",
        "            ColorRandomB = 15,",
        "            ColorRandomA = 16,",
        "            TextureCellsColumns = 17,",
        "            TextureCellsRows = 18,",
        "            RandomSeed = 19,",
        "            ImageAtlas = 20,",
        "            StretchX = 21,",
        "            StretchY = 22,",
        "            OffsetX = 23,",
        "            OffsetY = 24,",
        "            ScatterX = 25,",
        "            ScatterY = 26,",
        "            RotateEntities = 27,",
        "            AutoRotate = 28,",
        "            TriggerMode = 29,",
        "            EdgeTriggerInside = 30,",
        "            EdgeTriggerOutside = 31,",
        "            CenterTriggerRadius = 32,",
        "            CenterTriggerBias = 33,",
        "            TriggerScaleOffset = 34,",
        "            TriggerBrightnessOffset = 35,",
        "            PositionFactorX = 36,",
        "            PositionFactorY = 37",
        "        }",
        "        //<<< _inputids",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var LightIndex = inputs[(int)InputId.LightIndex].Eval(context).Value;",
        "            var Count = inputs[(int)InputId.Count].Eval(context).Value;",
        "            var Distance = inputs[(int)InputId.Distance].Eval(context).Value;",
        "            var SpreadValue = inputs[(int)InputId.SpreadValue].Eval(context).Value;",
        "            var SpreadRandom = inputs[(int)InputId.SpreadRandom].Eval(context).Value;",
        "            var Spread = new Vector2(SpreadValue, SpreadRandom);",
        "            var SizeValue = inputs[(int)InputId.SizeValue].Eval(context).Value;",
        "            var SizeRandom = inputs[(int)InputId.SizeRandom].Eval(context).Value;",
        "            var Size = new Vector2(SizeValue, SizeRandom);",
        "            var RotateValue = inputs[(int)InputId.RotateValue].Eval(context).Value;",
        "            var RotateRandom = inputs[(int)InputId.RotateRandom].Eval(context).Value;",
        "            var RotateEntities = inputs[(int)InputId.RotateEntities].Eval(context).Value;",
        "            var Rotate = new Vector3(RotateValue, RotateRandom, RotateEntities);",
        "            var ColorR = inputs[(int)InputId.ColorR].Eval(context).Value;",
        "            var ColorG = inputs[(int)InputId.ColorG].Eval(context).Value;",
        "            var ColorB = inputs[(int)InputId.ColorB].Eval(context).Value;",
        "            var ColorA = inputs[(int)InputId.ColorA].Eval(context).Value;",
        "            var Color = new Color4(ColorR, ColorG, ColorB, ColorA);",
        "            var ColorRandomR = inputs[(int)InputId.ColorRandomR].Eval(context).Value;",
        "            var ColorRandomG = inputs[(int)InputId.ColorRandomG].Eval(context).Value;",
        "            var ColorRandomB = inputs[(int)InputId.ColorRandomB].Eval(context).Value;",
        "            var ColorRandomA = inputs[(int)InputId.ColorRandomA].Eval(context).Value;",
        "            var ColorRandom = new Color4(ColorRandomR, ColorRandomG, ColorRandomB, ColorRandomA);",
        "            var TextureCellsColumns = inputs[(int)InputId.TextureCellsColumns].Eval(context).Value;",
        "            var TextureCellsRows = inputs[(int)InputId.TextureCellsRows].Eval(context).Value;",
        "            var TextureCells = new Vector2(TextureCellsColumns, TextureCellsRows);",
        "            var RandomSeed = inputs[(int)InputId.RandomSeed].Eval(context).Value;",
        "            var ImageAtlas = inputs[(int)InputId.ImageAtlas].Eval(context).Image; // Needs to be checked for null!",
        "            var StretchX = inputs[(int)InputId.StretchX].Eval(context).Value;",
        "            var StretchY = inputs[(int)InputId.StretchY].Eval(context).Value;",
        "            var Stretch = new Vector2(StretchX, StretchY);",
        "            var OffsetX = inputs[(int)InputId.OffsetX].Eval(context).Value;",
        "            var OffsetY = inputs[(int)InputId.OffsetY].Eval(context).Value;",
        "            var Offset = new Vector2(OffsetX, OffsetY);",
        "            var ScatterX = inputs[(int)InputId.ScatterX].Eval(context).Value;",
        "            var ScatterY = inputs[(int)InputId.ScatterY].Eval(context).Value;",
        "            var Scatter = new Vector2(ScatterX, ScatterY);",
        "            var AutoRotate = (int) inputs[(int)InputId.AutoRotate].Eval(context).Value;",
        "            var TriggerMode = (int) inputs[(int)InputId.TriggerMode].Eval(context).Value;",
        "            var EdgeTriggerInside = inputs[(int)InputId.EdgeTriggerInside].Eval(context).Value;",
        "            var EdgeTriggerOutside = inputs[(int)InputId.EdgeTriggerOutside].Eval(context).Value;",
        "            var EdgeTrigger = new Vector2(EdgeTriggerInside, EdgeTriggerOutside);",
        "            var CenterTriggerRadius = inputs[(int)InputId.CenterTriggerRadius].Eval(context).Value;",
        "            var CenterTriggerBias = inputs[(int)InputId.CenterTriggerBias].Eval(context).Value;",
        "            var CenterTrigger = new Vector2(CenterTriggerRadius, CenterTriggerBias);",
        "            var TriggerScaleOffset = inputs[(int)InputId.TriggerScaleOffset].Eval(context).Value;",
        "            var TriggerBrightnessOffset = inputs[(int)InputId.TriggerBrightnessOffset].Eval(context).Value;",
        "            var PositionFactorX = inputs[(int)InputId.PositionFactorX].Eval(context).Value;",
        "            var PositionFactorY = inputs[(int)InputId.PositionFactorY].Eval(context).Value;",
        "            var PositionFactor = new Vector2(PositionFactorX, PositionFactorY);",
        "            //<<< _params",
        "            var SceneInput = inputs[0];",
        "            ",
        "            ",
        "            var prevMaterial = (IMaterial) context.Objects[OperatorPartContext.MATERIAL_ID];",
        "            var materialAlpha = prevMaterial.Diffuse.Alpha;",
        "            ",
        "            // Get Camera Object",
        "            Matrix worldToView = context.WorldToCamera*context.CameraProjection;",
        "            Matrix viewToWorld = Matrix.Invert(worldToView);",
        "",
        "            if(ImageAtlas == null)",
        "                return context;",
        "            ",
        "            // Get Light Position",
        "            Vector2 lightScreenPos = new Vector2(1,1);",
        "",
        "            var pointLightContainer = (HashSet<IPointLight>) context.Objects[OperatorPartContext.POINT_LIGHT_CONTAINER_ID];",
        "            ",
        "            Vector4 pos = Vector4.One;",
        "            if (pointLightContainer.Count > (int)LightIndex) {",
        "                var pointLight = pointLightContainer.ToArray()[(int)LightIndex];",
        "                pos = Vector3.Transform(pointLight.Position, worldToView);",
        "                ",
        "                // Ignore lightsources behind",
        "                if( pos.Z < 0)",
        "                    return context;",
        "                    ",
        "                pos /= pos.W;",
        "                lightScreenPos.X = pos.X;",
        "                lightScreenPos.Y = pos.Y;",
        "                ",
        "            }",
        "            ",
        "            // Random",
        "            var rand = new Random((int)RandomSeed);",
        "            ",
        "            // Set Texture",
        "            Utilities.DisposeObj( ref _texture);",
        "            try {",
        "                //Logger.Info(this,\"here\");",
        "                _texture = new ShaderResourceView(context.D3DDevice, ImageAtlas);",
        "            }",
        "            catch (Exception e) {",
        "                Logger.Info(this,\"ERROR \"+  e.ToString());",
        "                //Logger.Error(this,\"ERROR:\"+  e.Message);",
        "                //Logger.Warn(this, \"Can't render. No texture connected?\");",
        "            }",
        "",
        "            var prevTexture0 = context.Texture0;",
        "            if (_texture != null) {",
        "                context.Texture0 = _texture;",
        "            }",
        "",
        "            // Render Planes",
        "            for (var i = 0; i < Count; ++i) {",
        "                //var positionOnLine = (float)( (-Distance ",
        "                //                       + SpreadValue  * (-0.5 + i / Count)) ",
        "                //                       + (SpreadRandom * (rand.NextDouble()- 0.5) + 1));",
        "",
        "                var positionOnLine = (float)( (-Distance ",
        "                                       + SpreadValue  * (rand.NextDouble()-0.5) ",
        "                                       + SpreadRandom * (rand.NextDouble()- 0.5) + 1));",
        "                ",
        "                Vector2 objectScreenPos =   lightScreenPos * positionOnLine * PositionFactor + (new Vector2(1,1)-PositionFactor) * lightScreenPos;",
        "                ",
        "                objectScreenPos+= new Vector2((float)(Scatter.X * (rand.NextDouble()-0.5)), (float)(Scatter.Y * (rand.NextDouble()-0.5))) ;",
        "                ",
        "",
        "                // Set transform matrix",
        "                //var ObjectPositionInView = new Vector4(objectScreenPos.X, objectScreenPos.Y, 0.2f, 1);",
        "                var ObjectPositionInView = new Vector4(objectScreenPos.X, objectScreenPos.Y, 0.1f, 1);",
        "                Vector4 ObjectPositionInWorld = Vector4.Transform(ObjectPositionInView, viewToWorld);",
        "                //ObjectPositionInWorld /= ObjectPositionInWorld.W;",
        "",
        "                var objectToWorld = Matrix.Invert(context.WorldToCamera);",
        "                objectToWorld.Row4 = ObjectPositionInWorld;",
        "",
        "                float scale = SizeValue * (float)(1.0 + SizeRandom  * (rand.NextDouble() - 0.5)) / 0.2f;",
        "                ",
        "                var color = new Vector4(",
        "                    ColorR +  ColorRandomR * (float)(rand.NextDouble() - 0.5)*4, ",
        "                    ColorG +  ColorRandomG * (float)(rand.NextDouble() - 0.5)*4, ",
        "                    ColorB +  ColorRandomB * (float)(rand.NextDouble() - 0.5)*4, ",
        "                    ColorA * (1-  ColorRandomA * (float)(rand.NextDouble() ))",
        "                  );",
        "                ",
        "                // Center Trigger",
        "                if( TriggerMode !=0) {",
        "                    ",
        "                    var triggerPosition = TriggerMode == 1 ? lightScreenPos",
        "                                                           : objectScreenPos;",
        "                   ",
        "                    ",
        "                    var centerTriggerAmount = CenterTriggerRadius > 0.0001 ? Math.Max(0, CenterTriggerRadius - triggerPosition.Length())/CenterTriggerRadius",
        "                                                                           : 0; ",
        "                    float smoothEdgeTriggerAmount = 0;",
        "                    if( EdgeTriggerInside > 0 && EdgeTriggerOutside > 0) {",
        "                    ",
        "                        var insideEdgeTriggerAmountY =   Math.Min( EdgeTriggerInside,  Math.Max(0,   Math.Abs(triggerPosition.Y) -1  + EdgeTriggerInside ) )/ EdgeTriggerInside;",
        "                        var outsideEdgeTriggerAmountY =  Math.Min( EdgeTriggerOutside,  Math.Max(0,  -Math.Abs(triggerPosition.Y) +1  + EdgeTriggerOutside ) )/ EdgeTriggerOutside; ",
        "",
        "                        var insideEdgeTriggerAmountX =   Math.Min( EdgeTriggerInside,  Math.Max(0,   Math.Abs(triggerPosition.X) -1  + EdgeTriggerInside ) )/ EdgeTriggerInside;",
        "                        var outsideEdgeTriggerAmountX =  Math.Min( EdgeTriggerOutside,  Math.Max(0,  -Math.Abs(triggerPosition.X) +1  + EdgeTriggerOutside ) )/ EdgeTriggerOutside;                    ",
        "                    ",
        "                        var edgeTriggerAmount = Math.Max(insideEdgeTriggerAmountY * outsideEdgeTriggerAmountY,  insideEdgeTriggerAmountX * outsideEdgeTriggerAmountX);",
        "                        var t= edgeTriggerAmount; ",
        "                        smoothEdgeTriggerAmount = t*t*(3 - 2*t);",
        "                    }",
        "                    ",
        "                    ",
        "                    var totalTriggerAmount = centerTriggerAmount + smoothEdgeTriggerAmount;    ",
        "                    scale *= (1+ TriggerScaleOffset * totalTriggerAmount);",
        "                    color.W += TriggerBrightnessOffset * totalTriggerAmount;",
        "                ",
        "                ",
        "                }",
        "                ",
        "                // Fade with incomming alpha from FlatShaders and Materials",
        "                color.W *= materialAlpha;",
        "                ",
        "                ",
        "                objectToWorld =   Matrix.Scaling( scale, scale, 1) * objectToWorld;",
        "                ",
        "                var autoRotation = 0f;",
        "                if(AutoRotate == 1) {",
        "                    //rotateToCenter = (float)(Math.Atan2( objectScreenPos.X- lightScreenPos.X, objectScreenPos.Y - lightScreenPos.Y) + 3.1415/2) * RotateToLight;",
        "                    autoRotation = (float)(Math.Atan2( objectScreenPos.X- lightScreenPos.X, objectScreenPos.Y - lightScreenPos.Y) + 3.1415/2);",
        "                }   ",
        "                else if(AutoRotate == 2) {",
        "                    autoRotation = (float)(Math.Atan2( objectScreenPos.X, objectScreenPos.Y) + 3.1415/2);                ",
        "                }",
        "                                ",
        "",
        "                objectToWorld = Matrix.Translation( OffsetX, OffsetY,0) ",
        "                              * Matrix.RotationZ( (float)( ",
        "                                            (RotateValue) / 180 * Math.PI ",
        "                                          - autoRotation ",
        "                                          + (RotateRandom / 180 * Math.PI) * (rand.NextDouble()-0.5) ",
        "                                          + (RotateEntities / 180 * Math.PI) * i/Count",
        "                                          )) * objectToWorld;",
        "                ",
        "                var oldObjectToWorld = context.ObjectTWorld;",
        "                context.ObjectTWorld = objectToWorld*context.ObjectTWorld;",
        "                ",
        "                // Transforom UV to pick correct texture cell",
        "                if(TextureCellsRows == 0)",
        "                    TextureCellsRows = 1;",
        "                    ",
        "                if(TextureCellsColumns == 0)",
        "                    TextureCellsColumns =1;",
        "",
        "                int row = (int)(Math.Floor(i/TextureCellsColumns) % TextureCellsRows);",
        "                int column = (int)(i%TextureCellsRows);",
        "                    ",
        "                var translationUV = new Vector3(1/TextureCellsColumns * column, 1/TextureCellsRows * row, 0);",
        "                var rotationUV = new Quaternion();",
        "                var scaleUV = new Vector3(1/TextureCellsColumns, 1/TextureCellsRows,0);",
        "                var pivotUV = new Vector3(0,0,0);",
        "            ",
        "                var transformUV = Matrix.Transformation(pivotUV, new Quaternion(), scaleUV, pivotUV, rotationUV, translationUV);",
        "                var prevTransformUV = context.TextureMatrix;",
        "                context.TextureMatrix = transformUV * prevTransformUV;",
        "                ",
        "                // Render plane                ",
        "                    var normal = new Vector3(0.0f, 0.0f, -1.0f);",
        "                    ",
        "",
        "                    var tangent = new Vector3(1.0f, 0.0f, 0.0f);",
        "                    var binormal = new Vector3(0.0f, -1.0f, 0.0f);",
        "                    ",
        "                    var inputElements = new InputElement[] {",
        "                        new InputElement(\"POSITION\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0, 0),",
        "                        new InputElement(\"NORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 16, 0),",
        "                        new InputElement(\"COLOR\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 28, 0),",
        "                        new InputElement(\"TEXCOORD\", 0, SharpDX.DXGI.Format.R32G32_Float, 44, 0),",
        "                        new InputElement(\"TANGENT\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 52, 0),",
        "                        new InputElement(\"BINORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 64, 0)",
        "                    };",
        "                    ",
        "                    int numQuads = 1;                     ",
        "                    var attributesSize = 76;",
        "                    int numTriangles = numQuads * 2;",
        "                    int streamSize = numTriangles * 3 * attributesSize;",
        "",
        "                    if (_planeMesh == null) {",
        "                        var vertices = new Buffer(context.D3DDevice, new DataStream(streamSize, true, true), new BufferDescription() {",
        "                            BindFlags = BindFlags.VertexBuffer,",
        "                            CpuAccessFlags = CpuAccessFlags.Write,",
        "                            OptionFlags = ResourceOptionFlags.None,",
        "                            SizeInBytes = streamSize,",
        "                            Usage = ResourceUsage.Dynamic",
        "                        });",
        "                        _planeMesh = new Mesh() { InputElements = inputElements, Vertices = vertices, NumTriangles = numTriangles, AttributesSize = attributesSize };",
        "                    }",
        "",
        "                    DataStream vertexStream;",
        "                    context.D3DDevice.ImmediateContext.MapSubresource(_planeMesh.Vertices, MapMode.WriteDiscard, SharpDX.Direct3D11.MapFlags.None, out vertexStream); ",
        "",
        "                    //var aspect=  (StretchValue +  StretchRandom * ((float)rand.NextDouble()-0.5f) );",
        "                    float width = StretchX * 0.1f;",
        "                    float height=StretchY * 0.1f; ",
        "                    ",
        "                    float startX = -width/2.0f;",
        "                    float startZ = -height/2.0f;",
        "",
        "                    //float z=0; // wech",
        "                    float normalizedBottom= 0;",
        "                    float bottom = startZ;",
        "                    float normalizedTop = 1;",
        "                    float top = startZ + height;",
        "",
        "                    float normalizedLeft = 0;",
        "                    float left = startX;",
        "                    float normalizedRight = 1;",
        "                    float right = startX + width;",
        "",
        "                    // tri 1 vert 1",
        "                    vertexStream.Write(new Vector4(right, top, 0, 1));",
        "                    vertexStream.Write(normal);",
        "                    vertexStream.Write(color);",
        "                    vertexStream.Write(new Vector2(normalizedRight, 1.0f- normalizedTop));",
        "                    vertexStream.Write(tangent);",
        "                    vertexStream.Write(binormal);",
        "",
        "                    // tri 1 vert 2",
        "                    vertexStream.Write(new Vector4(right, bottom, 0, 1));",
        "                    vertexStream.Write(normal);",
        "                    vertexStream.Write(color);",
        "                    vertexStream.Write(new Vector2(normalizedRight, 1.0f-normalizedBottom));",
        "                    vertexStream.Write(tangent);",
        "                    vertexStream.Write(binormal);",
        "",
        "                    // tri 1 vert 3",
        "                    vertexStream.Write(new Vector4(left, bottom, 0, 1));",
        "                    vertexStream.Write(normal);",
        "                    vertexStream.Write(color);",
        "                    vertexStream.Write(new Vector2(normalizedLeft, 1.0f-normalizedBottom));",
        "                    vertexStream.Write(tangent);",
        "                    vertexStream.Write(binormal);",
        "",
        "                    // tri 2 vert 1",
        "                    vertexStream.Write(new Vector4(left, bottom, 0, 1));",
        "                    vertexStream.Write(normal);",
        "                    vertexStream.Write(color);",
        "                    vertexStream.Write(new Vector2(normalizedLeft, 1.0f-normalizedBottom));",
        "                    vertexStream.Write(tangent);",
        "                    vertexStream.Write(binormal);",
        "",
        "                    // tri 2 vert 2",
        "                    vertexStream.Write(new Vector4(left, top, 0, 1));",
        "                    vertexStream.Write(normal);",
        "                    vertexStream.Write(color);",
        "                    vertexStream.Write(new Vector2(normalizedLeft, 1.0f-normalizedTop));",
        "                    vertexStream.Write(tangent);",
        "                    vertexStream.Write(binormal);",
        "",
        "                    // tri 2 vert 3",
        "                    vertexStream.Write(new Vector4(right, top, 0, 1));",
        "                    vertexStream.Write(normal);",
        "                    vertexStream.Write(color);",
        "                    vertexStream.Write(new Vector2(normalizedRight, 1.0f-normalizedTop));",
        "                    vertexStream.Write(tangent);",
        "                    vertexStream.Write(binormal);",
        "",
        "                    context.D3DDevice.ImmediateContext.UnmapSubresource(_planeMesh.Vertices, 0);",
        "",
        "                    Changed = false;",
        "",
        "                context.Renderer.SetupEffect(context);",
        "                context.Renderer.Render(_planeMesh, context);",
        "",
        "",
        "",
        "                context.ObjectTWorld = oldObjectToWorld;",
        "                context.TextureMatrix = prevTransformUV;",
        "",
        "            }",
        "            ",
        "            // Restore Texture",
        "            context.Texture0 = prevTexture0;",
        "            ",
        "            ",
        "            //!!automatic generated code starts here",
        "            return context;",
        "        }",
        "        ",
        "        public override void Dispose() {",
        "            Utilities.DisposeObj( ref _texture);",
        "            Utilities.DisposeObj(ref _planeMesh);",
        "        }",
        "        ",
        "        ",
        "        private Mesh _planeMesh = null;        ",
        "        ShaderResourceView _texture = null;",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "54a36ec5-6b73-44c2-88cb-d8c3e6b8553c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "931da430-8a80-4a58-a1a0-030a22f506c6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a6243bbd-93b7-4c99-a289-ad8942f7eb8b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7a68e273-5505-4fa2-9098-3708ed29f23d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "99c9403d-c867-4799-af79-0bc525e191cc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4a4ebb79-8845-44cb-9718-0e596fa4a8de",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "aba2db64-a386-43f1-9270-7a6600b317e7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d7f44dc6-7b91-4b26-a83f-e5758e833dde",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b6c6282e-8ac6-451a-bb3b-0f62111bd0e5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "45f16d3c-863f-40e2-a61f-1bdedcf2d692",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "81dbbbda-10be-4bc2-badb-2e73408df5cb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3423fe78-4f09-4bdf-934e-f06b45e37c50",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5bcb0ba1-1624-4e29-a6e4-44eb9984edb1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "33f5e956-e8c9-4df9-b4d3-eb1e92ffa5ab",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e44a1284-1271-4057-863a-c10db248bbb4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "828e94db-bbe8-4e28-b0fd-715ef1bb3ea4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b4471ec0-3c08-4959-9998-7b6c635f9ae4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a8977979-7317-4038-922f-e07871ad5e65",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c8b28301-d7a4-4dcb-bf86-84991e944cef",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8c55c089-7060-4f7d-8a13-fe6d6bb282f6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1e8a5def-a4bf-4e07-912a-3c2d2a03feec",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "da989082-195c-4884-9272-f493d4104e48",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e55dd14a-3636-42a5-8f60-a18bcfe3928a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d765da3e-1430-4b3c-a1ba-518b6a18b208",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f12b6d16-a616-49e5-8b6c-7bab80e467e2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2086ef67-1605-4103-a113-1af10e06e411",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "46e549b9-4b8d-4eaf-8b80-0ac01881a48f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f1866088-01e6-415f-9dc3-0e6d90faa61a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3ac30647-6c2c-4ace-beb6-6a97743b9149",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9182c67d-9c2e-4713-b2b7-9b57064d7e0e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0c684e03-b244-445f-b78a-354dc0719a7f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "79d96bed-c002-4f5f-ab2a-a36a6b6e5139",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f7a9a9a1-cc2f-4d15-b7e0-05e2e0eec10d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9b6f4dd3-8a54-49ba-b536-4fb7fb96ce1b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "69f6a4ef-a6dc-4e97-a8b7-6472e45b05cc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4d239cb4-a7b5-4d0f-adde-9ab1d56efaca",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3078497c-2425-49ed-9fe4-c6952b11a7ac",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7fea7ca2-58f0-4dc3-a062-c57fe406fc84",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ded06cda-580d-4729-ab7a-644d8f7274fe",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4de0532c-5575-4ac7-abb9-b58033ebe699"
    }
  ]
}