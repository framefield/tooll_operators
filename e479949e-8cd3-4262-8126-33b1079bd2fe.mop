{
  "Name": "CSMeshDuplicate",
  "_id": "e479949e-8cd3-4262-8126-33b1079bd2fe",
  "Namespace": "user.cynic",
  "Description": "example of generating mesh in CS by duplicating input mesh\r\ninput mesh must have:\r\n- BindFlag.ShaderResource\r\n- ResourceOptionFlags.BufferAllowRawViews\r\n",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "f705e562-3848-430c-b35e-3d928c7956f6",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "\r",
          "ByteAddressBuffer Vertices : register (s0);\r",
          "RWByteAddressBuffer OutputVertices : register(u0);\r",
          "\r",
          "\r",
          "[numthreads(512, 1, 1)]\r",
          "void CS_DuplicateVertices(uint3 threadId : SV_DispatchThreadID)\r",
          "{\r",
          "    const uint ATTRIBUTE_SIZE = 76;\r",
          "    \r",
          "    // read vertex\r",
          "    uint index = threadId.x*76;\r",
          "    float4 p = asfloat(Vertices.Load4(index));\r",
          "    //p.xyz *= 1.2;\r",
          "    index += 16;\r",
          "    float3 n = asfloat(Vertices.Load3(index));\r",
          "    index += 12;\r",
          "    float4 c = asfloat(Vertices.Load4(index));\r",
          "    index += 16;\r",
          "    float2 t = asfloat(Vertices.Load2(index));\r",
          "\r",
          "\r",
          "    // write vertex to new output\r",
          "    index = threadId.x*76;\r",
          "    OutputVertices.Store4(index, asint(p));\r",
          "    index += 16;\r",
          "    OutputVertices.Store3(index, asint(n));\r",
          "    index += 12;\r",
          "    OutputVertices.Store4(index, asint(c));\r",
          "    index += 16;    \r",
          "    OutputVertices.Store2(index, asint(t));\r",
          "}"
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Mesh",
      "MetaInstanceID": "e8a434f8-20f6-42e7-9edd-18ab12dc7880",
      "DefaultValue": {
        "Type": "Mesh",
        "Value": "Framefield.Core.MeshValue"
      },
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Mesh",
      "MetaInstanceID": "6423fee5-289d-456d-a7e6-0914b716eae2",
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "c26d6472-7e9a-473b-bd6a-3f99ee3da3b3",
      "MetaID": "3901e8c8-1a8e-4f1f-94ee-1b25153520b5",
      "Name": "CSMeshDuplicateFunc",
      "Version": "2ecf474e-a9eb-4e28-8cbf-87674d262235",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "using System.Runtime.InteropServices;",
        "using Framefield.Core.Rendering;",
        "using SharpDX.D3DCompiler;",
        "using SharpDX.Direct3D;",
        "using SharpDX.DXGI;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using System.CodeDom.Compiler;",
        "",
        "namespace Framefield.Core.ID3901e8c8_1a8e_4f1f_94ee_1b25153520b5",
        "{",
        "    public class Class_CSMeshDuplicate : FXSourceCodeFunction, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Mesh = 1",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override void Dispose()",
        "        {",
        "            _inputMesh = null;",
        "            Utilities.DisposeObj(ref _outputMesh);",
        "            Utilities.DisposeObj(ref _outputUAV);",
        "            Utilities.DisposeObj(ref _vertexSRV);",
        "            Utilities.DisposeObj(ref _csDuplicateMesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) ",
        "        {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Mesh = inputs[(int)InputId.Mesh].Eval(context).Mesh;",
        "            //<<< _params",
        "",
        "            if (_csDuplicateMesh == null)",
        "            {",
        "                Utilities.DisposeObj(ref _csDuplicateMesh);",
        "                var errors = new CompilerErrorCollection();",
        "                try",
        "                {",
        "                    using (var bytecode = ShaderBytecode.Compile(GetCode(0), \"CS_DuplicateVertices\", \"cs_5_0\", ShaderFlags.Debug))",
        "                        _csDuplicateMesh = new ComputeShader(D3DDevice.Device, bytecode);",
        "                }",
        "                catch (SharpDX.CompilationException ex)",
        "                {",
        "                    errors = ErrorsFromString(ex.Message);",
        "                    Logger.Error(this,\"Fx compile error: {0}\", ex.Message);",
        "                }",
        "            }",
        "",
        "            var numVerticesInMesh = Mesh.Vertices.Description.SizeInBytes/Mesh.AttributesSize;",
        "            //Logger.Info(\"num vertices: {0}, inputLayoutSize: {1}, num tringles: {2}\", numVerticesInMesh, Mesh.AttributesSize, Mesh.NumTriangles);",
        "",
        "            if (_inputMesh != Mesh)",
        "            {",
        "                Utilities.DisposeObj(ref _vertexSRV);",
        "                var bufferResource = new ShaderResourceViewDescription.ExtendedBufferResource()",
        "                                         {",
        "                                             ElementCount = Mesh.Vertices.Description.SizeInBytes/4,",
        "                                             FirstElement = 0,",
        "                                             Flags = ShaderResourceViewExtendedBufferFlags.Raw",
        "                                         };",
        "                var srvDesc = new ShaderResourceViewDescription()",
        "                                  {",
        "                                      Format = Format.R32_Typeless,",
        "                                      Dimension = ShaderResourceViewDimension.ExtendedBuffer,",
        "                                      BufferEx = bufferResource",
        "                                  };",
        "                _vertexSRV = new ShaderResourceView(context.D3DDevice, Mesh.Vertices, srvDesc);",
        "                _inputMesh = Mesh;",
        "            }",
        "",
        "            if (_outputMesh == null || _outputMesh.NumTriangles != _inputMesh.NumTriangles)",
        "            {",
        "//                Logger.Info(this, \"create output mesh\");",
        "                Utilities.DisposeObj(ref _outputMesh);",
        "                Utilities.DisposeObj(ref _outputUAV);",
        "               ",
        "                var vertices = new Buffer(context.D3DDevice, new BufferDescription",
        "                                                                 {",
        "                                                                     BindFlags = BindFlags.VertexBuffer | BindFlags.UnorderedAccess,",
        "                                                                     CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                     OptionFlags = ResourceOptionFlags.BufferAllowRawViews,",
        "                                                                     SizeInBytes = _inputMesh.NumTriangles*3*_inputMesh.AttributesSize,",
        "                                                                     Usage = ResourceUsage.Default",
        "                                                                 });",
        "                _outputMesh = new Mesh",
        "                                  {",
        "                                      InputElements = _inputMesh.InputElements,",
        "                                      Vertices = vertices,",
        "                                      NumTriangles = _inputMesh.NumTriangles,",
        "                                      AttributesSize = _inputMesh.AttributesSize",
        "                                  };    ",
        "                                  ",
        "                var bufferResource = new UnorderedAccessViewDescription.BufferResource()",
        "                                         {",
        "                                             ElementCount = Mesh.Vertices.Description.SizeInBytes/4,",
        "                                             FirstElement = 0,",
        "                                             Flags = UnorderedAccessViewBufferFlags.Raw",
        "                                         };",
        "                var srvDesc = new UnorderedAccessViewDescription()   ",
        "                                  {",
        "                                      Format = Format.R32_Typeless,",
        "                                      Dimension = UnorderedAccessViewDimension.Buffer,",
        "                                      Buffer = bufferResource",
        "                                  };",
        "                _outputUAV = new UnorderedAccessView(context.D3DDevice, _outputMesh.Vertices, srvDesc);                                  ",
        "            }",
        "",
        "            var deviceContext = context.D3DDevice.ImmediateContext;",
        "",
        "            deviceContext.ComputeShader.Set(_csDuplicateMesh);",
        "            deviceContext.ComputeShader.SetUnorderedAccessView(0, _outputUAV);",
        "            deviceContext.ComputeShader.SetShaderResource(0, _vertexSRV);",
        "            deviceContext.Dispatch(1, 1, 1);",
        "",
        "            deviceContext.ComputeShader.SetUnorderedAccessView(0, null);",
        "            deviceContext.ComputeShader.SetShaderResource(0, null);",
        "",
        "            context.Mesh = _outputMesh;",
        "",
        "            return context;",
        "        }",
        "",
        "        private Mesh _inputMesh;",
        "        private ShaderResourceView _vertexSRV;",
        "        private Mesh _outputMesh;",
        "        private UnorderedAccessView _outputUAV;",
        "        private ComputeShader _csDuplicateMesh;",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f705e562-3848-430c-b35e-3d928c7956f6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "c26d6472-7e9a-473b-bd6a-3f99ee3da3b3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e8a434f8-20f6-42e7-9edd-18ab12dc7880",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "c26d6472-7e9a-473b-bd6a-3f99ee3da3b3"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c26d6472-7e9a-473b-bd6a-3f99ee3da3b3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6423fee5-289d-456d-a7e6-0914b716eae2"
    }
  ]
}