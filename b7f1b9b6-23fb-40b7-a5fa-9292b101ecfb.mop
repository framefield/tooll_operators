{
  "Name": "SurfacePositionAsImage",
  "_id": "b7f1b9b6-23fb-40b7-a5fa-9292b101ecfb",
  "Namespace": "lib.image.generate",
  "Description": "Scans the surface of a geomerty as a texture.\r\nRequires a decent UV-Layout.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "4da9a6a9-f382-478a-a777-0a1e6ba75e48",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "float RefreshTrigger;",
          "//<<< _parameters\r",
          "\r",
          "//>>> _setup\r",
          "SamplerState samLinear",
          "{",
          "    Filter = MIN_MAG_MIP_LINEAR;",
          "    AddressU = Clamp;",
          "    AddressV = Clamp;",
          "};",
          "//<<< _setup\r",
          "\r",
          "//>>> declarations\r",
          "struct VS_IN",
          "{",
          "    float4 pos : POSITION;",
          "    float3 normal : NORMAL;",
          "    float4 col : COLOR;",
          "    float2 texCoord : TEXCOORD0;",
          "    float3 tangent : TANGENT0;",
          "    float3 binormal : BINORMAL0;",
          "};",
          "",
          "struct PS_IN",
          "{",
          "    float4 pos : SV_POSITION;",
          "    float4 col : COLOR;",
          "//    float2 texCoord : TEXCOORD0;",
          "    float3 normal : NORMAL;",
          "};",
          "",
          "struct PS_OUT",
          "{",
          "    float4 posInObjectSpace : SV_Target0;",
          "    float4 normalInObjectSpace : SV_Target1;",
          "};",
          "//<<< declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    // use the uv coord as position for ortho proj ",
          "    float4 p = float4((input.texCoord.x - 0.5), (input.texCoord.y - 0.5), 0, 1);",
          "    output.pos = mul(p, projMatrix);",
          "    // and the vertex position in object as render output",
          "    output.col = input.pos;//mul(input.pos, objectToWorldMatrix);",
          "//    output.texCoord = input.texCoord;//float2(input.texCoord.x, 1.0f - input.texCoord.y);",
          "    output.normal = input.normal;",
          "",
          "    return output;",
          "}",
          "//<<< VS\r",
          "\r",
          "//>>> PS\r",
          "\r",
          "PS_OUT PS(PS_IN input)\r",
          "{\r",
          "    PS_OUT output = (PS_OUT)0;\r",
          "    output.posInObjectSpace = float4(input.col.xyz, 1);\r",
          "    output.normalInObjectSpace = float4(normalize(input.normal), 1);\r",
          "    return output;\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "//>>> __technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_5_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_5_0, PS() ) );",
          "    }",
          "}",
          "//<<< __technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scene",
      "MetaInstanceID": "e9d3a15b-e86b-437a-8874-f4acbf93ae1b",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RefreshTrigger",
      "MetaInstanceID": "9dc241b1-8b63-4617-b9d7-e5dc61c62067",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Positions",
      "MetaInstanceID": "cdc450bd-7bfd-4d0a-b0fe-1c2ae0f7b15d",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    },
    {
      "Name": "Normals",
      "MetaInstanceID": "07eac291-60e5-4f31-9ed5-ca08552bb877",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "51c3d583-9786-4d34-8503-0583c26f44ca",
      "MetaID": "841f3c85-54db-453d-984f-917412fb010e",
      "Name": "SurfacePositionAsImageFunc",
      "Version": "12b171b8-ed6d-4b48-abc6-c3240de3c6dc",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "using System.Runtime.InteropServices;",
        "using Framefield.Core.Rendering;",
        "using SharpDX.DXGI;",
        "using SharpDX.D3DCompiler;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.ID841f3c85_54db_453d_984f_917412fb010e",
        "{",
        "    public class Class_SurfacePositionAsImage : FXSceneFunction",
        "    {",
        "        public Class_SurfacePositionAsImage()",
        "        {",
        "            _renderer = new BaseRenderer();",
        "        }",
        "",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scene = 1,",
        "            RefreshTrigger = 2",
        "        }",
        "        //<<< _inputids",
        "        ",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            Positions = 0,",
        "            Normals = 1",
        "        }",
        "        //<<< _outputids",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _texture);",
        "            Utilities.DisposeObj(ref _renderTargetView);",
        "            Utilities.DisposeObj(ref _normalTexture);",
        "            Utilities.DisposeObj(ref _normalRenderTargetView);",
        "            Utilities.DisposeObj(ref _renderer);",
        "            base.Dispose();",
        "        }",
        "",
        "        protected bool BuildRenderTarget(OperatorPartContext context)",
        "        {",
        "            if (_texture != null && _texture.Description.Width == (int) _usedViewport.Width && _texture.Description.Height == (int)_usedViewport.Height)",
        "            {",
        "                return false;",
        "            }",
        "",
        "            //_usedViewport = context.Viewport;",
        "",
        "            var textureDesc = new Texture2DDescription",
        "                                  {",
        "                                      BindFlags = BindFlags.RenderTarget | BindFlags.ShaderResource,",
        "                                      Format = Format.R32G32B32A32_Float,",
        "                                      Width = (int) _usedViewport.Width,",
        "                                      Height = (int) _usedViewport.Height,",
        "                                      MipLevels = 1,",
        "                                      SampleDescription = new SampleDescription(1, 0),",
        "                                      Usage = ResourceUsage.Default,",
        "                                      OptionFlags = ResourceOptionFlags.None,",
        "                                      CpuAccessFlags = CpuAccessFlags.None,",
        "                                      ArraySize = 1",
        "                                  };",
        "            Utilities.DisposeObj(ref _texture);",
        "            _texture = new Texture2D(context.D3DDevice, textureDesc);",
        "            Utilities.DisposeObj(ref _normalTexture);",
        "            _normalTexture = new Texture2D(context.D3DDevice, textureDesc);",
        "",
        "            Utilities.DisposeObj(ref _renderTargetView);",
        "            _renderTargetView = new RenderTargetView(D3DDevice.Device, _texture);",
        "            Utilities.DisposeObj(ref _normalRenderTargetView);",
        "            _normalRenderTargetView = new RenderTargetView(D3DDevice.Device, _normalTexture);",
        "",
        "            return true;",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) ",
        "        {",
        "            //>>> __params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Scene = inputs[(int)InputId.Scene];",
        "            var RefreshTrigger = inputs[(int)InputId.RefreshTrigger].Eval(context).Value;",
        "            //<<< __params",
        "            ",
        "            if (_effect == null)",
        "            {",
        "                Compile(0);",
        "            }",
        "",
        "            BuildRenderTarget(context);",
        "            ",
        "            if (RefreshTrigger != _oldRefresh && RefreshTrigger > 0.5) ",
        "            {",
        "                Changed= true;",
        "            }",
        "            _oldRefresh = RefreshTrigger;",
        "            ",
        "            //if (Changed)",
        "            {",
        "                context.D3DDevice.ImmediateContext.ClearRenderTargetView(_renderTargetView, new Color4(0, 0, 0, 0));",
        "                context.D3DDevice.ImmediateContext.ClearRenderTargetView(_normalRenderTargetView, new Color4(0, 0, 0, 0));",
        "    ",
        "                _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "    ",
        "                ShaderResourceView imageView = null;",
        "    ",
        "                var subContext = new OperatorPartContext(context)",
        "                                        {",
        "                                            DepthStencilView = null,",
        "                                            RenderTargetView = _renderTargetView,",
        "                                            RenderTargetViews = new [] { _renderTargetView, _normalRenderTargetView },",
        "                                            Effect = _effect,",
        "                                            Renderer = _renderer,",
        "                                            Viewport = _usedViewport,",
        "                                            InputLayout = context.Renderer.SceneDefaultInputLayout,",
        "                                            CameraProjection = Matrix.OrthoLH(1, 1, -100, 100),",
        "    //                                        WorldToCamera = Matrix.LookAtLH(new Vector3(0, 0, -5), new Vector3(0, 0, 0), new Vector3(0, 1, 0)),",
        "                                            WorldToCamera = Matrix.Identity,",
        "                                            ObjectTWorld = Matrix.Identity,",
        "                                            TextureMatrix = Matrix.Identity",
        "                                        };",
        "                //Logger.Info(this,\"used viewport {0}/{1}\", _usedViewport.Width, _usedViewport.Height);",
        "                Scene.Eval(subContext);",
        "                context.D3DDevice.ImmediateContext.OutputMerger.SetTargets((RenderTargetView)null);",
        "    ",
        "                Utilities.DisposeObj(ref imageView);",
        "                Changed = false;",
        "            }",
        "                ",
        "            switch ((OutputId) outputIdx)",
        "            {",
        "                case OutputId.Positions:",
        "                    context.Image = _texture;",
        "                    break;",
        "                case OutputId.Normals:",
        "                    context.Image = _normalTexture;",
        "                    break;",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        private Texture2D _texture;",
        "        private RenderTargetView _renderTargetView;",
        "        private Texture2D _normalTexture;",
        "        private RenderTargetView _normalRenderTargetView;",
        "        private Viewport _usedViewport = new Viewport(0, 0, 2048, 2048);",
        "        private BaseRenderer _renderer;",
        "        private bool _firstEval = true;",
        "        private float _oldRefresh;",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4da9a6a9-f382-478a-a777-0a1e6ba75e48",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "51c3d583-9786-4d34-8503-0583c26f44ca"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e9d3a15b-e86b-437a-8874-f4acbf93ae1b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "51c3d583-9786-4d34-8503-0583c26f44ca"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9dc241b1-8b63-4617-b9d7-e5dc61c62067",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "51c3d583-9786-4d34-8503-0583c26f44ca"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "51c3d583-9786-4d34-8503-0583c26f44ca",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "cdc450bd-7bfd-4d0a-b0fe-1c2ae0f7b15d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "51c3d583-9786-4d34-8503-0583c26f44ca",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "07eac291-60e5-4f31-9ed5-ca08552bb877"
    }
  ]
}