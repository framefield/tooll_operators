{
  "Name": "UVDisplaceMesh",
  "_id": "e77911b5-a8e0-4708-9020-f89312a66236",
  "Namespace": "lib.mesh.modify",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "5f423ba2-a9c4-403c-bf03-bee061c450a2",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _parameters\r",
          "float2 Offset;",
          "float Amount;",
          "Texture2D DisplaceTexture;",
          "float Facetize;",
          "float ScaleNormals;",
          "float NeutralColor;",
          "//<<< _parameters\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "float Lerp(float a, float b, float t)\r",
          "{\r",
          "    return a + t*(b - a);\r",
          "}\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "float offsetAtPoint2( float2 uv) \r",
          "{\r",
          "        float3 offset1 = DisplaceTexture.SampleLevel(samLinear,  uv + Offset, 0).xyz;\r",
          "        return (offset1.x - NeutralColor) * Amount;\r",
          "}\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{        \r",
          "    float3 p,pn,dn,n;\r",
          "\r",
          "    p = input[0].pos.xyz;\r",
          "    n = input[0].normal.xyz;\r",
          "    pn = p + n * ScaleNormals;\r",
          "    dn = offsetAtPoint2( input[0].texCoord ) * n;\r",
          "    input[0].pos.xyz = p + offsetAtPoint2( input[0].texCoord ) * n;\r",
          "    input[0].normal=  (pn + dn - input[0].pos.xyz);\r",
          "\r",
          "    p = input[1].pos.xyz;\r",
          "    n = input[1].normal;\r",
          "    pn = p + n * ScaleNormals;\r",
          "    dn = offsetAtPoint2( input[0].texCoord ) * n;\r",
          "    input[1].pos.xyz = p + offsetAtPoint2( input[1].texCoord ) * n;\r",
          "    input[1].normal=  (pn + dn - input[1].pos.xyz);\r",
          "\r",
          "    p = input[2].pos.xyz;\r",
          "    n = input[2].normal;\r",
          "    pn = p + n * ScaleNormals;\r",
          "    dn = offsetAtPoint2( input[0].texCoord ) * n;\r",
          "    input[2].pos.xyz = p + offsetAtPoint2( input[2].texCoord ) * n;\r",
          "    input[2].normal=  (pn + dn - input[2].pos.xyz);\r",
          "\r",
          "\r",
          "    if( abs(Facetize) > 0.001) {\r",
          "        float3 n = cross(input[0].pos.xyz - input[1].pos.xyz, input[0].pos.xyz - input[2].pos.xyz);\r",
          "        \r",
          "        input[0].normal = normalize( lerp(input[0].normal,n, Facetize));\r",
          "        input[1].normal = normalize( lerp(input[1].normal,n, Facetize));\r",
          "        input[2].normal = normalize( lerp(input[2].normal,n, Facetize));\r",
          "    }\r",
          "    \r",
          "    outputStream.Append( input[0]);\r",
          "    outputStream.Append( input[1]);\r",
          "    outputStream.Append( input[2]);\r",
          "    \r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Mesh",
      "MetaInstanceID": "df12a608-a2a5-4ad9-b9b9-6f3070981637",
      "DefaultValue": {
        "Type": "Mesh",
        "Value": "Framefield.Core.MeshValue"
      },
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "DisplaceTexture",
      "MetaInstanceID": "ba023636-c805-42c0-8ba8-21f9abda067d",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Amount",
      "MetaInstanceID": "450196ab-91bd-4211-893f-7f3aa48b0add",
      "DefaultValue": {
        "Type": "Float",
        "Value": "5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Offset.U",
      "MetaInstanceID": "118a4081-e90f-41e7-ae5f-a33dd086b0f4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Offset.V",
      "MetaInstanceID": "4de12f50-d15c-44bd-9b13-21e18e7b18c9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Facetize",
      "MetaInstanceID": "136a16be-bb70-485c-9dec-bb9c00a3c3a6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ScaleNormals",
      "MetaInstanceID": "3506929c-0d32-47e6-b6f5-11da9e662129",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NeutralColor",
      "MetaInstanceID": "6f097705-ae69-4e8e-9301-09a184f4af83",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "e81e32bc-1c5a-4de5-9d97-921f6ac66e99",
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "0a949c6c-901a-49a9-ac23-abe2761faba0",
      "MetaID": "425d251b-f7ba-451f-8454-889d3595ce8b",
      "Name": "UVDisplaceMeshFunc",
      "Version": "9a67ee06-9805-4aae-89f9-eb40e5c2ec04",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using SharpDX.Direct3D;",
        "",
        "namespace Framefield.Core.ID425d251b_f7ba_451f_8454_889d3595ce8b",
        "{",
        "    public class Class_UVDisplaceMesh : FXSourceCodeFunction, IFXSceneSourceCode",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            OffsetU = 1,",
        "            OffsetV = 2,",
        "            Amount = 3,",
        "            DisplaceTexture = 4,",
        "            Mesh = 5,",
        "            Facetize = 6,",
        "            ScaleNormals = 7,",
        "            NeutralColor = 8",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class_UVDisplaceMesh()",
        "        {",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "                context.Mesh = _mesh;",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            if (!Changed && _mesh.Vertices != null)",
        "                return;",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var OffsetU = inputs[(int)InputId.OffsetU].Eval(context).Value;",
        "            var OffsetV = inputs[(int)InputId.OffsetV].Eval(context).Value;",
        "            var Offset = new Vector2(OffsetU, OffsetV);",
        "            var Amount = inputs[(int)InputId.Amount].Eval(context).Value;",
        "            var DisplaceTexture = inputs[(int)InputId.DisplaceTexture].Eval(context).Image; // Needs to be checked for null!",
        "            var Mesh = inputs[(int)InputId.Mesh].Eval(context).Mesh;",
        "            var Facetize = inputs[(int)InputId.Facetize].Eval(context).Value;",
        "            var ScaleNormals = inputs[(int)InputId.ScaleNormals].Eval(context).Value;",
        "            var NeutralColor = inputs[(int)InputId.NeutralColor].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            if (DisplaceTexture == null)",
        "                return;",
        "            ",
        "            if (Mesh == null)",
        "                return;",
        "",
        "            _mesh.AttributesSize = Mesh.AttributesSize;",
        "            _mesh.NumTriangles = Mesh.NumTriangles;",
        "            _mesh.InputElements = Mesh.InputElements;",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != Mesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                if (_mesh.Vertices != null)",
        "                    _mesh.Vertices.Dispose();",
        "",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                    {",
        "                                                                        BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                        CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                        OptionFlags = ResourceOptionFlags.None,",
        "                                                                        SizeInBytes = _mesh.NumTriangles*Mesh.AttributesSize*3,",
        "                                                                        Usage = ResourceUsage.Default",
        "                                                                    });",
        "            }",
        "                        ",
        "            var noiseTextureView = new ShaderResourceView(context.D3DDevice, DisplaceTexture);",
        "            _effect.GetVariableByName(\"DisplaceTexture\").AsShaderResource().SetResource(noiseTextureView);",
        "",
        "            SetScalar(\"Facetize\", Facetize);            ",
        "            SetVector2(\"Offset\", Offset); ",
        "            SetScalar(\"Amount\", Amount);",
        "            SetScalar(\"ScaleNormals\", ScaleNormals);   ",
        "            SetScalar(\"NeutralColor\", NeutralColor);   ",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, 0) });",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(Mesh.Vertices, Mesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw(_mesh.NumTriangles*3, 0);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0a949c6c-901a-49a9-ac23-abe2761faba0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e81e32bc-1c5a-4de5-9d97-921f6ac66e99"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5f423ba2-a9c4-403c-bf03-bee061c450a2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0a949c6c-901a-49a9-ac23-abe2761faba0"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "118a4081-e90f-41e7-ae5f-a33dd086b0f4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0a949c6c-901a-49a9-ac23-abe2761faba0"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4de12f50-d15c-44bd-9b13-21e18e7b18c9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0a949c6c-901a-49a9-ac23-abe2761faba0"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "450196ab-91bd-4211-893f-7f3aa48b0add",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0a949c6c-901a-49a9-ac23-abe2761faba0"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ba023636-c805-42c0-8ba8-21f9abda067d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0a949c6c-901a-49a9-ac23-abe2761faba0"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "df12a608-a2a5-4ad9-b9b9-6f3070981637",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0a949c6c-901a-49a9-ac23-abe2761faba0"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "136a16be-bb70-485c-9dec-bb9c00a3c3a6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0a949c6c-901a-49a9-ac23-abe2761faba0"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3506929c-0d32-47e6-b6f5-11da9e662129",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0a949c6c-901a-49a9-ac23-abe2761faba0"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6f097705-ae69-4e8e-9301-09a184f4af83",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0a949c6c-901a-49a9-ac23-abe2761faba0"
    }
  ]
}