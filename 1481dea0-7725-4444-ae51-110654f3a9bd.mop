{
  "Name": "RasterDeformMesh",
  "_id": "1481dea0-7725-4444-ae51-110654f3a9bd",
  "Namespace": "lib.mesh.research",
  "Description": "A variation of noise-distort that combines vertices into a raster grid.\r\n\r\nCheck example.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "216d8c9b-5c64-42e4-938b-b0848bf1ef5b",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _parameters\r",
          "float Facetize;",
          "float3 Center;",
          "float Amount;",
          "float2 Radius;",
          "float NormalSmoothing;",
          "float SmoothMotion;",
          "//<<< _parameters\r",
          "float RadiusMain;\r",
          "float RadiusFallOff;\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "/*\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "*/\r",
          "\r",
          "\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "float3 offsetAtPoint( float3 p) \r",
          "{\r",
          "        \r",
          "        float effectR = length(p - Center);\r",
          "        float fClamped = clamp((effectR - RadiusMain ) / -RadiusFallOff + 0.5,  0.0, 1);\r",
          "        \r",
          "        if (fClamped <= 0.001)\r",
          "            return float3(0,0,0);\r",
          "        \r",
          "        \r",
          "        float stepA = pow( 2, floor(fClamped * 8));\r",
          "        float stepB = pow( 2, floor(fClamped * 8 + SmoothMotion));\r",
          "        float roundSizeA = stepA * Amount/256;\r",
          "        float roundSizeB = stepB * Amount/256;        \r",
          "        return p - lerp(\r",
          "            floor( p / roundSizeA + 0.5) * roundSizeA,\r",
          "            floor( p / roundSizeB + 0.5) * roundSizeB,\r",
          "            fClamped * 8 - floor(fClamped * 8) )\r",
          "        ;        \r",
          "}\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{\r",
          "    Vertex vertex0 = input[0];\r",
          "    Vertex vertex1 = input[1];\r",
          "    Vertex vertex2 = input[2];\r",
          "\r",
          "    float3 p,pn,dn;\r",
          "\r",
          "    p = input[0].pos.xyz;\r",
          "    pn = p + input[0].normal * NormalSmoothing;\r",
          "    dn = offsetAtPoint( pn );\r",
          "    input[0].pos.xyz = p - offsetAtPoint( p );    \r",
          "    input[0].normal=  normalize(pn + dn - input[0].pos);\r",
          "\r",
          "    p = input[1].pos.xyz;\r",
          "    pn = p + input[1].normal * NormalSmoothing;\r",
          "    dn = offsetAtPoint( pn );\r",
          "    input[1].pos.xyz = p - offsetAtPoint( p );    \r",
          "    input[1].normal=  normalize(pn + dn - input[1].pos);\r",
          "\r",
          "    p = input[2].pos;\r",
          "    pn = p + input[2].normal * NormalSmoothing;\r",
          "    dn = offsetAtPoint( pn );\r",
          "    input[2].pos.xyz = p - offsetAtPoint( p );    \r",
          "    input[2].normal=  normalize(pn + dn - input[2].pos);\r",
          "\r",
          "    if( abs(Facetize) > 0.001) {\r",
          "        float3 n = normalize( \r",
          "            cross(input[0].pos - input[1].pos,  input[0].pos - input[2].pos)\r",
          "        );\r",
          "        \r",
          "        input[0].normal = normalize( lerp(input[0].normal,n, Facetize));\r",
          "        input[1].normal = normalize( lerp(input[1].normal,n, Facetize));\r",
          "        input[2].normal = normalize( lerp(input[2].normal,n, Facetize));\r",
          "    }\r",
          "    outputStream.Append( input[0]);\r",
          "    outputStream.Append( input[1]);\r",
          "    outputStream.Append( input[2]);\r",
          "    \r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Mesh",
      "MetaInstanceID": "1653be62-d56b-4322-ba93-a5b5af418bfc",
      "DefaultValue": {
        "Type": "Mesh",
        "Value": "Framefield.Core.MeshValue"
      },
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.X",
      "MetaInstanceID": "24a0f28f-6bd4-4e4f-9d79-5d3f98e0eb80",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Y",
      "MetaInstanceID": "b4eddc04-642e-4d3c-af03-2b5999176edd",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Z",
      "MetaInstanceID": "74c023f1-8ad3-447f-8e2b-2a150937e8b7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Radius.Main",
      "MetaInstanceID": "850b92c6-be2e-4b9e-8594-c1d2f7b31d63",
      "DefaultValue": {
        "Type": "Float",
        "Value": "5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Radius.FallOff",
      "MetaInstanceID": "c4649875-d232-4e81-8807-05ecc926bbaa",
      "DefaultValue": {
        "Type": "Float",
        "Value": "5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Amount",
      "MetaInstanceID": "1b343217-bbbf-44e5-b0cc-ca7b190b2706",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.02"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Facetize",
      "MetaInstanceID": "0d26b242-5b12-40cb-8270-ec9009790fa3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10",
      "Max": "2",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NormalSmoothing",
      "MetaInstanceID": "0660ea74-cabf-4e58-8109-7d4a1b6f8afa",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SmoothMotion",
      "MetaInstanceID": "43565243-d59c-41f9-87c3-3a0983c503c3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.9"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-3",
      "Max": "3",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "89dfab93-fa58-41fd-a50f-b958326abf57",
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "f1bc5418-4128-44a8-8777-da449d97e3ed",
      "MetaID": "70bab43f-43b5-4c6a-8122-23b27faa0521",
      "Name": "RasterDeformMeshFunc",
      "Version": "48146875-f26c-4bcd-b193-edd3cb85a8d9",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using SharpDX.Direct3D;",
        "",
        "namespace Framefield.Core.ID70bab43f_43b5_4c6a_8122_23b27faa0521",
        "{",
        "    public class Class_RasterDeformMesh : FXSourceCodeFunction, IFXSceneSourceCode",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Facetize = 1,",
        "            CenterX = 2,",
        "            CenterY = 3,",
        "            CenterZ = 4,",
        "            Amount = 5,",
        "            Mesh = 6,",
        "            RadiusMain = 7,",
        "            RadiusFallOff = 8,",
        "            NormalSmoothing = 9,",
        "            SmoothMotion = 10",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class_RasterDeformMesh()",
        "        {",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "                context.Mesh = _mesh;",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            if (!Changed && _mesh.Vertices != null)",
        "                return;",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Facetize = inputs[(int)InputId.Facetize].Eval(context).Value;",
        "            var CenterX = inputs[(int)InputId.CenterX].Eval(context).Value;",
        "            var CenterY = inputs[(int)InputId.CenterY].Eval(context).Value;",
        "            var CenterZ = inputs[(int)InputId.CenterZ].Eval(context).Value;",
        "            var Center = new Vector3(CenterX, CenterY, CenterZ);",
        "            var Amount = inputs[(int)InputId.Amount].Eval(context).Value;",
        "            var Mesh = inputs[(int)InputId.Mesh].Eval(context).Mesh;",
        "            var RadiusMain = inputs[(int)InputId.RadiusMain].Eval(context).Value;",
        "            var RadiusFallOff = inputs[(int)InputId.RadiusFallOff].Eval(context).Value;",
        "            var Radius = new Vector2(RadiusMain, RadiusFallOff);",
        "            var NormalSmoothing = inputs[(int)InputId.NormalSmoothing].Eval(context).Value;",
        "            var SmoothMotion = inputs[(int)InputId.SmoothMotion].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            if (Mesh == null)",
        "                return;",
        "",
        "            _mesh.AttributesSize = Mesh.AttributesSize;",
        "            _mesh.NumTriangles = Mesh.NumTriangles;",
        "            _mesh.InputElements = Mesh.InputElements;",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != Mesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                if (_mesh.Vertices != null)",
        "                    _mesh.Vertices.Dispose();",
        "",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                    {",
        "                                                                        BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                        CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                        OptionFlags = ResourceOptionFlags.None,",
        "                                                                        SizeInBytes = _mesh.NumTriangles*Mesh.AttributesSize*3,",
        "                                                                        Usage = ResourceUsage.Default",
        "                                                                    });",
        "            }",
        "                        ",
        "            SetScalar(\"Facetize\", Facetize);",
        "            SetVector(\"Center\", Center);",
        "            SetScalar(\"Amount\", Amount);",
        "            SetScalar(\"RadiusMain\", RadiusMain);",
        "            SetScalar(\"NormalSmoothing\", NormalSmoothing);",
        "            SetScalar(\"RadiusFallOff\", RadiusFallOff);",
        "            SetScalar(\"SmoothMotion\", SmoothMotion);",
        "            ",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, 0) });",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(Mesh.Vertices, Mesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw(_mesh.NumTriangles*3, 0);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f1bc5418-4128-44a8-8777-da449d97e3ed",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "89dfab93-fa58-41fd-a50f-b958326abf57"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "216d8c9b-5c64-42e4-938b-b0848bf1ef5b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f1bc5418-4128-44a8-8777-da449d97e3ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0d26b242-5b12-40cb-8270-ec9009790fa3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f1bc5418-4128-44a8-8777-da449d97e3ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "24a0f28f-6bd4-4e4f-9d79-5d3f98e0eb80",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f1bc5418-4128-44a8-8777-da449d97e3ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b4eddc04-642e-4d3c-af03-2b5999176edd",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f1bc5418-4128-44a8-8777-da449d97e3ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "74c023f1-8ad3-447f-8e2b-2a150937e8b7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f1bc5418-4128-44a8-8777-da449d97e3ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1b343217-bbbf-44e5-b0cc-ca7b190b2706",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f1bc5418-4128-44a8-8777-da449d97e3ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1653be62-d56b-4322-ba93-a5b5af418bfc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f1bc5418-4128-44a8-8777-da449d97e3ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "850b92c6-be2e-4b9e-8594-c1d2f7b31d63",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f1bc5418-4128-44a8-8777-da449d97e3ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c4649875-d232-4e81-8807-05ecc926bbaa",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f1bc5418-4128-44a8-8777-da449d97e3ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0660ea74-cabf-4e58-8109-7d4a1b6f8afa",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f1bc5418-4128-44a8-8777-da449d97e3ed"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "43565243-d59c-41f9-87c3-3a0983c503c3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f1bc5418-4128-44a8-8777-da449d97e3ed"
    }
  ]
}