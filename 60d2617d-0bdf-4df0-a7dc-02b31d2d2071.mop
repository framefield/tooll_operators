{
  "Name": "BassFFTVisualize",
  "_id": "60d2617d-0bdf-4df0-a7dc-02b31d2d2071",
  "Namespace": "user.lev",
  "Description": "Reads float[512] FFT data from a BassLive operator and visualizes the bands using simple geometry",
  "Inputs": [
    {
      "Name": "Color.R",
      "MetaInstanceID": "698bfb78-7463-4c3e-a6b6-b044111164e2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.G",
      "MetaInstanceID": "4545d37b-654a-44d3-a34a-c57070cde49f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.B",
      "MetaInstanceID": "d6d10e07-fd1f-4d7f-a269-4b160a824d0d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Color.A",
      "MetaInstanceID": "cffebc52-fed5-4519-89af-2fa90beddc21",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size.Width",
      "MetaInstanceID": "9f9df474-b79a-4cd7-aecc-be49b570d985",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size.Height",
      "MetaInstanceID": "ef6dd8ee-3776-41be-ae7f-e8792adbd90d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.01"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FFTdata",
      "MetaInstanceID": "913106fa-878f-4ce8-a596-b5a6cd6b4952",
      "DefaultValue": {
        "Type": "Dynamic",
        "Value": "Framefield.Core.Dynamic"
      },
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Multiplier",
      "MetaInstanceID": "30fc70dd-0725-438e-bbb2-a92be086b960",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0.1",
      "Max": "100",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Out",
      "MetaInstanceID": "287771f1-aa21-48a4-b017-9b451e78901a",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "36d3bfa4-2571-47a8-8b24-f02f3e8763ca",
      "MetaID": "0c6046a9-758c-4deb-a367-be43a766a218",
      "Name": "BassFFTVisualizeFunc",
      "Version": "5faec989-0fde-4435-81d3-31591f642312",
      "Type": "Scene",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "/*  ",
        "    v.01",
        "    Michael Auerswald <michael@908video.de>",
        "",
        "    Modified \"Grid\" operator.",
        "    ",
        "    Reads float[512] FFT data from a BassLive operator and visualizes the bands using simple geometry",
        "*/",
        "",
        "namespace Framefield.Core.ID0c6046a9_758c_4deb_a367_be43a766a218",
        "{",
        "    public class Class_BassFFTVisualize : OperatorPart.Function,",
        "                                   Framefield.Core.OperatorPartTraits.IMeshSupplier",
        "    {",
        "    ",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            SizeHeight = 0,",
        "            SizeWidth = 1,",
        "            ColorA = 2,",
        "            ColorB = 3,",
        "            ColorG = 4,",
        "            ColorR = 5,",
        "            FFTdata = 6,",
        "            Multiplier = 7",
        "        }",
        "        //<<< _inputids",
        "        ",
        "        // IMeshSupplier",
        "        public void AddMeshesTo(ICollection<Mesh> meshes)",
        "        {",
        "            UpdateMesh(new OperatorPartContext(), OperatorPart.Connections);",
        "            meshes.Add(_rectangleMesh);",
        "        }",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _rectangleMesh);",
        "        }",
        "",
        "        private RasterizerState _rasterizerState = null;",
        "        ",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            var FFTdata = inputs[(int)InputId.FFTdata].Eval(context).Dynamic;  // Needs to be checked for null!",
        "            if (FFTdata == null) return context;",
        "            ",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "",
        "                var rasterizerDescription = new RasterizerStateDescription();",
        "                rasterizerDescription.FillMode = (FillMode) 3; // Wireframe/Fill",
        "                rasterizerDescription.CullMode = (CullMode) 1; // None",
        "                rasterizerDescription.IsMultisampleEnabled =false;",
        "",
        "                Utilities.DisposeObj(ref _rasterizerState);",
        "                _rasterizerState = new RasterizerState(context.D3DDevice, rasterizerDescription);",
        "                ",
        "                var prevRasterizerState = context.RasterizerState;",
        "                context.RasterizerState = _rasterizerState;",
        "               ",
        "                context.Renderer.SetupEffect(context);",
        "                context.Renderer.Render(_rectangleMesh, context);",
        "                context.RasterizerState = prevRasterizerState;",
        "            }",
        "            catch (Exception)",
        "            {",
        "                Logger.Error(this,\"error\");",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        private void UpdateMesh(OperatorPartContext context, IList<OperatorPart> inputs)",
        "        {",
        "",
        "",
        "            //>>> _params",
        "            var SizeHeight = inputs[(int)InputId.SizeHeight].Eval(context).Value;",
        "            var SizeWidth = inputs[(int)InputId.SizeWidth].Eval(context).Value;",
        "            var Size = new Vector2(SizeHeight, SizeWidth);",
        "            var ColorA = inputs[(int)InputId.ColorA].Eval(context).Value;",
        "            var ColorB = inputs[(int)InputId.ColorB].Eval(context).Value;",
        "            var ColorG = inputs[(int)InputId.ColorG].Eval(context).Value;",
        "            var ColorR = inputs[(int)InputId.ColorR].Eval(context).Value;",
        "            var Color = new Vector4(ColorA, ColorB, ColorG, ColorR);",
        "            var FFTdata = inputs[(int)InputId.FFTdata].Eval(context).Dynamic;  // Needs to be checked for null!",
        "            var Multiplier = inputs[(int)InputId.Multiplier].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            if (_rectangleMesh != null && !Changed)",
        "                return;",
        "",
        "            // >>> Function",
        "            var normal = new Vector3(0.0f, 0.0f, -1.0f);",
        "            var color = new Vector4(ColorR, ColorG, ColorB, ColorA);",
        "            var tangent = new Vector3(1.0f, 0.0f, 0.0f);",
        "            var binormal = new Vector3(0.0f, -1.0f, 0.0f);",
        "",
        "            var inputElements = new InputElement[]",
        "                                    {",
        "                                        new InputElement(\"POSITION\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 0, 0),",
        "                                        new InputElement(\"NORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 16, 0),",
        "                                        new InputElement(\"COLOR\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float, 28, 0),",
        "                                        new InputElement(\"TEXCOORD\", 0, SharpDX.DXGI.Format.R32G32_Float, 44, 0),",
        "                                        new InputElement(\"TANGENT\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 52, 0),",
        "                                        new InputElement(\"BINORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float, 64, 0)",
        "                                    };",
        "",
        "            //int tessX = (int) tesselateWidth;",
        "            //int tessY = (int) tesselateHeight;",
        "            //int numTriangles = (tessX+1) + (tessY+1);",
        "            int numTriangles = _SAMPLES * 2;",
        "            ",
        "",
        "            const int attributesSize = 76;",
        "            //int numTriangles = numQuads*1;",
        "            int streamSize = numTriangles*3*attributesSize;",
        "",
        "            if (_rectangleMesh == null || streamSize != _rectangleMesh.NumTriangles*3*_rectangleMesh.AttributesSize)",
        "            {",
        "                Utilities.DisposeObj(ref _rectangleMesh);",
        "                using (var stream = new DataStream(streamSize, true, true))",
        "                {",
        "                    var vertices = new Buffer(context.D3DDevice, stream, new BufferDescription",
        "                                                                             {",
        "                                                                                 BindFlags = BindFlags.VertexBuffer,",
        "                                                                                 CpuAccessFlags = CpuAccessFlags.Write,",
        "                                                                                 OptionFlags = ResourceOptionFlags.None,",
        "                                                                                 SizeInBytes = streamSize,",
        "                                                                                 Usage = ResourceUsage.Dynamic",
        "                                                                             });",
        "                    _rectangleMesh = new Mesh",
        "                                         {",
        "                                             InputElements = inputElements,",
        "                                             Vertices = vertices,",
        "                                             NumTriangles = numTriangles,",
        "                                             AttributesSize = attributesSize",
        "                                         };",
        "                }",
        "            }",
        "            DataStream vertexStream;",
        "            context.D3DDevice.ImmediateContext.MapSubresource(_rectangleMesh.Vertices, MapMode.WriteDiscard, MapFlags.None, out vertexStream);",
        "            using (vertexStream)",
        "            {",
        "                vertexStream.Position = 0;",
        "",
        "                float bottom= -SizeHeight/2;",
        "                float top=    SizeHeight/2;",
        "                float left = -SizeWidth/2;",
        "                float right = SizeWidth/2;",
        "                ",
        "                for (int cx = 0; cx <= _SAMPLES-1; ++cx)",
        "                {                    ",
        "                    float normalizedRight = (float)cx/_SAMPLES;",
        "                    float normalizedRightNext = (float)(cx+1)/_SAMPLES;",
        "                    float x= left + SizeWidth* normalizedRight;",
        "                    float xNext= left + SizeWidth* normalizedRightNext;",
        "",
        "                    float fft = FFTdata[cx] * Multiplier;",
        "",
        "                    // tri 1 vert 1",
        "                    vertexStream.Write(new Vector4(x,top+fft, 0, 1));",
        "                    vertexStream.Write(normal);",
        "                    vertexStream.Write(color);",
        "                    vertexStream.Write(new Vector2(normalizedRight, 1.0f ));",
        "                    vertexStream.Write(tangent);",
        "                    vertexStream.Write(binormal);",
        "",
        "                    // tri 1 vert 2",
        "                    vertexStream.Write(new Vector4(x, bottom, 0, 1));",
        "                    vertexStream.Write(normal);",
        "                    vertexStream.Write(color);",
        "                    vertexStream.Write(new Vector2(normalizedRight, 1.0f));",
        "                    vertexStream.Write(tangent);",
        "                    vertexStream.Write(binormal);",
        "",
        "                    // tri 1 vert 3",
        "                    vertexStream.Write(new Vector4(xNext, bottom, 0, 1));",
        "                    vertexStream.Write(normal);",
        "                    vertexStream.Write(color);",
        "                    vertexStream.Write(new Vector2(normalizedRight, 1.0f));",
        "                    vertexStream.Write(tangent);",
        "                    vertexStream.Write(binormal);",
        "",
        "",
        "                    // tri 1 vert 1",
        "                    vertexStream.Write(new Vector4(x,top+fft, 0, 1));",
        "                    vertexStream.Write(normal);",
        "                    vertexStream.Write(color);",
        "                    vertexStream.Write(new Vector2(normalizedRight, 1.0f ));",
        "                    vertexStream.Write(tangent);",
        "                    vertexStream.Write(binormal);",
        "",
        "                    // tri 1 vert 2",
        "                    vertexStream.Write(new Vector4(xNext, top+fft, 0, 1));",
        "                    vertexStream.Write(normal);",
        "                    vertexStream.Write(color);",
        "                    vertexStream.Write(new Vector2(normalizedRight, 1.0f));",
        "                    vertexStream.Write(tangent);",
        "                    vertexStream.Write(binormal);",
        "",
        "                    // tri 1 vert 3",
        "                    vertexStream.Write(new Vector4(xNext, bottom, 0, 1));",
        "                    vertexStream.Write(normal);",
        "                    vertexStream.Write(color);",
        "                    vertexStream.Write(new Vector2(normalizedRight, 1.0f));",
        "                    vertexStream.Write(tangent);",
        "                    vertexStream.Write(binormal);",
        "                }",
        "",
        "            }",
        "            context.D3DDevice.ImmediateContext.UnmapSubresource(_rectangleMesh.Vertices, 0);",
        "            //<<< Function",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _rectangleMesh;",
        "        const int _SAMPLES = 512; // hardcoded number of fft samples",
        "    }",
        "}"
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "36d3bfa4-2571-47a8-8b24-f02f3e8763ca",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "287771f1-aa21-48a4-b017-9b451e78901a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ef6dd8ee-3776-41be-ae7f-e8792adbd90d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "36d3bfa4-2571-47a8-8b24-f02f3e8763ca"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9f9df474-b79a-4cd7-aecc-be49b570d985",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "36d3bfa4-2571-47a8-8b24-f02f3e8763ca"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cffebc52-fed5-4519-89af-2fa90beddc21",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "36d3bfa4-2571-47a8-8b24-f02f3e8763ca"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d6d10e07-fd1f-4d7f-a269-4b160a824d0d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "36d3bfa4-2571-47a8-8b24-f02f3e8763ca"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4545d37b-654a-44d3-a34a-c57070cde49f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "36d3bfa4-2571-47a8-8b24-f02f3e8763ca"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "698bfb78-7463-4c3e-a6b6-b044111164e2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "36d3bfa4-2571-47a8-8b24-f02f3e8763ca"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "913106fa-878f-4ce8-a596-b5a6cd6b4952",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "36d3bfa4-2571-47a8-8b24-f02f3e8763ca"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "30fc70dd-0725-438e-bbb2-a92be086b960",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "36d3bfa4-2571-47a8-8b24-f02f3e8763ca"
    }
  ]
}