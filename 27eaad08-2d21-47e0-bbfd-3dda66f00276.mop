{
  "Name": "_ReplicateOnCurve",
  "_id": "27eaad08-2d21-47e0-bbfd-3dda66f00276",
  "Namespace": "lib.geometry.modify",
  "Description": "Instanciates the incoming geometry ",
  "Inputs": [
    {
      "Name": "SceneInput",
      "MetaInstanceID": "d42b971e-adf3-4280-b65e-bc1ca3599349",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "True",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Count",
      "MetaInstanceID": "5acc2a64-dd5f-4437-b57c-4f4ccda697b8",
      "DefaultValue": {
        "Type": "Float",
        "Value": "50"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "U",
      "MetaInstanceID": "8bd8532e-fe33-46ae-8233-ab79cbd91770",
      "DefaultValue": {
        "Type": "Float",
        "Value": "3"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Spacing",
      "MetaInstanceID": "d8894031-88b4-4429-bff1-e4d230d048e9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Curve",
      "MetaInstanceID": "d87b7415-da33-4601-a796-6c5e471b9fd3",
      "DefaultValue": {
        "Type": "Dynamic",
        "Value": "Framefield.Core.Dynamic"
      },
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SizeOverTime",
      "MetaInstanceID": "be31608f-1e01-401e-967d-37b0eb8b0bdc",
      "DefaultValue": {
        "Type": "Dynamic",
        "Value": "Framefield.Core.Dynamic"
      },
      "MetaID": "9701d534-b3ff-4889-a250-84aece4a7d76",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scale",
      "MetaInstanceID": "2c2a8b48-eb1a-4058-b3fc-5e99a68891da",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "SceneTransformOut",
      "MetaInstanceID": "ffab0e1b-3ccb-4a0d-ad61-a7351798a9a4",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "6406ed06-366d-4865-ad59-cbedcf5e36dc",
      "MetaID": "eae71db8-2bdb-47d1-9910-014888f1e55b",
      "Name": "_ReplicateOnCurveFunc",
      "Version": "1c463826-2cc0-444e-80ee-1ab8b2fac3db",
      "Type": "Scene",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using SharpDX;",
        "",
        "using Framefield.Core.IDb03022e3_8b4f_4d33_b749_ef30a03ef098; // CurveProviderFunc",
        "",
        "namespace Framefield.Core.IDeae71db8_2bdb_47d1_9910_014888f1e55b",
        "{",
        "    public class Class_ReplicateOnCurve : OperatorPart.Function",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            SceneInput = 0,",
        "            Count = 1,",
        "            U = 2,",
        "            Spacing = 3,",
        "            Curve = 4,",
        "            SizeOverTime = 5,",
        "            Scale = 6",
        "        }",
        "        //<<< _inputids",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var SceneInput = inputs[(int)InputId.SceneInput];",
        "            var Count = inputs[(int)InputId.Count].Eval(context).Value;",
        "            var U = inputs[(int)InputId.U].Eval(context).Value;",
        "            var Spacing = inputs[(int)InputId.Spacing].Eval(context).Value;",
        "            var Curve = inputs[(int)InputId.Curve].Eval(context).Dynamic;  // Needs to be checked for null!",
        "            var SizeOverTime = inputs[(int)InputId.SizeOverTime].Eval(context).Dynamic;  // Needs to be checked for null!",
        "            var Scale = inputs[(int)InputId.Scale].Eval(context).Value;",
        "            //<<< _params      ",
        "",
        "            var sizeOverTime = SizeOverTime as Curve.ICurve;",
        "",
        "            var _curve = Curve as ICurveProvider;",
        "            if( _curve == null) {            ",
        "                Logger.Warn(this, \"Can't render because curve is not connected or invalid\");",
        "                return context;",
        "            }",
        "",
        "",
        "            if (SceneInput.Connections.Count == 0)",
        "            {",
        "                return context;",
        "            }",
        "",
        "            //const float toRad = (float) Math.PI/180f;",
        "",
        "            var prevTransform = context.ObjectTWorld;",
        "            var u = U;",
        "            ",
        "            const float D= 0.01f;",
        "",
        "            for (var i = 0; i < Count; ++i)",
        "            {",
        "                //Logger.Info(\"u:\" + u);",
        "                var t = new Vector3();",
        "                var progress = i/Count;",
        "                ",
        "                var s = (sizeOverTime != null) ",
        "                        ? (float)sizeOverTime.GetSampledValue(progress)",
        "                        : (float)Math.Sin(progress * 3.1415f);",
        "                ",
        "                s *= Scale;",
        "                ",
        "                var positionAndRadius = _curve.SampleAt(u);",
        "                var positionAndRadius2 = _curve.SampleAt(u+D);",
        "",
        "                var position = new Vector3(positionAndRadius.X, positionAndRadius.Y, positionAndRadius.Z);",
        "                var position2 = new Vector3(positionAndRadius2.X, positionAndRadius2.Y, positionAndRadius2.Z);",
        "                Matrix transform = Matrix.Identity;",
        "",
        "                var dir = position2 - position;",
        "                if (dir.Length() > 0)",
        "                {",
        "                    dir.Normalize();",
        "                    var helperDir = new Vector3(0, -1, 0);",
        "                    ",
        "                    if (Math.Abs(dir.X) < 0.001 && Math.Abs(dir.Z) < 0.001)",
        "                        helperDir = new Vector3(0, 0, 1);",
        "                        ",
        "                    var xAxis = Vector3.Cross(dir, helperDir);",
        "                    xAxis.Normalize();",
        "                    ",
        "                    var yAxis = Vector3.Cross(xAxis, dir);",
        "                    yAxis.Normalize();",
        "                    ",
        "                    var m = Matrix.Identity;",
        "                    m.Row1 = new Vector4(dir, 0);",
        "                    m.Row2 = new Vector4(yAxis, 0);",
        "                    m.Row3 = new Vector4(xAxis, 0);   // ",
        "",
        "                    //m.Row1 = new Vector4(xAxis, 0);",
        "                    //m.Row2 = new Vector4(yAxis, 0);",
        "                    //m.Row3 = new Vector4(dir, 0);   // ",
        "                    transform *= m;",
        "                }",
        "                                                                ",
        "                //var t2= Matrix.Translation(new Vector3(OffsetX + (float)(rand.NextDouble() -0.5f) * (OffsetRandomX + Scatter),",
        "                //                                       OffsetY + (float)(rand.NextDouble() -0.5f) * (OffsetRandomY + Scatter),",
        "                //                                       OffsetZ + (float)(rand.NextDouble() -0.5f) * (OffsetRandomZ + Scatter)));",
        "                var tPos= Matrix.Translation(position);",
        "                transform *= tPos;",
        "                //transform = tPos * transform;",
        "                //transform *= Matrix.Transformation(new Vector3(), new Quaternion(), new Vector3(1,1,1), new Vector3(), new Quaternion(), t);",
        "",
        "",
        "",
        "",
        "                ",
        "                var scale = new Vector3(s, s, s);",
        "                var tScale = Matrix.Scaling( scale.X, scale.Y, scale.Z);",
        "                transform= tScale * transform;",
        "                ",
        "                //transform *= prevTransform; ",
        "                context.ObjectTWorld = transform * prevTransform;",
        "                SceneInput.Connections[i%SceneInput.Connections.Count].Eval(context);",
        "                context.ObjectTWorld = prevTransform;",
        "                u += Spacing;",
        "            }",
        "",
        "            context.ObjectTWorld = prevTransform;",
        "            return context;",
        "        }",
        "",
        "        #region helpers",
        "",
        "        public float Lerp(float a, float b, float t)",
        "        {",
        "            return a + t*(b - a);",
        "        }",
        "",
        "        public float Interpolate(float a, float b, float t)",
        "        {",
        "            float ft = t*3.1415927f;",
        "            float f = (float) (1.0 - Math.Cos(ft))*0.5f;",
        "            return a*(1.0f - f) + b*f;",
        "        }",
        "",
        "      ",
        "",
        "        #endregion",
        "",
        "        private int _seed = 0;",
        "        private float _frequency = 1;",
        "        private float _noiseTime;",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [
    {
      "Name": "CurveProvider",
      "MetaInstanceID": "6bb5715e-c7ed-4e01-bbf7-4007570e08d3",
      "MetaID": "6a030fc7-b200-478e-84a1-dd4825b8d5cc",
      "OperatorProperties": {
        "Name": "",
        "PosX": "100",
        "PosY": "100",
        "Width": "100",
        "Visible": "True",
        "Disabled": "False",
        "Inputs": [],
        "States": []
      }
    }
  ],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d42b971e-adf3-4280-b65e-bc1ca3599349",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6406ed06-366d-4865-ad59-cbedcf5e36dc"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5acc2a64-dd5f-4437-b57c-4f4ccda697b8",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6406ed06-366d-4865-ad59-cbedcf5e36dc"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8bd8532e-fe33-46ae-8233-ab79cbd91770",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6406ed06-366d-4865-ad59-cbedcf5e36dc"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d8894031-88b4-4429-bff1-e4d230d048e9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6406ed06-366d-4865-ad59-cbedcf5e36dc"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d87b7415-da33-4601-a796-6c5e471b9fd3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6406ed06-366d-4865-ad59-cbedcf5e36dc"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "be31608f-1e01-401e-967d-37b0eb8b0bdc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6406ed06-366d-4865-ad59-cbedcf5e36dc"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2c2a8b48-eb1a-4058-b3fc-5e99a68891da",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6406ed06-366d-4865-ad59-cbedcf5e36dc"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6406ed06-366d-4865-ad59-cbedcf5e36dc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ffab0e1b-3ccb-4a0d-ad61-a7351798a9a4"
    }
  ]
}