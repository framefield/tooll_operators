{
  "Name": "MidiInputPresetManager",
  "_id": "2741aae0-8ca5-4b04-adb3-ac1e00fd8e02",
  "Namespace": "user.pixtur.research",
  "Description": "This is an experimental op to save and set presets to Midi-Controllers",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "a738a6af-b419-4d4d-ae84-fe44b9b214eb",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 objectToWorldMatrix;\r",
          "\r",
          "//>>> _parameters\r",
          "float Value;",
          "//<<< _parameters\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{\r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "        Vertex vertex = input[i];\r",
          "        vertex.pos.xyz = mul(vertex.pos, objectToWorldMatrix).xyz + input[i].normal*Value;\r",
          "        vertex.normal.xyz = mul(vertex.normal, objectToWorldMatrix).xyz;\r",
          "        outputStream.Append(vertex);\r",
          "    }\r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Subtree",
      "MetaInstanceID": "0e2a1834-868a-4c26-8d34-bdbe5df0e87a",
      "DefaultValue": {
        "Type": "Generic",
        "Value": "Framefield.Core.Generic"
      },
      "MetaID": "9f831cf2-a1ec-41f4-ba80-cced9736af6b",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "AddPresetTrigger",
      "MetaInstanceID": "70b437a0-c5b0-4f97-a0d0-ff3afec51dfb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "UpdatePresetTrigger",
      "MetaInstanceID": "c912ae79-63f5-4a45-8d59-3c7ce1fa6f05",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ApplyPresetTrigger",
      "MetaInstanceID": "5ae5a937-aa40-4ed9-840c-efeeedbd0698",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "UpdatePresetIndex",
      "MetaInstanceID": "ceb41b17-82cc-4cd3-b914-b3eeb89ed91e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "PresetFolderPath",
      "MetaInstanceID": "47d94e5c-4faa-4e92-a306-3fab6bf97e62",
      "DefaultValue": {
        "Type": "Text",
        "Value": "Config/MidiPresets/"
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "CollectMidiInputsTrigger",
      "MetaInstanceID": "5a5f7a53-9ddb-435d-9207-673f7624810a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ApplyPresetIndex",
      "MetaInstanceID": "6e977b96-9dcf-4398-b4ca-11c6dabe8747",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ApplyPresetWhenIndexChanges",
      "MetaInstanceID": "680afde8-7b40-4388-88b6-886a9ec05a53",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Off",
          "Value": "0"
        },
        {
          "Name": "On",
          "Value": "1"
        }
      ]
    }
  ],
  "Outputs": [
    {
      "Name": "Output",
      "MetaInstanceID": "9ffa51f7-f3d5-482c-875d-fdee8b7dc7d1",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    },
    {
      "Name": "Index",
      "MetaInstanceID": "b887aec8-7eaf-454c-8e9f-98ee62f4fad4",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "0deae779-f177-44d3-ac62-498f148d79ef",
      "MetaID": "9dfaf626-143e-43f0-898f-2d70fd41cc43",
      "Name": "MidiInputPresetManagerFunc",
      "Version": "0f36383a-625b-48e9-a9fe-c0bb1eaaf23d",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using SharpDX.Direct3D;",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using Newtonsoft.Json;",
        "using System.IO;",
        "",
        "namespace Framefield.Core.ID9dfaf626_143e_43f0_898f_2d70fd41cc43",
        "{",
        "    public class Class_MidiInputPresetManager : OperatorPart.Function",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            AddPresetTrigger = 1,",
        "            UpdatePresetTrigger = 2,",
        "            ApplyPresetTrigger = 3,",
        "            UpdatePresetIndex = 4,",
        "            PresetFolderPath = 5,",
        "            Subtree = 6,",
        "            CollectMidiInputsTrigger = 7,",
        "            ApplyPresetIndex = 8,",
        "            ApplyPresetWhenIndexChanges = 9",
        "        }",
        "        //<<< _inputids",
        "        ",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            Output = 0,",
        "            Index = 1",
        "        }",
        "        //<<< _outputids",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _bakedMesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        ",
        "        ",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var AddPresetTrigger = inputs[(int)InputId.AddPresetTrigger].Eval(context).Value;",
        "            var UpdatePresetTrigger = inputs[(int)InputId.UpdatePresetTrigger].Eval(context).Value;",
        "            var ApplyPresetTrigger = inputs[(int)InputId.ApplyPresetTrigger].Eval(context).Value;",
        "            var UpdatePresetIndex = inputs[(int)InputId.UpdatePresetIndex].Eval(context).Value;",
        "            var PresetFolderPath = inputs[(int)InputId.PresetFolderPath].Eval(context).Text;",
        "            var Subtree = inputs[(int)InputId.Subtree];",
        "            var CollectMidiInputsTrigger = inputs[(int)InputId.CollectMidiInputsTrigger].Eval(context).Value;",
        "            var ApplyPresetIndex = inputs[(int)InputId.ApplyPresetIndex].Eval(context).Value;",
        "            var ApplyPresetWhenIndexChanges = (int) inputs[(int)InputId.ApplyPresetWhenIndexChanges].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            _presetFolderPath = PresetFolderPath;",
        "            ",
        "            var collectInputsTriggered = CollectMidiInputsTrigger > _collectMidiInputsTrigger;",
        "            _collectMidiInputsTrigger = CollectMidiInputsTrigger;",
        "            ",
        "            var applyTriggered= ApplyPresetTrigger > _applyPresetTrigger ",
        "                                || (ApplyPresetWhenIndexChanges > 0.5f && (int)ApplyPresetIndex != _applyPresetIndex);",
        "            _applyPresetTrigger = ApplyPresetTrigger;",
        "            ",
        "            var addPresetTriggered = AddPresetTrigger > _addPresetTrigger; ",
        "            _addPresetTrigger = AddPresetTrigger;",
        "",
        "            var updatePresetTriggered = UpdatePresetTrigger > _updatePresetTrigger; ",
        "            _updatePresetTrigger = UpdatePresetTrigger;",
        "",
        "",
        "            if(collectInputsTriggered || _midiInputs == null) ",
        "            {",
        "                CollectCurrentSettings(inputs[(int)InputId.Subtree]);",
        "            } ",
        "            ",
        "            ",
        "            if( addPresetTriggered) ",
        "            {",
        "                _updatePresetIndex++;",
        "                AddPreset(inputs[(int)InputId.UpdatePresetIndex]);",
        "            }",
        "            else {",
        "                _updatePresetIndex = (int)UpdatePresetIndex;",
        "            }",
        "            _applyPresetIndex = (int)ApplyPresetIndex;",
        "            ",
        "            if( applyTriggered) ",
        "            {",
        "                ApplyPreset();",
        "            }",
        "            ",
        "            if( updatePresetTriggered ) {",
        "                _updatePresetIndex =  (int)ApplyPresetIndex;",
        "                Logger.Info(\"Saving preset \" + _updatePresetIndex);",
        "                SavePreset();",
        "            }",
        "            ",
        "            inputs[(int)InputId.Subtree].Eval(context);",
        "            context.Value = _updatePresetIndex;",
        "            ",
        "            ",
        "            return context;",
        "        }",
        "",
        "",
        "        private void CollectCurrentSettings(OperatorPart input) ",
        "        {",
        "            var midiInputCollector = new OperatorPart.CollectOpPartFunctionsOfType<OperatorPartTraits.IMidiInput>();",
        "            input.TraverseWithFunction(midiInputCollector, null);",
        "            _midiInputs = new List<IMidiInput>();",
        "            foreach (var opPartFunction in midiInputCollector.CollectedOpPartFunctions)",
        "            {",
        "                _midiInputs.Add( opPartFunction as IMidiInput);",
        "            }   ",
        "        }",
        "        ",
        "        // --- SAVING PRESETS -------------------------------------------",
        "        private void AddPreset(OperatorPart presetIndexInput) ",
        "        {   ",
        "            // Increment preset index",
        "            lock (this)",
        "            {",
        "                 presetIndexInput.Func = Utilities.CreateValueFunction(new Float((float)_updatePresetIndex));",
        "            }       ",
        "            ",
        "            SavePreset();",
        "        }",
        "        ",
        "        private void SavePreset() ",
        "        {",
        "            var newPreset = new Preset() { Settings= new List<PresetSetting>() };",
        "            foreach(var midiInput in _midiInputs) ",
        "            {",
        "                newPreset.Settings.Add(new PresetSetting() {",
        "                    DeviceId= midiInput.Device,",
        "                    Channel = (int)midiInput.Channel,",
        "                    Control = (int)midiInput.Control,",
        "                    MidiValue = (int)midiInput.CurrentMidiValue,",
        "                });",
        "            }",
        "            ",
        "            using (var sw = new StreamWriter(GetFilepathForCurrentIndex(_updatePresetIndex)))",
        "            {",
        "                sw.Write(JsonConvert.SerializeObject(newPreset, Formatting.Indented));",
        "            }",
        "        }",
        "        ",
        "        private string GetFilepathForCurrentIndex(int index) ",
        "        {",
        "            return _presetFolderPath + \"midiPreset-\" + index + \".json\";",
        "        }",
        "        ",
        "        ",
        "        // --- APPLYING PRESETS --------------------------------------------------",
        "        private void ApplyPreset() ",
        "        {",
        "            var filepath = GetFilepathForCurrentIndex(_applyPresetIndex);",
        "            Preset preset;",
        "            if (!File.Exists(filepath))",
        "            {",
        "                Logger.Warn(this, \"File doesn't exist:  \" + filepath);",
        "                return;",
        "            }",
        "            ",
        "            using (var reader = new StreamReader(filepath))",
        "            {",
        "                var jsonString = reader.ReadToEnd();",
        "                preset = JsonConvert.DeserializeObject<Preset>(jsonString);",
        "                if (preset == null)",
        "                {",
        "                    Logger.Warn(\"Loading preset failed:\" + filepath);",
        "                    return;",
        "                }        ",
        "                Logger.Info(this, \"Loaded preset with settings: \" + preset.Settings.Count());",
        "            }",
        "            ",
        "            int appliedSettingsCount = 0;",
        "            foreach(var midiInput in _midiInputs) ",
        "            {",
        "                foreach(var setting in preset.Settings) ",
        "                {",
        "                    if( midiInput.Device == setting.DeviceId",
        "                        && (int)midiInput.Channel == setting.Channel",
        "                        && (int)midiInput.Control == setting.Control",
        "                        && midiInput.AllowPresets",
        "                    )",
        "                    {",
        "                        appliedSettingsCount ++;",
        "                        midiInput.TargetMidiValue = setting.MidiValue;",
        "                        midiInput.CurrentMidiValue = setting.MidiValue;",
        "                        break;",
        "                    }",
        "                }",
        "            }",
        "            Logger.Info(this, \"Applied \" + appliedSettingsCount + \" settings\");",
        "        }",
        "        ",
        "        ",
        "        struct PresetSetting {",
        "            public string DeviceId;",
        "            public int Channel;",
        "            public int Control;",
        "            public int MidiValue;            ",
        "        }",
        "        ",
        "        class Preset {",
        "            public List<PresetSetting> Settings;",
        "        }       ",
        "        ",
        "        private string _presetFolderPath = \"./\";",
        "        private List<IMidiInput> _midiInputs;",
        "        private int _updatePresetIndex;",
        "        private int _applyPresetIndex;",
        "        private bool _firstEval = true;",
        "        private float _addPresetTrigger;",
        "        private float _applyPresetTrigger;",
        "        private float _updatePresetTrigger;",
        "        private float _collectMidiInputsTrigger;",
        "",
        "        private Mesh _bakedMesh = new Mesh();",
        "        private MeshCollector _meshCollector;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a738a6af-b419-4d4d-ae84-fe44b9b214eb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0deae779-f177-44d3-ac62-498f148d79ef"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "70b437a0-c5b0-4f97-a0d0-ff3afec51dfb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0deae779-f177-44d3-ac62-498f148d79ef"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c912ae79-63f5-4a45-8d59-3c7ce1fa6f05",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0deae779-f177-44d3-ac62-498f148d79ef"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5ae5a937-aa40-4ed9-840c-efeeedbd0698",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0deae779-f177-44d3-ac62-498f148d79ef"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ceb41b17-82cc-4cd3-b914-b3eeb89ed91e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0deae779-f177-44d3-ac62-498f148d79ef"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "47d94e5c-4faa-4e92-a306-3fab6bf97e62",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0deae779-f177-44d3-ac62-498f148d79ef"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0e2a1834-868a-4c26-8d34-bdbe5df0e87a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0deae779-f177-44d3-ac62-498f148d79ef"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5a5f7a53-9ddb-435d-9207-673f7624810a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0deae779-f177-44d3-ac62-498f148d79ef"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6e977b96-9dcf-4398-b4ca-11c6dabe8747",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0deae779-f177-44d3-ac62-498f148d79ef"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "680afde8-7b40-4388-88b6-886a9ec05a53",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "0deae779-f177-44d3-ac62-498f148d79ef"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0deae779-f177-44d3-ac62-498f148d79ef",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9ffa51f7-f3d5-482c-875d-fdee8b7dc7d1"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0deae779-f177-44d3-ac62-498f148d79ef",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b887aec8-7eaf-454c-8e9f-98ee62f4fad4"
    }
  ]
}