{
  "Name": "CubeMapFromCross",
  "_id": "e1091a22-fa92-48c6-a32b-9493367f6928",
  "Namespace": "lib.image.load",
  "Description": "1 - right\r\n2 - left \r\n3 - top\r\n4 - bottom\r\n5 - front\r\n6 - back\r\n",
  "Inputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "d3f79f90-d118-45df-88e5-c37a3bd22dc3",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "84f8b892-0abe-4d6c-a13d-b92ed313495d",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "ea4b50e5-448a-497b-a66f-05013bd5151c",
      "MetaID": "185b06cd-15c6-4ff3-b69c-eca395b14ad5",
      "Name": "CubeMapFromCrossFunc",
      "Version": "1574132d-3c2e-4673-bb0d-05202f2044b2",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using System.IO;",
        "using SharpDX.DXGI;",
        "",
        "namespace Framefield.Core.ID185b06cd_15c6_4ff3_b69c_eca395b14ad5",
        "{",
        "    public class Class_CubeMapFromCross : OperatorPart.Function",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Image = 0",
        "        }",
        "        //<<< _inputids",
        "",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _textureCube);",
        "        }",
        "",
        "        private bool BuildTextureArray(OperatorPartContext context, Texture2D origImage)",
        "        {",
        "            float aspectRatio = origImage.Description.Width/(float)origImage.Description.Height;",
        "            int texWidth = origImage.Description.Width/(aspectRatio > 1.0f ? 4 : 3);",
        "            int texHeight = origImage.Description.Height/(aspectRatio > 1.0f ? 3 : 4);",
        "            int mipLevels = 1;",
        "",
        "            var uavVisuDesc = new Texture2DDescription",
        "                                    {",
        "                                        BindFlags = BindFlags.ShaderResource,",
        "                                        Format = origImage.Description.Format,",
        "                                        Width = texWidth,",
        "                                        Height = texHeight,",
        "                                        MipLevels = mipLevels,",
        "                                        SampleDescription = new SampleDescription(1, 0),",
        "                                        Usage = ResourceUsage.Default,",
        "                                        OptionFlags = ResourceOptionFlags.TextureCube,",
        "                                        CpuAccessFlags = CpuAccessFlags.None,",
        "                                        ArraySize = 6",
        "                                    };",
        "                                ",
        "            Utilities.DisposeObj(ref _textureCube);",
        "            _textureCube = new Texture2D(D3DDevice.Device, uavVisuDesc);",
        "            ",
        "            int[,] mapPositions = { {2,1},{0,1},{1,0},{1,2},{1,1},{3,1} };  // Right Left  top   Bot  front Back",
        "            if (aspectRatio < 1)",
        "            {",
        "                Logger.Info(\"bla\");",
        "                mapPositions[5,0] = 1;",
        "                mapPositions[5,1] = 3;",
        "            }",
        "            var dxContext = context.D3DDevice.ImmediateContext;",
        "            for (int arraySlice = 0; arraySlice < 6; ++arraySlice)",
        "            {",
        "                ResourceRegion region = new ResourceRegion(mapPositions[arraySlice,0]*texWidth,",
        "                                                           mapPositions[arraySlice,1]*texHeight,",
        "                                                           0,",
        "                                                           mapPositions[arraySlice,0]*texWidth+texWidth,",
        "                                                           mapPositions[arraySlice,1]*texHeight+texHeight,",
        "                                                           1);",
        "",
        "                for (int mipSlice = 0; mipSlice < mipLevels; ++mipSlice)",
        "                {",
        "                    int mipSize;",
        "                    int idx = _textureCube.CalculateSubResourceIndex(mipSlice, arraySlice, out mipSize);",
        "                    dxContext.CopySubresourceRegion(origImage, mipSlice, region, _textureCube, idx);",
        "                }",
        "            }",
        "",
        "            return true;",
        "        }",
        "        ",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) ",
        "        {",
        "            //>>> _params",
        "            var Image = inputs[(int)InputId.Image].Eval(context).Image; // Needs to be checked for null!",
        "            //<<< _params",
        "",
        "if (Image == null)",
        "    return context;",
        "",
        "            if (Changed)",
        "            {",
        "                Dispose();",
        "                BuildTextureArray(context, Image);",
        "                Changed = false;",
        "            }",
        "",
        "            if (_textureCube != null)",
        "                context.Image = _textureCube;",
        "",
        "            return context;",
        "        }",
        "",
        "        private Texture2D _textureCube;",
        "        private Texture2D[] _lastImages = new Texture2D[6];",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ea4b50e5-448a-497b-a66f-05013bd5151c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "84f8b892-0abe-4d6c-a13d-b92ed313495d"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d3f79f90-d118-45df-88e5-c37a3bd22dc3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ea4b50e5-448a-497b-a66f-05013bd5151c"
    }
  ]
}