{
  "Name": "TransformMesh",
  "_id": "8d7a0a77-6fb7-4095-bb4f-6257434d54be",
  "Namespace": "lib.mesh.modify",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "79757d3c-62a4-4a9b-8169-ece7b7180e21",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 objectToWorldMatrix;\r",
          "float4x4 worldToObjectMatrix;\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{\r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "        Vertex vertex = input[i];\r",
          "        vertex.pos.xyz = mul(vertex.pos, objectToWorldMatrix).xyz;\r",
          "        vertex.normal = mul((float3x3)(worldToObjectMatrix), vertex.normal);\r",
          "        outputStream.Append(vertex);\r",
          "    }\r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Geometry",
      "MetaInstanceID": "34458974-7979-4d54-93a6-0e8dc306d0b1",
      "DefaultValue": {
        "Type": "Mesh",
        "Value": "Framefield.Core.MeshValue"
      },
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Translate.X",
      "MetaInstanceID": "34f487ac-e66a-43b4-b5c0-3781d339918a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Translate.Y",
      "MetaInstanceID": "69037f50-c7ac-4397-a84e-b5b0ffcfa920",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Translate.Z",
      "MetaInstanceID": "e02230a7-5751-43f9-879c-98e518ef3748",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate.X",
      "MetaInstanceID": "66718597-e476-4278-ba34-100dd1776a28",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate.Y",
      "MetaInstanceID": "c30e3a53-cfac-4e01-9ffa-a70125fed257",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate.Z",
      "MetaInstanceID": "a7276e51-b52d-48c7-8456-59e17ab596a3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scale.X",
      "MetaInstanceID": "ecb9e2a3-0b07-4133-af7f-f4d5fdba5343",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scale.Y",
      "MetaInstanceID": "176e4778-e45e-4b86-b6ce-91c5d6654ff4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scale.Z",
      "MetaInstanceID": "d3e1b2bc-0970-4356-924b-f688d1a21535",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Pivot.X",
      "MetaInstanceID": "28dab6fc-6576-4ac5-969b-7a94a2579685",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Pivot.Y",
      "MetaInstanceID": "50fca3a4-b475-4222-ab11-ae77fa1f6bfa",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Pivot.Z",
      "MetaInstanceID": "8ba86cd3-c6d5-4861-affc-30ef856198e3",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "ddb251cb-9c35-45c1-9be9-fa46dd20e646",
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "e2d0c360-8664-4f1c-b581-e9aba740a99f",
      "MetaID": "cd8cd1ea-1d0e-46ef-a6e0-ce180fc15a2a",
      "Name": "TransformMeshFunc",
      "Version": "feab0d66-8e3d-4591-a329-d0d60b0e200d",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using SharpDX.Direct3D;",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.IDcd8cd1ea_1d0e_46ef_a6e0_ce180fc15a2a",
        "{",
        "    public class Class_TransformMesh : FXSourceCodeFunction, IFXSceneSourceCode",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Geometry = 1,",
        "            TranslateX = 2,",
        "            TranslateY = 3,",
        "            TranslateZ = 4,",
        "            RotateX = 5,",
        "            RotateY = 6,",
        "            RotateZ = 7,",
        "            ScaleX = 8,",
        "            ScaleY = 9,",
        "            ScaleZ = 10,",
        "            PivotX = 11,",
        "            PivotY = 12,",
        "            PivotZ = 13",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class_TransformMesh()",
        "        {",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _bakedMesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "                context.Mesh = _bakedMesh;",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval) ",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "",
        "            if (!Changed && _bakedMesh.Vertices != null)",
        "                return;",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Geometry = inputs[(int)InputId.Geometry].Eval(context).Mesh;",
        "            var TranslateX = inputs[(int)InputId.TranslateX].Eval(context).Value;",
        "            var TranslateY = inputs[(int)InputId.TranslateY].Eval(context).Value;",
        "            var TranslateZ = inputs[(int)InputId.TranslateZ].Eval(context).Value;",
        "            var Translate = new Vector3(TranslateX, TranslateY, TranslateZ);",
        "            var RotateX = inputs[(int)InputId.RotateX].Eval(context).Value;",
        "            var RotateY = inputs[(int)InputId.RotateY].Eval(context).Value;",
        "            var RotateZ = inputs[(int)InputId.RotateZ].Eval(context).Value;",
        "            var Rotate = new Vector3(RotateX, RotateY, RotateZ);",
        "            var ScaleX = inputs[(int)InputId.ScaleX].Eval(context).Value;",
        "            var ScaleY = inputs[(int)InputId.ScaleY].Eval(context).Value;",
        "            var ScaleZ = inputs[(int)InputId.ScaleZ].Eval(context).Value;",
        "            var Scale = new Vector3(ScaleX, ScaleY, ScaleZ);",
        "            var PivotX = inputs[(int)InputId.PivotX].Eval(context).Value;",
        "            var PivotY = inputs[(int)InputId.PivotY].Eval(context).Value;",
        "            var PivotZ = inputs[(int)InputId.PivotZ].Eval(context).Value;",
        "            var Pivot = new Vector3(PivotX, PivotY, PivotZ);",
        "            //<<< _params",
        "",
        "            var inputMesh = Geometry;",
        "            if (inputMesh == null)",
        "            {",
        "                Utilities.DisposeObj(ref _bakedMesh.Vertices);",
        "                return;",
        "            }",
        "",
        "            // Compute size of required vertex buffer and create it",
        "            _bakedMesh.NumTriangles = inputMesh.NumTriangles;",
        "",
        "            _bakedMesh.AttributesSize = inputMesh.AttributesSize;",
        "            _bakedMesh.InputElements = inputMesh.InputElements;",
        "            if (_bakedMesh.Vertices == null || _bakedMesh.Vertices.Description.SizeInBytes != inputMesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                Utilities.DisposeObj(ref _bakedMesh.Vertices);",
        "                _bakedMesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                  {",
        "                                                                      BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                      CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                      OptionFlags = ResourceOptionFlags.None,",
        "                                                                      SizeInBytes = _bakedMesh.NumTriangles*_bakedMesh.AttributesSize*3,",
        "                                                                      Usage = ResourceUsage.Default",
        "                                                                  });",
        "            }",
        "",
        "            // Initialize effect",
        "            var rotation = Quaternion.RotationYawPitchRoll(MathUtil.DegreesToRadians(RotateY),",
        "                                                           MathUtil.DegreesToRadians(RotateX),",
        "                                                           MathUtil.DegreesToRadians(RotateZ));",
        "",
        "            var transform = Matrix.Transformation(Pivot, Quaternion.Zero, Scale, Pivot, rotation, Translate);",
        "",
        "",
        "            //var matrixEffectVariable = _effect.GetVariableByName(\"objectToWorldMatrix\").AsMatrix();",
        "            //matrixEffectVariable.SetMatrix(transform);",
        "            SetMatrix(\"objectToWorldMatrix\", transform);",
        "            ",
        "            ",
        "",
        "            //matrixEffectVariable = _effect.GetVariableByName(\"worldToObjectMatrix\").AsMatrix();",
        "            transform.Invert();",
        "            //matrixEffectVariable.SetMatrix(transform);",
        "            SetMatrix(\"worldToObjectMatrix\", transform);",
        "",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "",
        "            // Configure Pipeline for stream output",
        "            int streamOutputOffset = 0;",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_bakedMesh.Vertices, streamOutputOffset) });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(inputMesh.Vertices, inputMesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            ",
        "            // Draw mesh into vertex buffer",
        "            context.D3DDevice.ImmediateContext.Draw(inputMesh.NumTriangles*3, 0);",
        "            streamOutputOffset += inputMesh.AttributesSize*inputMesh.NumTriangles*3;",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _bakedMesh = new Mesh();",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e2d0c360-8664-4f1c-b581-e9aba740a99f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "ddb251cb-9c35-45c1-9be9-fa46dd20e646"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "79757d3c-62a4-4a9b-8169-ece7b7180e21",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e2d0c360-8664-4f1c-b581-e9aba740a99f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "34458974-7979-4d54-93a6-0e8dc306d0b1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e2d0c360-8664-4f1c-b581-e9aba740a99f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "34f487ac-e66a-43b4-b5c0-3781d339918a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e2d0c360-8664-4f1c-b581-e9aba740a99f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "69037f50-c7ac-4397-a84e-b5b0ffcfa920",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e2d0c360-8664-4f1c-b581-e9aba740a99f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e02230a7-5751-43f9-879c-98e518ef3748",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e2d0c360-8664-4f1c-b581-e9aba740a99f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "66718597-e476-4278-ba34-100dd1776a28",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e2d0c360-8664-4f1c-b581-e9aba740a99f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c30e3a53-cfac-4e01-9ffa-a70125fed257",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e2d0c360-8664-4f1c-b581-e9aba740a99f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a7276e51-b52d-48c7-8456-59e17ab596a3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e2d0c360-8664-4f1c-b581-e9aba740a99f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ecb9e2a3-0b07-4133-af7f-f4d5fdba5343",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e2d0c360-8664-4f1c-b581-e9aba740a99f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "176e4778-e45e-4b86-b6ce-91c5d6654ff4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e2d0c360-8664-4f1c-b581-e9aba740a99f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d3e1b2bc-0970-4356-924b-f688d1a21535",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e2d0c360-8664-4f1c-b581-e9aba740a99f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "28dab6fc-6576-4ac5-969b-7a94a2579685",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e2d0c360-8664-4f1c-b581-e9aba740a99f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "50fca3a4-b475-4222-ab11-ae77fa1f6bfa",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e2d0c360-8664-4f1c-b581-e9aba740a99f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8ba86cd3-c6d5-4861-affc-30ef856198e3",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "e2d0c360-8664-4f1c-b581-e9aba740a99f"
    }
  ]
}