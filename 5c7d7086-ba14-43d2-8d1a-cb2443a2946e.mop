{
  "Name": "StabilizeFeedback",
  "_id": "5c7d7086-ba14-43d2-8d1a-cb2443a2946e",
  "Namespace": "projects.feedback.shaders",
  "Description": "Samples the brightness of the input image and increases or decreses brightness to keep the simulation from collapsing.\r\n",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "cedd0eee-11b5-4e23-8406-d98eb72094ee",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _common parameters\r",
          "float4x4 objectToWorldMatrix;",
          "float4x4 worldToCameraMatrix;",
          "float4x4 projMatrix;",
          "Texture2D txDiffuse;",
          "float2 RenderTargetSize;",
          "//<<< _common parameters\r",
          "\r",
          "//>>> _parameters\r",
          "Texture2D Image;",
          "float Contrast;",
          "float Brightness;",
          "float Hue;",
          "float Saturation;",
          "float SampleRadius;",
          "//<<< _parameters\r",
          "\r",
          "\r",
          "SamplerState samNearest\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Clamp;\r",
          "    AddressV = Clamp;\r",
          "};\r",
          "\r",
          "//>>> declarations\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float2 texCoord : TEXCOORD;\r",
          "};\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float2 texCoord: TEXCOORD0;\t    \r",
          "    float3 worldTViewPos: TEXCOORD1;\r",
          "    float3 worldTViewDir: TEXCOORD2;\r",
          "};\r",
          "//<<< declarations\r",
          "\r",
          "//>>> _GS\r",
          "",
          "//<<< _GS\r",
          "\r",
          "//>>> _VS \r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, worldToCameraMatrix);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = input.texCoord;",
          "",
          "    return output;",
          "}",
          "//<<< _VS\r",
          "\r",
          "float3 rgbToHsv(float r, float g, float b)\r",
          "{\r",
          "    float delta, h,s, v;\r",
          "    float tmp = (r < g) ? r : g;\r",
          "    float min = (tmp < b) ? tmp : b;\r",
          "\r",
          "    tmp = (r > g) ? r : g;\r",
          "    float max = (tmp > b) ? tmp : b;\r",
          "\r",
          "    v = max;\t\t\t\t\r",
          "    delta = max - min;\r",
          "    if (max == min)\r",
          "    {\r",
          "        return float3( 0, 0, max);\r",
          "    }\r",
          "    else if (max != 0)\r",
          "    {\r",
          "        s = delta/max;\r",
          "    }\r",
          "    else\r",
          "    {\r",
          "        // r = g = b = 0\t\t    // s = 0, v is undefined\r",
          "        s = 0;\r",
          "        h = 0;\r",
          "        return float3(h, s, v);\r",
          "    }\r",
          "    if (r == max)\r",
          "        h = (g - b) / delta;\t\t// between yellow & magenta\r",
          "    else if (g == max)\r",
          "        h = 2 + (b - r) / delta;\t// between cyan & yellow\r",
          "    else\r",
          "        h = 4 + (r - g) / delta;\t// between magenta & cyan\r",
          "    h *= 60;\t\t\t\t        // degrees\r",
          "    if (h < 0)\r",
          "        h += 360;\r",
          "    return float3(h,s,v);\r",
          "                \r",
          "}\r",
          "\r",
          "float3 hsvToRgb( float h, float s, float v)\r",
          "{\r",
          "    float satR, satG, satB;\r",
          "    if (h < 120.0f)\r",
          "    {\r",
          "        satR = (120.0f - h) / 60.0f;\r",
          "        satG = h / 60.0f;\r",
          "        satB = 0.0f;\r",
          "    }\r",
          "    else if (h < 240.0f)\r",
          "    {\r",
          "        satR = 0.0f;\r",
          "        satG = (240.0f - h) / 60.0f;\r",
          "        satB = (h - 120.0f) / 60.0f;\r",
          "    }\r",
          "    else\r",
          "    {\r",
          "        satR = (h - 240.0f) / 60.0f;\r",
          "        satG = 0.0f;\r",
          "        satB = (360.0f - h) / 60.0f;\r",
          "    }\r",
          "    satR = (satR < 1.0f) ? satR : 1.0f;\r",
          "    satG = (satG < 1.0f) ? satG : 1.0f;\r",
          "    satB = (satB < 1.0f) ? satB : 1.0f;\r",
          "\r",
          "    return float3( v*(s*satR + (1.0f - s)),\r",
          "                    v*(s*satG + (1.0f - s)),\r",
          "                    v*(s*satB + (1.0f - s)));\r",
          "                    \r",
          "}\r",
          "\r",
          "\r",
          "//>>> PS\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float width, height;\r",
          "    Image.GetDimensions(width, height);\r",
          "    \r",
          "    float4 c=Image.Sample(samNearest, input.texCoord);\r",
          "    \r",
          "    float sx = SampleRadius / width;\r",
          "    float sy = SampleRadius / height;\r",
          "\r",
          "    float4 y1= Image.Sample(samNearest, float2(input.texCoord.x,       input.texCoord.y + sy));\r",
          "    float4 y2= Image.Sample(samNearest, float2(input.texCoord.x,       input.texCoord.y - sy));\r",
          "    \r",
          "    float4 x1= Image.Sample(samNearest,  float2(input.texCoord.x + sx, input.texCoord.y));\r",
          "    float4 x2= Image.Sample(samNearest,  float2(input.texCoord.x - sx, input.texCoord.y)); \r",
          "\r",
          "    float4 xy1= Image.Sample(samNearest, float2(input.texCoord.x+sx* 0.7 ,       input.texCoord.y + sy* 0.7 ) );\r",
          "    float4 xy2= Image.Sample(samNearest, float2(input.texCoord.x+sx* 0.7 ,       input.texCoord.y - sy* 0.7 ) );\r",
          "    \r",
          "    float4 xy3= Image.Sample(samNearest,  float2(input.texCoord.x - sx * 0.7, input.texCoord.y + sy * 0.7));\r",
          "    float4 xy4= Image.Sample(samNearest,  float2(input.texCoord.x - sx * 0.7, input.texCoord.y - sy * 0.7)); \r",
          "\r",
          "\r",
          "    \r",
          "    float4 average =  (c + y1 + y2 + x1 + x2  + (xy1+ xy2 + xy3+ xy4) * 0.75    ) / 8;\r",
          "    float averageGray = (average.x + average.y + average.z)/3;\r",
          "    \r",
          "    //return float4(averageGray,averageGray,averageGray,1);\r",
          "\r",
          "    //float3 f = pow(-averageGray + 0.5 + Brightness, 5) * Contrast +1;\r",
          "    float3 f = pow(-averageGray + 0.5 + Brightness, 7) * Contrast +1;\r",
          "    f = clamp(f, 0.6, 1.5);\r",
          "    c.rgb *= f;\r",
          "    \r",
          "    // Shift colors\r",
          "    float3 hsv = rgbToHsv(c.r, c.g, c.b);\r",
          "    hsv += float3(Hue, Saturation, 0);\r",
          "    c.rgb = hsvToRgb(hsv.x, hsv.y, hsv.z);\r",
          "\r",
          "    \r",
          "    c.a = clamp(c.a, 0,1);\r",
          "    c.rgb = clamp(c.rgb, 0.0001, 1000);\r",
          "    \r",
          "    return c;\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "//>>> _technique\r",
          "technique10 Render",
          "{",
          "    pass P0",
          "    {",
          "        SetGeometryShader( 0 );",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );",
          "    }",
          "}",
          "//<<< _technique\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "e58a0e22-8cfd-4b3d-811d-b0b1090e480f",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Contrast",
      "MetaInstanceID": "17998069-11ec-40e5-a2e7-42b81874ac0c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Brightness",
      "MetaInstanceID": "061da1ae-abad-479c-aba6-5272cd157dee",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Hue",
      "MetaInstanceID": "375e6583-749d-4409-8b24-f0c17d3b17d1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.2",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Saturation",
      "MetaInstanceID": "cf21dac5-203a-4229-84a6-8cbda52379c5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SampleRadius",
      "MetaInstanceID": "465c066b-fcfa-473f-894d-e5bb89eee66a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Image",
      "MetaInstanceID": "831e41dd-88d1-4908-aa00-28402d35e81f",
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "d6e82128-9953-4b07-96e9-cc31c3e9f3a5",
      "MetaID": "bd7ec6ca-7035-46ce-8a4a-4010576eb97e",
      "Name": "StabilizeFeedbackFunc",
      "Version": "cfff37bd-e0cc-44c8-9171-9d3807a8484a",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "namespace Framefield.Core.IDbd7ec6ca_7035_46ce_8a4a_4010576eb97e",
        "{",
        "    public class Class_StabilizeFeedback : FXImageFunction",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Image = 1,",
        "            Contrast = 2,",
        "            Brightness = 3,",
        "            Hue = 4,",
        "            Saturation = 5,",
        "            SampleRadius = 6",
        "        }",
        "        //<<< _inputids",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            return PrepareAndEvalOnChange(context, () =>",
        "            {",
        "                //>>> _params",
        "                var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "                var Image = inputs[(int)InputId.Image].Eval(context).Image; // Needs to be checked for null!",
        "                var Contrast = inputs[(int)InputId.Contrast].Eval(context).Value;",
        "                var Brightness = inputs[(int)InputId.Brightness].Eval(context).Value;",
        "                var Hue = inputs[(int)InputId.Hue].Eval(context).Value;",
        "                var Saturation = inputs[(int)InputId.Saturation].Eval(context).Value;",
        "                var SampleRadius = inputs[(int)InputId.SampleRadius].Eval(context).Value;",
        "                //<<< _params",
        "                ",
        "                if (Image == null)",
        "                    return;",
        "",
        "                ClearRenderTarget(context, new SharpDX.Color4(0, 0, 0, 0));",
        "",
        "                //>>> _setup",
        "                using (var ImageView = new ShaderResourceView(context.D3DDevice, Image))",
        "                {",
        "                    _effect.GetVariableByName(\"RenderTargetSize\").AsVector().Set(new Vector2(_usedViewport.Width, _usedViewport.Height));",
        "                    _effect.GetVariableByName(\"Image\").AsShaderResource().SetResource(ImageView);",
        "                    _effect.GetVariableByName(\"Contrast\").AsScalar().Set(Contrast);",
        "                    _effect.GetVariableByName(\"Brightness\").AsScalar().Set(Brightness);",
        "                    _effect.GetVariableByName(\"Hue\").AsScalar().Set(Hue);",
        "                    _effect.GetVariableByName(\"Saturation\").AsScalar().Set(Saturation);",
        "                    _effect.GetVariableByName(\"SampleRadius\").AsScalar().Set(SampleRadius);",
        "                //<<< _setup",
        "",
        "                var prevBlendState = context.BlendState;",
        "                context.BlendState = OperatorPartContext.DefaultRenderer.DisabledBlendState;",
        "",
        "                Render(context);",
        "",
        "                context.BlendState = prevBlendState;",
        "",
        "                //>>> _cleanup",
        "                }",
        "                //<<< _cleanup",
        "            });",
        "        }",
        "",
        "    }",
        "}",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d6e82128-9953-4b07-96e9-cc31c3e9f3a5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "831e41dd-88d1-4908-aa00-28402d35e81f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cedd0eee-11b5-4e23-8406-d98eb72094ee",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d6e82128-9953-4b07-96e9-cc31c3e9f3a5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e58a0e22-8cfd-4b3d-811d-b0b1090e480f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d6e82128-9953-4b07-96e9-cc31c3e9f3a5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "17998069-11ec-40e5-a2e7-42b81874ac0c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d6e82128-9953-4b07-96e9-cc31c3e9f3a5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "061da1ae-abad-479c-aba6-5272cd157dee",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d6e82128-9953-4b07-96e9-cc31c3e9f3a5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "375e6583-749d-4409-8b24-f0c17d3b17d1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d6e82128-9953-4b07-96e9-cc31c3e9f3a5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cf21dac5-203a-4229-84a6-8cbda52379c5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d6e82128-9953-4b07-96e9-cc31c3e9f3a5"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "465c066b-fcfa-473f-894d-e5bb89eee66a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d6e82128-9953-4b07-96e9-cc31c3e9f3a5"
    }
  ]
}