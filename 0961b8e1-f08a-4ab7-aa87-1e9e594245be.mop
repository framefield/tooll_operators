{
  "Name": "ParticleReplicator1",
  "_id": "0961b8e1-f08a-4ab7-aa87-1e9e594245be",
  "Namespace": "lib.geometry.modify",
  "Description": "Quick prototyping for a non-simulated particle animator.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "e8650c2c-a02c-44ea-8ec6-50f835ed5e96",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "float4x4 objectToWorldMatrix;\r",
          "float4x4 worldToCameraMatrix;\r",
          "float4x4 cameraToObjectMatrix; // modelview inverse\r",
          "float4x4 projMatrix;\r",
          "float4x4 textureMatrix;\r",
          "\r",
          "\r",
          "//>>> _parameters\r",
          "float MaxCount;",
          "float EmitRate;",
          "float LifeTime;",
          "float ResetTrigger;",
          "float EmitFrom;",
          "float3 EmitterSize;",
          "float LimitPositions;",
          "float3 Scatter;",
          "float EmitVelocity;",
          "float2 EmitAngleA;",
          "float2 EmitAngleB;",
          "float2 Size;",
          "float3 Stretch;",
          "float StrechByMotion;",
          "float2 ShrinkOverTime;",
          "float Orientation;",
          "float VelocityFriction;",
          "float3 Gravity;",
          "float3 Turbulence;",
          "float2 TextureCells;",
          "float4 ColorStart;",
          "float4 ColorVariation;",
          "float4 ColorEnd;",
          "float2 FadeWithAge;",
          "float2 Focus;",
          "float2 FadeTooClose;",
          "float RandomSeed;",
          "float3 EmitCenter;",
          "Texture2D NoiseTexture;",
          "float ParametersAffect;",
          "//<<< _parameters\r",
          "\r",
          "float Time;\r",
          "\r",
          "struct PointLight\r",
          "{\r",
          "    float4 position;\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float4 attenuation;\r",
          "};\r",
          "\r",
          "struct SpotLight\r",
          "{\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float constantAttenuation;\r",
          "    float linearAttenuation;\r",
          "    float quadraticAttenuation;\r",
          "    float spotCutoff;\r",
          "    float spotCosCutoff;\r",
          "    float spotExponent;\r",
          "};\r",
          "\r",
          "cbuffer FogSettings\r",
          "{\r",
          "    float4 fogColor;\r",
          "    float fogStart;\r",
          "    float fogEnd;\r",
          "    float fogScale;\r",
          "}\r",
          "\r",
          "cbuffer MaterialBuffer\r",
          "{\r",
          "    float4 materialAmbient;\r",
          "    float4 materialDiffuse;\r",
          "    float4 materialSpecular;\r",
          "    float4 materialEmission;\r",
          "    float materialShininess;\r",
          "};\r",
          "\r",
          "\r",
          "cbuffer PointLightsBuffer\r",
          "{\r",
          "    int numPointLights;\r",
          "    PointLight pointLights[3];\r",
          "};\r",
          "\r",
          "\r",
          "Texture2D txDiffuse;\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "\r",
          "struct VertexData\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "struct InstanceData\r",
          "{\r",
          "    float emitTime : EMIT_TIME;\r",
          "    float emitSize : EMIT_SIZE;\r",
          "    float3 emitPosition : EMIT_POSITION;\r",
          "    float3 emitVelocity : EMIT_VELOCITY;\r",
          "};\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    VertexData vertexData;\r",
          "    InstanceData instanceData;\r",
          "};\r",
          "\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float4 posInWorld  : WORLD_POS;\r",
          "    float3 normal : NORMAL;   \r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float4 vertexColor : COLOR;\r",
          "    float3 fragPosToCamPos : POS;\r",
          "    float fogFragCoord : FALLO;\r",
          "};\r",
          "\r",
          "\r",
          "float mod(float a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "float3 mod(float3 a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "[numthreads(512, 1, 1)]\r",
          " float Noise(int x, int seed)\r",
          "{\r",
          "    int n = x + seed*137;\r",
          "    n = (n<<13) ^ n;\r",
          "    return (float)( 1.0 - ( (n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);\r",
          "}\r",
          "\r",
          "[numthreads(512, 1, 1)]\r",
          "float Lerp(float a, float b, float t)\r",
          "{\r",
          "    return a + t * (b - a);\r",
          "}\r",
          "\r",
          "[numthreads(512, 1, 1)]\r",
          "float Fade(float t)\r",
          "{\r",
          "    return t * t * t * (t * (t * 6 - 15) + 10);\r",
          "}\r",
          "\r",
          "\r",
          "[numthreads(512, 1, 1)]\r",
          "float getNoise(float value, float zoom, float noiseTime, int seed, float period)\r",
          "{\r",
          "    value /= zoom;\r",
          "    value += noiseTime;\r",
          "        \r",
          "    float noiseSum = 0;\r",
          "    for(int a=0; a<4; a++) {\r",
          "        float f = (float)pow(2,a); \r",
          "        float amplitude = (float)pow(period ,a);\r",
          "\r",
          "        float v = value*f / zoom;\r",
          "       \r",
          "        noiseSum += Lerp( Noise( (int)v  , (int)seed ),\r",
          "                          Noise( (int)v+1, (int)seed ),\r",
          "                          Fade( v - (float)floor(v) )\r",
          "                    )* amplitude;\r",
          "    }   \r",
          "    return noiseSum;    \r",
          "}\r",
          "\r",
          "float3 getNoiseOffset(float3 pos) \r",
          "{\r",
          "    float period = 1;\r",
          "    //float3 offset =float3(0,0,0);\r",
          "    //p+= NoiseOffset;\r",
          "\r",
          "    float3 noise1 = float3(getNoise(pos.x + pos.y - 436.3f, Turbulence.z, Turbulence.y, RandomSeed , period),\r",
          "                           getNoise(pos.x + pos.z + 19.3f, Turbulence.z, Turbulence.y, RandomSeed , period ),\r",
          "                           getNoise(pos.y + pos.z - 210.3f, Turbulence.z, Turbulence.y, RandomSeed , period ));\r",
          "\r",
          "    float3 noise2 = float3(getNoise(pos.z + pos.x -21.23f, Turbulence.z, Turbulence.y, RandomSeed , period ),\r",
          "                           getNoise(pos.x + pos.z +31.73f, Turbulence.z, Turbulence.y, RandomSeed , period ),\r",
          "                           getNoise(pos.x + pos.y - 41.33f, Turbulence.z, Turbulence.y, RandomSeed , period ));\r",
          " \r",
          "    float3 noise3 = float3(getNoise(pos.x + pos.z + 91.73f, Turbulence.z, Turbulence.y, RandomSeed , period ),\r",
          "                           getNoise(pos.x + pos.y + 231.23f, Turbulence.z, Turbulence.y, RandomSeed , period ),\r",
          "                           getNoise(pos.y + pos.z - 23.33f, Turbulence.z, Turbulence.y, RandomSeed , period ));\r",
          "\r",
          "\r",
          "    // Noise Offset\r",
          "    \r",
          "    //float3 noise1 = (RGBANoise.SampleLevel(samLinear, (p.xz + NoiseTime*10 * float3(0.14,0.53,0.41) ) / NoiseRepeat , 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "    //float3 noise2 = (RGBANoise.SampleLevel(samLinear, (p.yz + NoiseTime*6 * float3(0.41,0.31,0.01) ) / NoiseRepeat , 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "    //float3 noise3 = (RGBANoise.SampleLevel(samLinear, (p.yx + NoiseTime*9 * float3(0.74,0.15,0.55) ) / NoiseRepeat , 0).xyz - float3(0.5, 0.5, 0.5)) * NoiseAmount;    \r",
          "    float3 noiseCombined = noise1+noise2+noise3;\r",
          "    return noiseCombined;\r",
          "}\r",
          "\r",
          "float3 getOffsetTexture(float3 p) {\r",
          "\r",
          "    float3 offset =float3(0,0,0);\r",
          "    //p+= NoiseOffset;\r",
          "\r",
          "    // Noise Offset\r",
          "    float3 noise1 = (NoiseTexture.SampleLevel(samLinear, (p.xz + Turbulence.y*10 * float3(0.14,0.53,0.41) ) / Turbulence.z , 0).xyz - float3(0.5, 0.5, 0.5));    \r",
          "    float3 noise2 = (NoiseTexture.SampleLevel(samLinear, (p.yz + Turbulence.y*6 * float3(0.41,0.31,0.01) ) / Turbulence.z , 0).xyz - float3(0.5, 0.5, 0.5));    \r",
          "    float3 noise3 = (NoiseTexture.SampleLevel(samLinear, (p.yx + Turbulence.y*9 * float3(0.74,0.15,0.55) ) / Turbulence.z , 0).xyz - float3(0.5, 0.5, 0.5));    \r",
          "    float3 noiseCombined = noise1+noise2+noise3;\r",
          "    return noiseCombined;\r",
          "}\r",
          "\r",
          "\r",
          "float3 getPosition(float age, InstanceData particle) \r",
          "{   \r",
          "    float3 pos = particle.emitPosition;\r",
          "    \r",
          "    \r",
          "    pos += particle.emitVelocity * age /(1 + VelocityFriction * age);\r",
          "    pos += Gravity * age*age /2;\r",
          "    \r",
          "    if(Turbulence.x > 0) {\r",
          "        float turbulenceOverLifetime = clamp( age/LifeTime *10, 0,1);\r",
          "        //pos += getNoiseOffset(pos) * Turbulence.x * turbulenceOverLifetime;\r",
          "        pos += getOffsetTexture(pos) * Turbulence.x * turbulenceOverLifetime;\r",
          "        \r",
          "    }\r",
          "    \r",
          "    return pos;    \r",
          "}\r",
          "\r",
          "\r",
          "//>>>> VS2\r",
          "PS_IN VS( VS_IN input )\r",
          "{\r",
          "    PS_IN output = (PS_IN)0;\r",
          "    \r",
          "    float3 p = input.vertexData.pos;\r",
          "    float age =(Time - input.instanceData.emitTime);\r",
          "    \r",
          "    float3 p1 = getPosition(age, input.instanceData);\r",
          "\r",
          "    // Rotate to velocity     \r",
          "    //Matrix worldMatrix = ( 0,0,0,0, 1,1,1,1, 2,2,2,2, 3,3,3,3 );\r",
          "    Matrix rotateToMotion = ( 1,0,0,0,   0,1,0,0,  0,0,1,0,  0,0,0,1 );\r",
          "    if(Orientation==1) { \r",
          "        float3 p2 = getPosition(age+0.1, input.instanceData);\r",
          "    \r",
          "        float3 dir = normalize(p1-p2);    \r",
          "        float3 helperDir = float3(0, 1, 0);\r",
          "        //if (abs(dir.y) < 0.1 && abs(dir.z) < 0.1)\r",
          "        //    helperDir = float3(1, 0, 0);\r",
          "        if( abs(dir.y) > 0.1)\r",
          "            helperDir = float3(1,0,0);\r",
          "        float3 yAxis = normalize(cross(dir, helperDir));\r",
          "        float3 xAxis = normalize(cross(yAxis, dir));\r",
          "            \r",
          "        rotateToMotion._m00= xAxis.x;\r",
          "        rotateToMotion._m01= xAxis.y;\r",
          "        rotateToMotion._m02= xAxis.z;\r",
          "        rotateToMotion._m03= 0;\r",
          "    \r",
          "        rotateToMotion._m10= yAxis.x;\r",
          "        rotateToMotion._m11= yAxis.y;\r",
          "        rotateToMotion._m12= yAxis.z;\r",
          "        rotateToMotion._m13= 0;\r",
          "    \r",
          "        rotateToMotion._m20= dir.x;\r",
          "        rotateToMotion._m21= dir.y;\r",
          "        rotateToMotion._m22= dir.z;\r",
          "        rotateToMotion._m23= 0;\r",
          "        \r",
          "        rotateToMotion._m30=0;\r",
          "        rotateToMotion._m31=0;\r",
          "        rotateToMotion._m32=0;\r",
          "        rotateToMotion._m33=1;\r",
          "    }\r",
          "    else if(Orientation == 0) {\r",
          "        rotateToMotion = cameraToObjectMatrix; // inverse        \r",
          "    }\r",
          "    else if(Orientation == 2) {\r",
          "        rotateToMotion = cameraToObjectMatrix; // inverse \r",
          "        \r",
          "        float angleZ= input.instanceData.emitTime * 200 ;\r",
          "        float caz= cos(angleZ);\r",
          "        float saz= sin(angleZ);    \r",
          "        float4x4 rotz = {    caz,  -saz,  0,   0,\r",
          "                             saz,   caz,  0,   0,\r",
          "                             0,    0,     1,   0,\r",
          "                             0,    0,     0,   1};\r",
          "        p = mul(p, rotz);\r",
          "    }\r",
          "    \r",
          "    \r",
          "\r",
          "    //m._Row1 = new Vector4(xAxis, 0);\r",
          "    //m.Row2 = new Vector4(yAxis, 0);\r",
          "    //m.Row3 = new Vector4(dir, 0);\r",
          "    \r",
          "    //float4x4 worldMatrix = float4( {xAxis.x, xAxis.y, xAxis.z, 1}, {yAxis.x, yAxis.y, yAxis.z,0}, {dir.xyz,0}, {0,0,0,0} );\r",
          "    //transform *= m;\r",
          "    \r",
          "    // Scale down\r",
          "    float size = Size.x + Size.y * Noise(input.instanceData.emitTime * 100, 200);\r",
          "    float ageRatio = age/LifeTime;\r",
          "    float shrinkBeginning = smoothstep(1,0, LifeTime / age * ShrinkOverTime.x );\r",
          "    float shrinkEnd = clamp( 1- (ageRatio -1 + ShrinkOverTime.y)/ShrinkOverTime.y,  0,1);\r",
          "    size *= shrinkBeginning * shrinkEnd;\r",
          "        \r",
          "    p*= size;\r",
          "    p*= Stretch;\r",
          "        \r",
          "    p = mul(p, rotateToMotion);\r",
          "    p+= p1;\r",
          "    \r",
          "    p = mul(p, objectToWorldMatrix);\r",
          "        \r",
          "        \r",
          "    //Matrix objectToRotatedInWorld = rotateToMotion * objectToWorldMatrix;\r",
          "    \r",
          "    //p = mul(p, objectToRotatedInWorld);    \r",
          "\r",
          "    output.posInWorld = float4(p.xyz,1);\r",
          "    output.pos = mul(output.posInWorld, worldToCameraMatrix);\r",
          "    \r",
          "    output.normal = mul(input.vertexData.normal, (float3x3)objectToWorldMatrix);\r",
          "    //output.normal = mul(input.vertexData.normal, (float3x3)objectToRotatedInWorld);\r",
          "    \r",
          "    output.fogFragCoord = abs(output.pos.z / input.vertexData.pos.w);\r",
          "    \r",
          "    \r",
          "    \r",
          "    output.pos = mul(output.pos, projMatrix);\r",
          "    output.texCoord = mul(float4(input.vertexData.texCoord, 0, 1), textureMatrix).xy;\r",
          "    output.fragPosToCamPos = normalize(mul(cameraToObjectMatrix[3], objectToWorldMatrix) - output.posInWorld);\r",
          "    \r",
          "    \r",
          "    float4 color = lerp( ColorStart, ColorEnd, ageRatio);\r",
          "    \r",
          "    float fadeAtBeginning = smoothstep(1,0, LifeTime / age * FadeWithAge.x );\r",
          "    float fadeAtEnd = clamp( 1- (ageRatio -1 + FadeWithAge.y)/FadeWithAge.y,  0,1);\r",
          "    \r",
          "    float distance = output.pos.z;\r",
          "    float fadeTooClose = smoothstep(0,1, (distance  - FadeTooClose.x) / (FadeTooClose.y+0.001));\r",
          "    color.a *= fadeAtBeginning * fadeAtEnd * fadeTooClose;\r",
          "    \r",
          "    //output.vertexColor = input.vertexData.col * color;\r",
          "    output.vertexColor =  color;\r",
          "      \r",
          "    return output;\r",
          "}\r",
          "//<<< VS\r",
          "\r",
          "float4 calcLightSource(float3 fragPosInWorld, int lightIdx, float3 cameraVector, float3 norm, float4 baseColor)\r",
          "{\r",
          "    float3 lightVector = pointLights[lightIdx].position - fragPosInWorld;\r",
          "    float dist = length(lightVector);\r",
          "    lightVector = normalize(lightVector);\r",
          "    float nxDir = max(0.0, dot(norm, lightVector));\r",
          "    float4 diffuse = pointLights[lightIdx].diffuse * nxDir;\r",
          "    float specularPower = 0.0;\r",
          "    if (nxDir > 0.0)\r",
          "    {\r",
          "        float3 r = reflect(-lightVector, norm);\r",
          "        float rl = max(0.0, dot(r, cameraVector));\r",
          "        specularPower = pow(rl, materialShininess);\r",
          "    }\r",
          "\r",
          "    float attenuation = 1.0 / (pointLights[lightIdx].attenuation.x +\r",
          "                               pointLights[lightIdx].attenuation.y * dist +\r",
          "                               pointLights[lightIdx].attenuation.z * dist * dist);\r",
          "    float4 color = materialAmbient * pointLights[lightIdx].ambient * attenuation +\r",
          "                   materialDiffuse * (diffuse * baseColor * attenuation) +\r",
          "                   materialSpecular * pointLights[lightIdx].specular * specularPower * attenuation * baseColor;\r",
          "\r",
          "    return color;\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "//>>>> PS\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float2 newTexCoords = input.texCoord;\r",
          "    float3 norm = normalize(input.normal);\r",
          "    float4 baseColor = txDiffuse.Sample(samLinear, newTexCoords) * input.vertexColor;\r",
          "\r",
          "    float4 color = float4(0, 0, 0, 1);\r",
          "    for (int lightIdx = 0; lightIdx < numPointLights; ++lightIdx)\r",
          "    {\r",
          "        color += calcLightSource(input.posInWorld, lightIdx, input.fragPosToCamPos, norm, baseColor);\r",
          "    }\r",
          "    color += materialEmission*baseColor;\r",
          "\r",
          "    float fog = (fogEnd - input.fogFragCoord) * fogScale;\r",
          "    fog = clamp(fog, 0.0, 1.0);\r",
          "    return float4(lerp(fogColor.rgb, color.rgb, fog), materialDiffuse.a * baseColor.a);\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "technique10 Render\r",
          "{\r",
          "    pass P0\r",
          "    {\r",
          "        SetGeometryShader( 0 );\r",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );\r",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );\r",
          "    }\r",
          "} "
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Geometry",
      "MetaInstanceID": "ce4333ec-e913-4e94-8f45-052a32fc18da",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "True",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "MaxCount",
      "MetaInstanceID": "e37979ec-4a6b-428b-9c75-1d3c1f6b4e6c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "100"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitRate",
      "MetaInstanceID": "f12a26d8-6d43-4916-b90e-3f77de26c470",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "LifeTime",
      "MetaInstanceID": "d4acf639-b393-4f39-a027-008a9df0275c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ResetTrigger",
      "MetaInstanceID": "2ea6f281-fb88-4282-9712-a6fd62ba141a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitFrom",
      "MetaInstanceID": "1f63a4a8-e7e0-4fbd-9edc-1a83f1a8b373",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Plane",
          "Value": "0"
        },
        {
          "Name": "Sphere",
          "Value": "1"
        },
        {
          "Name": "Ring",
          "Value": "2"
        }
      ]
    },
    {
      "Name": "EmitterSize.Width",
      "MetaInstanceID": "3cf06be5-f87e-42fc-915b-e8e2e129202a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitterSize.Height",
      "MetaInstanceID": "0b2e98b3-a40c-4b8b-816a-97d2f3ec0482",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitterSize.Depth",
      "MetaInstanceID": "14cc7150-0f4a-4677-9da7-ed92b27f95d6",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "LimitPositions",
      "MetaInstanceID": "2a2a716c-ab83-498e-bf6d-6972339ea93d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scatter.X",
      "MetaInstanceID": "b685e1b8-581f-42e9-8cd1-f89cf8d3cf75",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scatter.Y",
      "MetaInstanceID": "2f9d5c38-256b-466d-b057-5302febfee06",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scatter.Z",
      "MetaInstanceID": "3a8bfe3b-aefc-4d1d-9029-eed348ec2df0",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitVelocity",
      "MetaInstanceID": "036a47a1-f57c-47d2-8143-94d4094f0212",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitAngleA.Value",
      "MetaInstanceID": "1056b10c-dfcf-45b3-b1c1-1164b11c9f14",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitAngleA.Scatter",
      "MetaInstanceID": "484ede36-4036-41b8-8295-b1be271e0476",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitAngleB.Value",
      "MetaInstanceID": "0049685a-74a7-4464-b51c-4f9cb6269719",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitAngleB.Scatter",
      "MetaInstanceID": "46cae4f3-f870-4a63-bcc5-19e825f838da",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size.Value",
      "MetaInstanceID": "6b78ea5c-6ba4-4e44-82e8-41768e63ca85",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Size.Random",
      "MetaInstanceID": "267cd1da-6b73-4232-bb76-ba2137537863",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Stretch.X",
      "MetaInstanceID": "bc51cca6-77d3-4dd1-83ab-3230fc5549d4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Stretch.Y",
      "MetaInstanceID": "59b2ae76-8611-47c1-92c2-93005faa1f68",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "StrechByMotion",
      "MetaInstanceID": "16a22143-8c56-429b-8e3c-c31879593901",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ShrinkOverTime.AtBeginning",
      "MetaInstanceID": "c36764a6-815b-4275-977e-7c72a83e5278",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ShrinkOverTime.AtEnd",
      "MetaInstanceID": "58b3486a-56b8-4d2d-a6e0-12dc5fb9f406",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Orientation",
      "MetaInstanceID": "5d451dec-6ccc-4ec1-8d70-8144d48d8468",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "Billboard",
          "Value": "0"
        },
        {
          "Name": "Movement",
          "Value": "1"
        },
        {
          "Name": "Random",
          "Value": "2"
        }
      ]
    },
    {
      "Name": "VelocityFriction",
      "MetaInstanceID": "68717298-77ad-41ad-a74b-98379d3b5ac0",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.001",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Gravity.X",
      "MetaInstanceID": "825f0e7c-8628-4e7b-9161-36fc27b4d95b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Gravity.Y",
      "MetaInstanceID": "3cec2e93-f4c1-4bb6-91aa-0bf6f55d4b8d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Gravity.Z",
      "MetaInstanceID": "d5fb334a-6e20-4773-bc71-2fb0902e99c4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Turbulence.Amount",
      "MetaInstanceID": "e7c31d93-9e8d-441d-abee-5699fd756fcb",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Turbulence.Time",
      "MetaInstanceID": "8206d95a-b0b5-49f9-9979-93fbdf210806",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Turbulence.VariationScale",
      "MetaInstanceID": "5ae2f212-1c74-44ec-9067-f34f3382dff9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "10"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TextureCells.X",
      "MetaInstanceID": "cc4f04cb-ab3c-4276-81af-fdd0e315330e",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TextureCells.Y",
      "MetaInstanceID": "25c08965-9a31-4dea-b237-4cfcf5609805",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorStart.R",
      "MetaInstanceID": "9bc523fa-8807-4c0c-b7f3-f872ce67050b",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorStart.G",
      "MetaInstanceID": "788deaea-1a79-42e8-8f67-d7d6e0fcffa5",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorStart.B",
      "MetaInstanceID": "7b0ff1e5-85f7-4c3b-a4d7-4d883da76f36",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorStart.A",
      "MetaInstanceID": "e4188dc3-d56a-410e-8528-a2e5be18eb03",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorVariation.Hue",
      "MetaInstanceID": "a080b46d-2b6a-4c3e-a94d-da3d6806e79a",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorVariation.Satuation",
      "MetaInstanceID": "21082021-7263-41f7-9a87-be385b880437",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorVariation.Brightness",
      "MetaInstanceID": "f59243ef-b816-4d31-ac70-e8464226f6e9",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorVariation.Alpha",
      "MetaInstanceID": "f1cb1b6c-ce4b-4bbc-a1d9-bce545a190cc",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorEnd.R",
      "MetaInstanceID": "529c7500-8133-4731-a053-a99a12ee2d9c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorEnd.G",
      "MetaInstanceID": "72727fce-7e23-47bc-94f5-b4434a74be98",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorEnd.B",
      "MetaInstanceID": "9376fbea-1980-42aa-86ba-ec7dd40f056c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ColorEnd.A",
      "MetaInstanceID": "9fb4f322-78c1-45a0-b2df-d263cb5d09de",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FadeWithAge.AtBeginning",
      "MetaInstanceID": "898034c8-1c67-49ef-b822-cbd28b5cac13",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FadeWithAge.AtEnd",
      "MetaInstanceID": "e16a9cb7-6d5a-480e-b0ea-710a88f53957",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "1",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Focus.Center",
      "MetaInstanceID": "5de58620-4a79-42f0-8528-bb219adc28f2",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Focus.Range",
      "MetaInstanceID": "b9e5a47b-4f80-4ea8-acc3-95bb81364b80",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FadeTooClose.Distance",
      "MetaInstanceID": "3a099811-ff2f-4417-b6d3-ac39a36a5a49",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "FadeTooClose.Smooth",
      "MetaInstanceID": "863edb6e-616c-4869-99fd-707630890e50",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "RandomSeed",
      "MetaInstanceID": "52156456-0ef1-47ce-b8f5-be840fee3c4c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitCenter.X",
      "MetaInstanceID": "f1fe0198-91e4-4a17-9337-fab17377e199",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitCenter.Y",
      "MetaInstanceID": "bbebbcd5-0cd3-4c31-bbbc-07646fd4d13f",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "EmitCenter.Z",
      "MetaInstanceID": "0d3dd1dc-2e21-4b2f-a375-798e4c1f12c1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Stretch.Z",
      "MetaInstanceID": "84cbcddf-40f4-4494-8558-ca2a7b1116e1",
      "DefaultValue": {
        "Type": "Float",
        "Value": "1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NoiseTexture",
      "MetaInstanceID": "e4eda612-2f77-4bce-bee1-634fbd4d07bf",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ParametersAffect",
      "MetaInstanceID": "53e6a3da-b3de-41f4-a9db-d41eb82c8956",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "AllParticles",
          "Value": "0"
        },
        {
          "Name": "OnlyNewParticle",
          "Value": "1"
        }
      ]
    }
  ],
  "Outputs": [
    {
      "Name": "SceneTransformOut",
      "MetaInstanceID": "870c3430-89cb-4dd7-b31e-80d853fd14d6",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2",
      "MetaID": "28d3de44-e8ac-453c-a9e0-07d69ed05c02",
      "Name": "ParticleReplicator1Func",
      "Version": "088c14b3-183a-481c-bf94-bd07335ec0ee",
      "Type": "Scene",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using SharpDX;",
        "using SharpDX.Direct3D;",
        "using SharpDX.Direct3D11;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.ID28d3de44_e8ac_453c_a9e0_07d69ed05c02",
        "{",
        "    public class Class_ParticleReplicator1 : FXSourceCodeFunction",
        "    {",
        "",
        "        #region Setup and Renderer",
        "        public class Renderer : BaseRenderer",
        "        {",
        "            public override void SetupEffect(OperatorPartContext context)",
        "            {",
        "                base.SetupEffect(context);",
        "                try",
        "                {",
        "                    SetupMaterialConstBuffer(context);",
        "                    SetupFogSettingsConstBuffer(context);",
        "                    SetupPointLightsConstBuffer(context);",
        "                }",
        "                catch (Exception e)",
        "                {",
        "                    Logger.Error(ParentFunc, \"Error building constant buffer: {0} - Source: {1}\", e.Message, e.Source);",
        "                }",
        "            }",
        "            public OperatorPart.Function ParentFunc { get; set; }",
        "        }",
        "",
        "        public Class_ParticleReplicator1()",
        "        {",
        "            _renderer = new Renderer() { ParentFunc = this };",
        "        }",
        "",
        "        public override void Dispose()",
        "        {",
        "            Utilities.DisposeObj(ref _renderer);",
        "            base.Dispose();",
        "        }",
        "",
        "        private void CompileCodePartsOnFirstEvaluation()",
        "        {",
        "            if (!_firstEval)",
        "                return;",
        "",
        "            for (var i = 0; i < NumCodes(); ++i)",
        "            {",
        "                Compile(i);",
        "            }",
        "            _firstEval = false;",
        "            Changed = true;",
        "        }",
        "        #endregion",
        "",
        "        #region Parameters and inputs",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Geometry = 1,",
        "            MaxCount = 2,",
        "            EmitRate = 3,",
        "            LifeTime = 4,",
        "            ResetTrigger = 5,",
        "            EmitFrom = 6,",
        "            EmitterSizeWidth = 7,",
        "            EmitterSizeHeight = 8,",
        "            EmitterSizeDepth = 9,",
        "            LimitPositions = 10,",
        "            ScatterX = 11,",
        "            ScatterY = 12,",
        "            ScatterZ = 13,",
        "            EmitVelocity = 14,",
        "            EmitAngleAValue = 15,",
        "            EmitAngleAScatter = 16,",
        "            EmitAngleBValue = 17,",
        "            EmitAngleBScatter = 18,",
        "            SizeValue = 19,",
        "            SizeRandom = 20,",
        "            StretchX = 21,",
        "            StretchY = 22,",
        "            StrechByMotion = 23,",
        "            ShrinkOverTimeAtBeginning = 24,",
        "            ShrinkOverTimeAtEnd = 25,",
        "            Orientation = 26,",
        "            VelocityFriction = 27,",
        "            GravityX = 28,",
        "            GravityY = 29,",
        "            GravityZ = 30,",
        "            TurbulenceAmount = 31,",
        "            TurbulenceTime = 32,",
        "            TurbulenceVariationScale = 33,",
        "            TextureCellsX = 34,",
        "            TextureCellsY = 35,",
        "            ColorStartR = 36,",
        "            ColorStartG = 37,",
        "            ColorStartB = 38,",
        "            ColorStartA = 39,",
        "            ColorVariationHue = 40,",
        "            ColorVariationSatuation = 41,",
        "            ColorVariationBrightness = 42,",
        "            ColorVariationAlpha = 43,",
        "            ColorEndR = 44,",
        "            ColorEndG = 45,",
        "            ColorEndB = 46,",
        "            ColorEndA = 47,",
        "            FadeWithAgeAtBeginning = 48,",
        "            FadeWithAgeAtEnd = 49,",
        "            FocusCenter = 50,",
        "            FocusRange = 51,",
        "            FadeTooCloseDistance = 52,",
        "            FadeTooCloseSmooth = 53,",
        "            RandomSeed = 54,",
        "            EmitCenterX = 55,",
        "            EmitCenterY = 56,",
        "            EmitCenterZ = 57,",
        "            StretchZ = 58,",
        "            NoiseTexture = 59,",
        "            ParametersAffect = 60",
        "        }",
        "        //<<< _inputids",
        "",
        "        enum EmitterShapeType",
        "        {",
        "            Plane = 0,",
        "            Sphere,",
        "            Ring",
        "        }",
        "",
        "        private OperatorPart _geometry;",
        "        private EmitterShapeType _emitterShape;",
        "        private float _emitRate;",
        "        private int _maxCount;",
        "        private float _lifeTime;",
        "        private Vector3 _emitterSize;",
        "        private float _limitPositions;",
        "        private Vector3 _scatter;",
        "        private float _emitVelocity;",
        "        private Vector2 _emitAngleA;",
        "        private Vector2 _emitAngleB;",
        "        private Vector2 _size;",
        "        private Vector3 _stretch;",
        "        private float _strechByMotion;",
        "        private Vector2 _shrinkOverTime;",
        "        private int _orientation;",
        "        private float  _velocityFriction;",
        "        private Vector3 _gravity;",
        "        private Vector3 _turbulence;",
        "        private Vector2 _textureCells;",
        "        private Color4 _colorStart;",
        "        private Vector4 _colorVariation;",
        "        private Color4 _colorEnd;",
        "        private Vector2 _fadeWithAge;",
        "        private Vector2 _focus;",
        "        private Vector2 _fadeTooClose;",
        "        private int _randomSeed;",
        "        private int _parameterMode;",
        "",
        "        private Vector3 _emitCenter;",
        "        ",
        "        private Vector3 _previousEmitCenter;",
        "",
        "        bool UpdateParametersFromInputs(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Geometry = inputs[(int)InputId.Geometry];",
        "            var MaxCount = inputs[(int)InputId.MaxCount].Eval(context).Value;",
        "            var EmitRate = inputs[(int)InputId.EmitRate].Eval(context).Value;",
        "            var LifeTime = inputs[(int)InputId.LifeTime].Eval(context).Value;",
        "            var ResetTrigger = inputs[(int)InputId.ResetTrigger].Eval(context).Value;",
        "            var EmitFrom = (int) inputs[(int)InputId.EmitFrom].Eval(context).Value;",
        "            var EmitterSizeWidth = inputs[(int)InputId.EmitterSizeWidth].Eval(context).Value;",
        "            var EmitterSizeHeight = inputs[(int)InputId.EmitterSizeHeight].Eval(context).Value;",
        "            var EmitterSizeDepth = inputs[(int)InputId.EmitterSizeDepth].Eval(context).Value;",
        "            var EmitterSize = new Vector3(EmitterSizeWidth, EmitterSizeHeight, EmitterSizeDepth);",
        "            var LimitPositions = inputs[(int)InputId.LimitPositions].Eval(context).Value;",
        "            var ScatterX = inputs[(int)InputId.ScatterX].Eval(context).Value;",
        "            var ScatterY = inputs[(int)InputId.ScatterY].Eval(context).Value;",
        "            var ScatterZ = inputs[(int)InputId.ScatterZ].Eval(context).Value;",
        "            var Scatter = new Vector3(ScatterX, ScatterY, ScatterZ);",
        "            var EmitVelocity = inputs[(int)InputId.EmitVelocity].Eval(context).Value;",
        "            var EmitAngleAValue = inputs[(int)InputId.EmitAngleAValue].Eval(context).Value;",
        "            var EmitAngleAScatter = inputs[(int)InputId.EmitAngleAScatter].Eval(context).Value;",
        "            var EmitAngleA = new Vector2(EmitAngleAValue, EmitAngleAScatter);",
        "            var EmitAngleBValue = inputs[(int)InputId.EmitAngleBValue].Eval(context).Value;",
        "            var EmitAngleBScatter = inputs[(int)InputId.EmitAngleBScatter].Eval(context).Value;",
        "            var EmitAngleB = new Vector2(EmitAngleBValue, EmitAngleBScatter);",
        "            var SizeValue = inputs[(int)InputId.SizeValue].Eval(context).Value;",
        "            var SizeRandom = inputs[(int)InputId.SizeRandom].Eval(context).Value;",
        "            var Size = new Vector2(SizeValue, SizeRandom);",
        "            var StretchX = inputs[(int)InputId.StretchX].Eval(context).Value;",
        "            var StretchY = inputs[(int)InputId.StretchY].Eval(context).Value;",
        "            var StretchZ = inputs[(int)InputId.StretchZ].Eval(context).Value;",
        "            var Stretch = new Vector3(StretchX, StretchY, StretchZ);",
        "            var StrechByMotion = inputs[(int)InputId.StrechByMotion].Eval(context).Value;",
        "            var ShrinkOverTimeAtBeginning = inputs[(int)InputId.ShrinkOverTimeAtBeginning].Eval(context).Value;",
        "            var ShrinkOverTimeAtEnd = inputs[(int)InputId.ShrinkOverTimeAtEnd].Eval(context).Value;",
        "            var ShrinkOverTime = new Vector2(ShrinkOverTimeAtBeginning, ShrinkOverTimeAtEnd);",
        "            var Orientation = (int) inputs[(int)InputId.Orientation].Eval(context).Value;",
        "            var VelocityFriction = inputs[(int)InputId.VelocityFriction].Eval(context).Value;",
        "            var GravityX = inputs[(int)InputId.GravityX].Eval(context).Value;",
        "            var GravityY = inputs[(int)InputId.GravityY].Eval(context).Value;",
        "            var GravityZ = inputs[(int)InputId.GravityZ].Eval(context).Value;",
        "            var Gravity = new Vector3(GravityX, GravityY, GravityZ);",
        "            var TurbulenceAmount = inputs[(int)InputId.TurbulenceAmount].Eval(context).Value;",
        "            var TurbulenceTime = inputs[(int)InputId.TurbulenceTime].Eval(context).Value;",
        "            var TurbulenceVariationScale = inputs[(int)InputId.TurbulenceVariationScale].Eval(context).Value;",
        "            var Turbulence = new Vector3(TurbulenceAmount, TurbulenceTime, TurbulenceVariationScale);",
        "            var TextureCellsX = inputs[(int)InputId.TextureCellsX].Eval(context).Value;",
        "            var TextureCellsY = inputs[(int)InputId.TextureCellsY].Eval(context).Value;",
        "            var TextureCells = new Vector2(TextureCellsX, TextureCellsY);",
        "            var ColorStartR = inputs[(int)InputId.ColorStartR].Eval(context).Value;",
        "            var ColorStartG = inputs[(int)InputId.ColorStartG].Eval(context).Value;",
        "            var ColorStartB = inputs[(int)InputId.ColorStartB].Eval(context).Value;",
        "            var ColorStartA = inputs[(int)InputId.ColorStartA].Eval(context).Value;",
        "            var ColorStart = new Color4(ColorStartR, ColorStartG, ColorStartB, ColorStartA);",
        "            var ColorVariationHue = inputs[(int)InputId.ColorVariationHue].Eval(context).Value;",
        "            var ColorVariationSatuation = inputs[(int)InputId.ColorVariationSatuation].Eval(context).Value;",
        "            var ColorVariationBrightness = inputs[(int)InputId.ColorVariationBrightness].Eval(context).Value;",
        "            var ColorVariationAlpha = inputs[(int)InputId.ColorVariationAlpha].Eval(context).Value;",
        "            var ColorVariation = new Vector4(ColorVariationHue, ColorVariationSatuation, ColorVariationBrightness, ColorVariationAlpha);",
        "            var ColorEndR = inputs[(int)InputId.ColorEndR].Eval(context).Value;",
        "            var ColorEndG = inputs[(int)InputId.ColorEndG].Eval(context).Value;",
        "            var ColorEndB = inputs[(int)InputId.ColorEndB].Eval(context).Value;",
        "            var ColorEndA = inputs[(int)InputId.ColorEndA].Eval(context).Value;",
        "            var ColorEnd = new Color4(ColorEndR, ColorEndG, ColorEndB, ColorEndA);",
        "            var FadeWithAgeAtBeginning = inputs[(int)InputId.FadeWithAgeAtBeginning].Eval(context).Value;",
        "            var FadeWithAgeAtEnd = inputs[(int)InputId.FadeWithAgeAtEnd].Eval(context).Value;",
        "            var FadeWithAge = new Vector2(FadeWithAgeAtBeginning, FadeWithAgeAtEnd);",
        "            var FocusCenter = inputs[(int)InputId.FocusCenter].Eval(context).Value;",
        "            var FocusRange = inputs[(int)InputId.FocusRange].Eval(context).Value;",
        "            var Focus = new Vector2(FocusCenter, FocusRange);",
        "            var FadeTooCloseDistance = inputs[(int)InputId.FadeTooCloseDistance].Eval(context).Value;",
        "            var FadeTooCloseSmooth = inputs[(int)InputId.FadeTooCloseSmooth].Eval(context).Value;",
        "            var FadeTooClose = new Vector2(FadeTooCloseDistance, FadeTooCloseSmooth);",
        "            var RandomSeed = inputs[(int)InputId.RandomSeed].Eval(context).Value;",
        "            var EmitCenterX = inputs[(int)InputId.EmitCenterX].Eval(context).Value;",
        "            var EmitCenterY = inputs[(int)InputId.EmitCenterY].Eval(context).Value;",
        "            var EmitCenterZ = inputs[(int)InputId.EmitCenterZ].Eval(context).Value;",
        "            var EmitCenter = new Vector3(EmitCenterX, EmitCenterY, EmitCenterZ);",
        "            var NoiseTexture = inputs[(int)InputId.NoiseTexture].Eval(context).Image; // Needs to be checked for null!",
        "            var ParametersAffect = (int) inputs[(int)InputId.ParametersAffect].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            _geometry = Geometry;",
        "",
        "            var parameterChanged = false;",
        "",
        "            if (_maxCount != (int)MaxCount)",
        "            {",
        "                _maxCount = (int)MaxCount;",
        "                parameterChanged = true;",
        "            }",
        "",
        "            if (_lifeTime != LifeTime)",
        "            {",
        "                _lifeTime = LifeTime;",
        "                parameterChanged = true;",
        "            }",
        "",
        "            if (_emitterShape != (EmitterShapeType) EmitFrom)",
        "            {",
        "                _emitterShape = (EmitterShapeType) EmitFrom;",
        "                parameterChanged = true;",
        "            }",
        "",
        "            if (_emitRate != EmitRate)",
        "            {",
        "                _emitRate = EmitRate;",
        "                parameterChanged = true;",
        "            }",
        "            if (_emitterSize != EmitterSize)",
        "            {",
        "                _emitterSize = EmitterSize;",
        "                parameterChanged = true;",
        "            }",
        "            if (_limitPositions != LimitPositions)",
        "            {",
        "                _limitPositions = LimitPositions;",
        "                parameterChanged = true;",
        "            }",
        "            if (_scatter != Scatter)",
        "            {",
        "                _scatter = Scatter;",
        "                parameterChanged = true;",
        "            }",
        "            if (_emitVelocity != EmitVelocity)",
        "            {",
        "                _emitVelocity = EmitVelocity;",
        "                parameterChanged = true;",
        "            }",
        "            if (_emitAngleA != EmitAngleA)",
        "            {",
        "                _emitAngleA = EmitAngleA;",
        "                parameterChanged = true;",
        "            }",
        "",
        "            if (_emitAngleB != EmitAngleB)",
        "            {",
        "                _emitAngleB = EmitAngleB;",
        "                parameterChanged = true;",
        "            }",
        "            if (_size != Size)",
        "            {",
        "                _size = Size;",
        "                //parameterChanged = true;",
        "            }",
        "",
        "            if (_stretch != Stretch)",
        "            {",
        "                _stretch = Stretch;",
        "                //parameterChanged = true;",
        "            }",
        "            if (_strechByMotion != StrechByMotion)",
        "            {",
        "                _strechByMotion = StrechByMotion;",
        "                //parameterChanged = true;",
        "            }",
        "            if (_shrinkOverTime != ShrinkOverTime)",
        "            {",
        "                _shrinkOverTime = ShrinkOverTime;",
        "                //parameterChanged = true;",
        "            }",
        "            if (_orientation != Orientation)",
        "            {",
        "                _orientation = Orientation;",
        "                //parameterChanged = true;",
        "            }",
        "            if (_velocityFriction != VelocityFriction)",
        "            {",
        "                _velocityFriction = VelocityFriction;",
        "                //parameterChanged = true;",
        "            }",
        "            if (_gravity != Gravity)",
        "            {",
        "                _gravity = Gravity;",
        "                //parameterChanged = true;",
        "            }",
        "            if (_turbulence != Turbulence)",
        "            {",
        "                _turbulence = Turbulence;",
        "                //parameterChanged = true;",
        "            }",
        "",
        "            if (_textureCells != TextureCells)",
        "            {",
        "                _textureCells = TextureCells;",
        "                //parameterChanged = true;",
        "            }",
        "            if (_colorStart != ColorStart)",
        "            {",
        "                _colorStart = ColorStart;",
        "                //parameterChanged = true;",
        "            }",
        "            if (_colorVariation != ColorVariation)",
        "            {",
        "                _colorVariation = ColorVariation;",
        "                //parameterChanged = true;",
        "            }",
        "            if (_colorEnd != ColorEnd)",
        "            {",
        "                _colorEnd = ColorEnd;",
        "                //parameterChanged = true;",
        "            }",
        "            if (_fadeWithAge != FadeWithAge)",
        "            {",
        "                _fadeWithAge = FadeWithAge;",
        "                //parameterChanged = true;",
        "            }",
        "            if (_focus != Focus)",
        "            {",
        "                _focus = Focus;",
        "                //parameterChanged = true;",
        "            }",
        "            if (_fadeTooClose != FadeTooClose)",
        "            {",
        "                _fadeTooClose = FadeTooClose;",
        "                //parameterChanged = true;",
        "            }",
        "            if (_randomSeed != (int)RandomSeed)",
        "            {",
        "                _randomSeed = (int)RandomSeed;",
        "                parameterChanged = true;",
        "            }",
        "            ",
        "            _previousEmitCenter = _emitCenter;",
        "            if (_emitCenter != EmitCenter)",
        "            {",
        "                _emitCenter = EmitCenter;",
        "                parameterChanged = true;",
        "            }",
        "            ",
        "            ",
        "            if(_parameterMode != (int)ParametersAffect) {",
        "                _parameterMode = (int)ParametersAffect;",
        "                parameterChanged= true;",
        "            }",
        "            ",
        "            return parameterChanged;",
        "        }",
        "        #endregion",
        "",
        "        Vector3 GetScatterVector(Random rand)",
        "        {",
        "            return new Vector3((float)rand.NextDouble() - 0.5f,",
        "                                (float)rand.NextDouble() - 0.5f,",
        "                                (float)rand.NextDouble() - 0.5f);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            CompileCodePartsOnFirstEvaluation();",
        "",
        "            var parameterChanged = UpdateParametersFromInputs(context, inputs);",
        "            if(!parameterChanged) {",
        "            //Logger.Info(\"keep\");",
        "            }",
        "",
        "            if (_geometry.Connections.Count == 0)",
        "                return context;",
        "",
        "            var numInstances = _maxCount;",
        "",
        "            var instancedMesh = GetMeshFromSceneInput(_geometry);",
        "            if (instancedMesh == null)",
        "                return context;",
        "",
        "            var rand = new Random(_randomSeed);",
        "",
        "            var prevTransform = context.ObjectTWorld;",
        "",
        "",
        "            // Initialize particle list",
        "            if (numInstances != _particles.Count())",
        "            {",
        "                _particles = new Particle[_maxCount];",
        "                _emitIndex = 0;",
        "                ",
        "            }",
        "            ",
        "            if( _parameterMode == 0 &&  (parameterChanged || _lastTime > context.Time)) {",
        "                _lastTime = context.Time - _maxCount / _emitRate;            ",
        "            }",
        "",
        "            // Emit new Particles",
        "            var emitPeriod = 1.0 / _emitRate;",
        "            var lastParticleEmitTime = _lastTime - (_lastTime % emitPeriod);",
        "            var emitTime = lastParticleEmitTime + emitPeriod;",
        "            //emitTime = context.Time;",
        "            _lastTime = context.Time;",
        "            ",
        "            ",
        "            var emitCenterDelta = ( _emitCenter - _previousEmitCenter);",
        "            if( emitTime < context.Time) {",
        "                //Logger.Info(\"n:{0}\" , emitCenterDelta);",
        "            }",
        "            ",
        "            var numberOfParticlesToEmit =  (int)((context.Time-emitTime)*_emitRate ) ;",
        "            var numberOfPartriclesEmitted = 0;",
        "            if(numberOfParticlesToEmit <1) numberOfParticlesToEmit = 1;",
        "            ",
        "            ",
        "",
        "            while (emitTime < context.Time)",
        "            {",
        "                float emitBatchProgress =  (float)numberOfPartriclesEmitted / (float)numberOfParticlesToEmit ;",
        "                numberOfPartriclesEmitted++;",
        "                ",
        "                Vector3 particleEmitCenter = _previousEmitCenter + emitCenterDelta * emitBatchProgress;",
        "                Vector3 pos = particleEmitCenter; ",
        "                ",
        "                Vector3 emitDirection = Vector3.UnitY;",
        "                Vector3 axisA = Vector3.UnitX;",
        "                Vector3 axisB = Vector3.UnitZ;",
        "",
        "                // Initialize Random",
        "                int overallIndex = (int)(emitTime * _emitRate);",
        "                rand = new Random((int)((overallIndex *1.245) % 721.2));",
        "                rand = new Random((int)(rand.NextDouble() * 1000)+ overallIndex);",
        "                ",
        "                // Fetch some values to avoid patterns",
        "                for(var randIndex=0;randIndex < overallIndex % 3;++randIndex) {",
        "                    rand.NextDouble();",
        "                }",
        "                ",
        "",
        "                int indexForLimitedPositions = (int)(overallIndex % _limitPositions);",
        "",
        "                switch (_emitterShape)",
        "                {",
        "",
        "                    // Plane",
        "                    case EmitterShapeType.Plane:",
        "                        axisA = Vector3.UnitX;",
        "                        axisB = Vector3.UnitY;",
        "                        if (_limitPositions < 0.5f)",
        "                        {",
        "                            pos = new Vector3((float)(rand.NextDouble() - 0.5),",
        "                                              (float)(rand.NextDouble() - 0.5),",
        "                                              (float)(rand.NextDouble() - 0.5)) * _emitterSize + particleEmitCenter;",
        "                        }",
        "                        else",
        "                        {",
        "                            float ratio = _emitterSize.X / _emitterSize.Z;",
        "                            float columns = (int)(_limitPositions * ratio) + 1;",
        "                            float row = indexForLimitedPositions % columns;",
        "                            float col = indexForLimitedPositions - columns * row;",
        "                            pos = new Vector3(_emitterSize.X / columns * col, 0, _emitterSize.Z / columns * row);",
        "                        }",
        "                        ",
        "                        pos+= _scatter * GetScatterVector(new Random( indexForLimitedPositions ) );",
        "                        //emitDirection = po",
        "                        break;",
        "",
        "                    ",
        "                    // Sphere",
        "                    case EmitterShapeType.Sphere:",
        "                    {",
        "                        if (_limitPositions < 0.5f)",
        "                        {",
        "                            pos = new Vector3((float)(rand.NextDouble() - 0.5),",
        "                                              (float)(rand.NextDouble() - 0.5),",
        "                                              (float)(rand.NextDouble() - 0.5)) * _emitterSize;",
        "                                              ",
        "                            var angX = (float)(rand.NextDouble() * Math.PI*2);    ",
        "                            var angY = (float)(rand.NextDouble() * Math.PI*2);",
        "                            var rot = Matrix.RotationAxis( Vector3.UnitX, angX)",
        "                                * Matrix.RotationAxis( Vector3.UnitY, angY);",
        "                                ",
        "                            pos= Vector3.Transform(Vector3.UnitZ , rot).ToVector3() * _emitterSize;",
        "                            axisA = Vector3.Transform(Vector3.UnitX, rot).ToVector3();",
        "                            axisB = Vector3.Transform(Vector3.UnitY, rot).ToVector3();",
        "                           ",
        "                            emitDirection = pos;",
        "                            emitDirection.Normalize();",
        "                            pos += particleEmitCenter;",
        "                            ",
        "                            ",
        "                        }",
        "                        else",
        "                        {",
        "                            var inc = Math.PI*(3 - Math.Sqrt(5));",
        "                            var off = 2.0f/(_limitPositions + 1.0f);",
        "                            //var y = indexForLimitedPositions*off*EmitterSize.X + EmitterSize.Y - 1 + (off/2);",
        "                            var y = indexForLimitedPositions*off - 1.0f + (off/2.0f);",
        "                            var r = Math.Sqrt(1 - y*y);",
        "                            var Radius = 1;",
        "                            var phi = indexForLimitedPositions*inc;",
        "                            pos += new Vector3((float) (Math.Cos(phi)*r*Radius),",
        "                                            (float) (y*Radius),",
        "                                            (float) (Math.Sin(phi)*r*Radius)) * _emitterSize;",
        "                                            ",
        "                            //axisA = new Vector3((float) (Math.Sin(phi)*r*Radius),",
        "                            //                (float) (y*Radius),",
        "                            //                (float) (Math.Sin(phi)*r*Radius));",
        "                            //axisA.Normalize();",
        "",
        "                            //axisB = new Vector3((float) Math.Sin(y*Math.PI),",
        "                            //                1,",
        "                            //                0);",
        "                            ",
        "                            emitDirection = pos;",
        "                            emitDirection.Normalize();",
        "",
        "                        }",
        "                        break;",
        "                        ",
        "                        ",
        "                    }",
        "                    /*",
        "                    // Ring",
        "                    case 2:",
        "                    {",
        "                        float l1 = i%(int) (Layer.X*Layer.Y);",
        "                        float l2 = i%(int) Layer.Y;",
        "                        float a = (i - l1)/MaxCount;",
        "                        t = new Vector3((float) (Math.Sin(Math.PI*2*a)*(Radius + l1*Stretch.X)),",
        "                                        (l2/Layer.Y - 0.5f)*Stretch.Y,",
        "                                        (float) (Math.Cos(Math.PI*2*a)*(Radius + l1*Stretch.Z)));",
        "                        break;",
        "                    }*/",
        "                }",
        "",
        "                var rotA = Matrix.RotationAxis(axisA, _emitAngleA.X * TO_RAD + ((float)rand.NextDouble() - 0.5f) * _emitAngleA.Y * TO_RAD);",
        "                var rotB = Matrix.RotationAxis(axisB, _emitAngleB.X * TO_RAD + ((float)rand.NextDouble() - 0.5f) * _emitAngleB.Y * TO_RAD);",
        "                var randomRotation = rotA * rotB;",
        "                                ",
        "                emitDirection = Vector3.Transform(emitDirection, randomRotation).ToVector3();",
        "                //emitDirection = Vector3.Transform(emitDirection, rotB).ToVector3();",
        "                ",
        "                _particles[_emitIndex % _maxCount] = new Particle()",
        "                {",
        "                    EmitTime = (float)emitTime,",
        "                    EmitPosition = pos,",
        "                    EmitVelocity = emitDirection * _emitVelocity,",
        "                    EmitSize = 1",
        "                };;",
        "                _emitIndex++;",
        "                emitTime += emitPeriod;",
        "",
        "            }",
        "",
        "            // Set Parameters for shader",
        "            SetScalar(\"Time\", context.Time);",
        "            SetVector(\"Gravity\", _gravity);",
        "            SetVector2(\"Size\", _size);",
        "            SetVector2(\"ShrinkOverTime\", _shrinkOverTime);",
        "            float lifeTime = _lifeTime<=0 ? _maxCount / _emitRate  : _lifeTime;            ",
        "            SetScalar(\"LifeTime\", lifeTime);",
        "            SetVector(\"Stretch\", _stretch);",
        "            SetVector(\"Turbulence\", _turbulence);",
        "            SetScalar(\"VelocityFriction\", _velocityFriction);",
        "            SetScalar(\"Orientation\", _orientation);",
        "            SetColor(\"ColorStart\", _colorStart);",
        "            SetColor(\"ColorEnd\", _colorEnd);",
        "            SetVector4(\"ColorVariation\", _colorVariation);",
        "            SetVector2(\"FadeWithAge\", _fadeWithAge);",
        "            SetVector2(\"FadeTooClose\", _fadeTooClose);",
        "            ",
        "            ",
        "            var noiseTexture = inputs[(int)InputId.NoiseTexture].Eval(context).Image; // Needs to be checked for null!",
        "            //if(noiseTexture != null)",
        "            //    SetResource(\"NoiseTexture\", noiseTexture);",
        "            if(noiseTexture != null) {",
        "                var noiseTextureView = new ShaderResourceView(context.D3DDevice, noiseTexture);",
        "                _effect.GetVariableByName(\"NoiseTexture\").AsShaderResource().SetResource(noiseTextureView);",
        "            }",
        "            ",
        "",
        "            // Instance data buffer",
        "            var streamSize = numInstances * Particle.BLOCK_SIZE;",
        "            if (_instanceDataBuffer == null || _instanceDataBuffer.Description.SizeInBytes != streamSize)",
        "            {",
        "                Utilities.DisposeObj(ref _instanceDataBuffer);",
        "                _instanceDataBuffer = new Buffer(context.D3DDevice, streamSize, ResourceUsage.Dynamic, BindFlags.VertexBuffer,",
        "                                                 CpuAccessFlags.Write, ResourceOptionFlags.None, Particle.BLOCK_SIZE);",
        "            }",
        "",
        "            // Render instances",
        "            DataStream instanceDataStream;",
        "            context.D3DDevice.ImmediateContext.MapSubresource(_instanceDataBuffer, MapMode.WriteDiscard, MapFlags.None, out instanceDataStream);",
        "",
        "            using (instanceDataStream)",
        "            {",
        "                instanceDataStream.Position = 0;",
        "",
        "                for (var i = numInstances -1; i > 0; i--)",
        "                {",
        "",
        "",
        "",
        "                    /*",
        "                                        if (NoiseAmount != 0)",
        "                                        {",
        "                                            _noiseTime = NoiseTime;",
        "                                            _frequency = 1/NoiseScale;",
        "                                            var noiseOffset = new Vector3(getNoise(t.X / Radius - 6.3f), getNoise(t.Y / Radius + 9.3f), getNoise((t.Z - 0.3f)));",
        "                                            t += noiseOffset * NoiseAmount;",
        "                                        }",
        "",
        "                                        float s = Size + (float)rand.NextDouble() * SizeRandom;",
        "                                        var scale = new Vector3(s, s, s);",
        "                    ",
        "                                        //Matrix rotation;",
        "                                        Matrix transform;",
        "                                        Matrix.RotationYawPitchRoll(Rotate.Y * toRad + (float)(rand.NextDouble()) * RotateRandom.Y * toRad,",
        "                                                                    Rotate.X * toRad + (float)(rand.NextDouble()) * RotateRandom.X * toRad,",
        "                                                                    Rotate.Z * toRad + (float)(rand.NextDouble()) * RotateRandom.Z * toRad,",
        "                                                                    out transform);",
        "                    ",
        "                                                                    ",
        "                                        var tScale = Matrix.Scaling( scale.X, scale.Y, scale.Z);",
        "                                        transform= tScale * transform;",
        "                                        var t2= Matrix.Translation(new Vector3(OffsetX + (float)rand.NextDouble() * (OffsetRandomX + Scatter),",
        "                                                                                    OffsetY + (float)rand.NextDouble() * (OffsetRandomY + Scatter),",
        "                                                                                    OffsetZ + (float)rand.NextDouble() * (OffsetRandomZ + Scatter)));",
        "                                        transform = t2*transform;",
        "",
        "                                        if (Orientation == 0)",
        "                                        {",
        "                                            if (t.Length() > 0)",
        "                                            {",
        "                                                var dir = -t;",
        "                                                dir.Normalize();",
        "                                                var helperDir = new Vector3(1, 0, 0);",
        "                                                if (Math.Abs(dir.Y) < 0.1 && Math.Abs(dir.Z) < 0.1)",
        "                                                    helperDir = new Vector3(0, 1, 0);",
        "                                                var yAxis = Vector3.Cross(dir, helperDir);",
        "                                                yAxis.Normalize();",
        "                                                var xAxis = Vector3.Cross(yAxis, dir);",
        "                                                xAxis.Normalize();",
        "                                                var m = Matrix.Identity;",
        "                                                m.Row1 = new Vector4(xAxis, 0);",
        "                                                m.Row2 = new Vector4(yAxis, 0);",
        "                                                m.Row3 = new Vector4(dir, 0);",
        "                                                transform *= m;",
        "                                            }",
        "                                        }",
        "                                        else if (Orientation == 2)",
        "                                        {",
        "                                            //if (Shape == 2)",
        "                                            //{",
        "                                            //    var rotationAroundCenter = Matrix.Identity;",
        "                                            //    Matrix.RotationY((float)(2 * Math.PI * i / Count), out rotationAroundCenter);",
        "                                            //    transform *= rotationAroundCenter;",
        "                                            //}",
        "                                            var cameraToWorld = context.WorldToCamera;",
        "                                            cameraToWorld.Invert();",
        "                                            var newObjectToWorld = context.ObjectTWorld * cameraToWorld;",
        "                                            newObjectToWorld.Row4 = context.ObjectTWorld.Row4;",
        "                                            transform *=    newObjectToWorld;                     ",
        "                        ",
        "                                        }*/",
        "",
        "                    //transform *= Matrix.Transformation(new Vector3(), new Quaternion(), new Vector3(1,1,1), new Vector3(), new Quaternion(), t);",
        "                    //transform *= prevTransform; ",
        "",
        "",
        "                    var p = _particles[i];",
        "                    //var age = context.Time - p.EmitTime;",
        "                    //var position = p.EmitPosition + p.EmitVelocity * age;",
        "                    //var transform = Matrix.Translation(position);",
        "                    //transform *= prevTransform;",
        "",
        "                    p.WriteToDataStream(instanceDataStream);",
        "",
        "                    //instanceDataStream.Write(transform);",
        "                }",
        "            }",
        "            context.D3DDevice.ImmediateContext.UnmapSubresource(_instanceDataBuffer, 0);",
        "",
        "            var prevEffect = context.Effect;",
        "            var prevRenderer = context.Renderer;",
        "            context.Effect = _effect;",
        "            context.Renderer = _renderer;",
        "",
        "            try",
        "            {",
        "                _renderer.SetupEffect(context);",
        "",
        "                if (context.DepthStencilView != null)",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.DepthStencilView, context.RenderTargetView);",
        "                else",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.SetTargets(context.RenderTargetView);",
        "",
        "                if (context.BlendState != null)",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.BlendState = context.BlendState;",
        "",
        "                if (context.DepthStencilState != null)",
        "                    context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = context.DepthStencilState;",
        "",
        "                if (context.RasterizerState != null)",
        "                    context.D3DDevice.ImmediateContext.Rasterizer.State = context.RasterizerState;",
        "",
        "                var technique = _effect.GetTechniqueByIndex(0);",
        "                var pass = technique.GetPassByIndex(0);",
        "",
        "                context.D3DDevice.ImmediateContext.Rasterizer.SetViewport(context.Viewport);",
        "                context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = new InputLayout(context.D3DDevice, pass.Description.Signature, _instanceDataInputElements);",
        "                context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "                context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new[]",
        "                {",
        "                    instancedMesh.Vertices, ",
        "                    _instanceDataBuffer",
        "                },",
        "                new[]",
        "                {",
        "                    VERTEX_ATTRIBUTE_SIZE, ",
        "                    Particle.BLOCK_SIZE",
        "                },",
        "                new[] { 0, 0 });",
        "",
        "                pass.Apply(context.D3DDevice.ImmediateContext);",
        "                context.D3DDevice.ImmediateContext.DrawInstanced(instancedMesh.NumTriangles * 3, numInstances, 0, 0);",
        "",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Replicate2 - An error occured during evaluation: {0}\", exception.Message);",
        "            }",
        "",
        "            context.Effect = prevEffect;",
        "            context.Renderer = prevRenderer;",
        "",
        "            return context;",
        "        }",
        "",
        "",
        "",
        "        private Mesh GetMeshFromSceneInput(OperatorPart sceneInput)",
        "        {",
        "            _meshCollector.Clear();",
        "            sceneInput.TraverseWithFunction(_meshCollector, null);",
        "            var meshSupplier = _meshCollector.CollectedOpPartFunctions.FirstOrDefault();",
        "            if (meshSupplier == null)",
        "            {",
        "                Logger.Error(this, \"Found no mesh supplier, have you forgotten to add an input?\");",
        "                return null;",
        "            }",
        "            var meshes = new List<Mesh>();",
        "            meshSupplier.AddMeshesTo(meshes);",
        "            if (meshes.Count != 1)",
        "            {",
        "                Logger.Error(this, \"Found more or less than 1 mesh\");",
        "                return null;",
        "            }",
        "            var instancedMesh = meshes[0];",
        "",
        "            return instancedMesh;",
        "        }",
        "",
        "        #region Noise functions",
        "",
        "        public float Noise(int x, int seed)",
        "        {",
        "            int n = x + seed * 137;",
        "            n = (n << 13) ^ n;",
        "            return (float)(1.0 - ((n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);",
        "        }",
        "",
        "        public float Lerp(float a, float b, float t)",
        "        {",
        "            return a + t * (b - a);",
        "        }",
        "",
        "        public float Fade(float t)",
        "        {",
        "            return t * t * t * (t * (t * 6 - 15) + 10);",
        "        }",
        "",
        "        public float Interpolate(float a, float b, float t)",
        "        {",
        "            float ft = t * 3.1415927f;",
        "            float f = (float)(1.0 - Math.Cos(ft)) * 0.5f;",
        "            return a * (1.0f - f) + b * f;",
        "        }",
        "",
        "        private float getNoise(float value)",
        "        {",
        "            const int SEED = 0;",
        "            float noiseSum = 0.0f;",
        "            value *= _frequency;",
        "            value += _noiseTime + 10000;",
        "",
        "",
        "            noiseSum = Lerp(Noise((int)value, SEED),",
        "                            Noise((int)value + 1, SEED),",
        "                            Fade(value - (float)Math.Floor(value)));",
        "            return noiseSum;",
        "        }",
        "",
        "        #endregion",
        "",
        "        private const float _frequency = 1;",
        "        private float _noiseTime;",
        "",
        "        private OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier> _meshCollector = new OperatorPart.CollectOpPartFunctionsOfType<Framefield.Core.OperatorPartTraits.IMeshSupplier>();",
        "        private Renderer _renderer;",
        "        private Buffer _instanceDataBuffer;",
        "",
        "        private double _lastTime;",
        "        private bool _firstEval = true;",
        "        private int _emitIndex = 0;",
        "        private Particle[] _particles = new Particle[1];",
        "",
        "",
        "        internal struct Particle",
        "        {",
        "            public float EmitTime;",
        "            public float EmitSize;",
        "            public Vector3 EmitPosition;",
        "            public Vector3 EmitVelocity;",
        "",
        "            public void WriteToDataStream(DataStream instanceDataStream)",
        "            {",
        "                instanceDataStream.Write(EmitTime);",
        "                instanceDataStream.Write(EmitSize);",
        "                instanceDataStream.Write(EmitPosition);",
        "                instanceDataStream.Write(EmitVelocity);",
        "            }",
        "",
        "            public static int BLOCK_SIZE { get { return (1 + 1 + 3 + 3) * 4; } }",
        "        }",
        "",
        "        const int VERTEX_ATTRIBUTE_SIZE = 76;",
        "        const float TO_RAD = (float)(Math.PI / 180.0f);",
        "",
        "        private const int VERTEX_BUFFER_SLOT = 0;",
        "        private const int INSTANCE_BUFFER_SLOT = 1;",
        "",
        "        private readonly InputElement[] _instanceDataInputElements",
        "            = new[]",
        "            {",
        "                // Slot 1 - Vertex buffer",
        "                new InputElement(\"POSITION\", 0, SharpDX.DXGI.Format.R32G32B32A32_Float,  0, VERTEX_BUFFER_SLOT),",
        "                new InputElement(\"NORMAL\",   0, SharpDX.DXGI.Format.R32G32B32_Float,    16, VERTEX_BUFFER_SLOT),",
        "                new InputElement(\"COLOR\",    0, SharpDX.DXGI.Format.R32G32B32A32_Float, 28, VERTEX_BUFFER_SLOT),",
        "                new InputElement(\"TEXCOORD\", 0, SharpDX.DXGI.Format.R32G32_Float,       44, VERTEX_BUFFER_SLOT),",
        "                new InputElement(\"TANGENT\",  0, SharpDX.DXGI.Format.R32G32B32_Float,    52, VERTEX_BUFFER_SLOT),",
        "                new InputElement(\"BINORMAL\", 0, SharpDX.DXGI.Format.R32G32B32_Float,    64, VERTEX_BUFFER_SLOT),",
        "",
        "                // Slot 2 - Instance buffer",
        "                new InputElement(\"EMIT_TIME\",       0, SharpDX.DXGI.Format.R32_Float,       0*4   ,INSTANCE_BUFFER_SLOT, InputClassification.PerInstanceData, 1),",
        "                new InputElement(\"EMIT_SIZE\",       0, SharpDX.DXGI.Format.R32_Float,       1*4   ,INSTANCE_BUFFER_SLOT, InputClassification.PerInstanceData, 1),",
        "                new InputElement(\"EMIT_POSITION\",   0, SharpDX.DXGI.Format.R32G32B32_Float,  2*4  ,INSTANCE_BUFFER_SLOT, InputClassification.PerInstanceData, 1),",
        "                new InputElement(\"EMIT_VELOCITY\",   0, SharpDX.DXGI.Format.R32G32B32_Float,  5*4  ,INSTANCE_BUFFER_SLOT, InputClassification.PerInstanceData, 1),",
        "            };",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e8650c2c-a02c-44ea-8ec6-50f835ed5e96",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ce4333ec-e913-4e94-8f45-052a32fc18da",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e37979ec-4a6b-428b-9c75-1d3c1f6b4e6c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f12a26d8-6d43-4916-b90e-3f77de26c470",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d4acf639-b393-4f39-a027-008a9df0275c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2ea6f281-fb88-4282-9712-a6fd62ba141a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1f63a4a8-e7e0-4fbd-9edc-1a83f1a8b373",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3cf06be5-f87e-42fc-915b-e8e2e129202a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0b2e98b3-a40c-4b8b-816a-97d2f3ec0482",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "14cc7150-0f4a-4677-9da7-ed92b27f95d6",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2a2a716c-ab83-498e-bf6d-6972339ea93d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b685e1b8-581f-42e9-8cd1-f89cf8d3cf75",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2f9d5c38-256b-466d-b057-5302febfee06",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3a8bfe3b-aefc-4d1d-9029-eed348ec2df0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "036a47a1-f57c-47d2-8143-94d4094f0212",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1056b10c-dfcf-45b3-b1c1-1164b11c9f14",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "484ede36-4036-41b8-8295-b1be271e0476",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0049685a-74a7-4464-b51c-4f9cb6269719",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "46cae4f3-f870-4a63-bcc5-19e825f838da",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6b78ea5c-6ba4-4e44-82e8-41768e63ca85",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "267cd1da-6b73-4232-bb76-ba2137537863",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bc51cca6-77d3-4dd1-83ab-3230fc5549d4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "59b2ae76-8611-47c1-92c2-93005faa1f68",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "16a22143-8c56-429b-8e3c-c31879593901",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c36764a6-815b-4275-977e-7c72a83e5278",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "58b3486a-56b8-4d2d-a6e0-12dc5fb9f406",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5d451dec-6ccc-4ec1-8d70-8144d48d8468",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "68717298-77ad-41ad-a74b-98379d3b5ac0",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "825f0e7c-8628-4e7b-9161-36fc27b4d95b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3cec2e93-f4c1-4bb6-91aa-0bf6f55d4b8d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "d5fb334a-6e20-4773-bc71-2fb0902e99c4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e7c31d93-9e8d-441d-abee-5699fd756fcb",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "8206d95a-b0b5-49f9-9979-93fbdf210806",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5ae2f212-1c74-44ec-9067-f34f3382dff9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "cc4f04cb-ab3c-4276-81af-fdd0e315330e",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "25c08965-9a31-4dea-b237-4cfcf5609805",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9bc523fa-8807-4c0c-b7f3-f872ce67050b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "788deaea-1a79-42e8-8f67-d7d6e0fcffa5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7b0ff1e5-85f7-4c3b-a4d7-4d883da76f36",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e4188dc3-d56a-410e-8528-a2e5be18eb03",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a080b46d-2b6a-4c3e-a94d-da3d6806e79a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "21082021-7263-41f7-9a87-be385b880437",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f59243ef-b816-4d31-ac70-e8464226f6e9",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f1cb1b6c-ce4b-4bbc-a1d9-bce545a190cc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "529c7500-8133-4731-a053-a99a12ee2d9c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "72727fce-7e23-47bc-94f5-b4434a74be98",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9376fbea-1980-42aa-86ba-ec7dd40f056c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "9fb4f322-78c1-45a0-b2df-d263cb5d09de",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "898034c8-1c67-49ef-b822-cbd28b5cac13",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e16a9cb7-6d5a-480e-b0ea-710a88f53957",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5de58620-4a79-42f0-8528-bb219adc28f2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b9e5a47b-4f80-4ea8-acc3-95bb81364b80",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "3a099811-ff2f-4417-b6d3-ac39a36a5a49",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "863edb6e-616c-4869-99fd-707630890e50",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "52156456-0ef1-47ce-b8f5-be840fee3c4c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f1fe0198-91e4-4a17-9337-fab17377e199",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bbebbcd5-0cd3-4c31-bbbc-07646fd4d13f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "0d3dd1dc-2e21-4b2f-a375-798e4c1f12c1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "84cbcddf-40f4-4494-8558-ca2a7b1116e1",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "e4eda612-2f77-4bce-bee1-634fbd4d07bf",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "53e6a3da-b3de-41f4-a9db-d41eb82c8956",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6301552c-cbfb-461a-8f1f-3f7ab36c36d2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "870c3430-89cb-4dd7-b31e-80d853fd14d6"
    }
  ]
}