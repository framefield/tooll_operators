{
  "Name": "BendMesh",
  "_id": "9dc66647-d05e-41bc-a11d-0fe9ce2a9910",
  "Namespace": "lib.mesh.modify",
  "Description": "Bends a geomentry around an axis. This is a implementation op. Please use [BendGeometry] that comes with a handy gizmo.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "96cd6d6e-ffc4-4140-af87-ee92a46441a2",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _parameters\r",
          "float3 Center;",
          "float StartAngle;",
          "float BendAngle;",
          "float SpiralEffect;",
          "float NeutralRadius;",
          "float2 Rotate;",
          "float BendAxis;",
          "//<<< _parameters\r",
          "float3 Orientation;\r",
          "float AngleEnd;\r",
          "float3 Axis;\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "\r",
          "float Lerp(float a, float b, float t)\r",
          "{\r",
          "    return a + t*(b - a);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "float _noiseTime=0;\r",
          "float _frequency=0;\r",
          "\r",
          "Matrix RotationMatrix(float3 axis, float angle)\r",
          "{\r",
          "    axis = normalize(axis);\r",
          "    float s = sin(angle);\r",
          "    float c = cos(angle);\r",
          "    float oc = 1.0 - c;\r",
          "    \r",
          "    return Matrix(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\r",
          "                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\r",
          "                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\r",
          "                0.0,                                0.0,                                0.0,                                1.0);\r",
          "}\r",
          "\r",
          "float PointToLineDistance( float3 P, float3 lp0, float3 lp1)\r",
          "{\r",
          "     float3 v = lp1 - lp0;\r",
          "     float3 w = P - lp0;\r",
          "\r",
          "     float c1 = dot(w,v);\r",
          "     float c2 = dot(v,v);\r",
          "     float b = c1 / c2;\r",
          "\r",
          "     float3 Pb = lp0 + b * v;\r",
          "     return length(P - Pb);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "\r",
          "[maxvertexcount(3)]\r",
          "void GeometryMain(triangle Vertex input[3], inout TriangleStream<Vertex> outputStream)\r",
          "{\r",
          "    \r",
          "    // For a point P, and a normalized vector V, the point closest to P along V is \r",
          "    // P' = V * dot( P, V ) \r",
          "\r",
          "    for (int i = 0; i < 3; i++)\r",
          "\t{\r",
          "\t\t\r",
          "        Vertex vertex = input[i];\r",
          "        float3 p = vertex.pos.xyz;\r",
          "                \r",
          "        float dRadius = PointToLineDistance( p, Center, Center + Axis) / NeutralRadius;\r",
          "        float distanceToNeutral = dot((Center - p),  Orientation);\r",
          "\r",
          "        //vertex.col.r = 0.5 + distanceToNeutral + (Center-p);\r",
          "                \r",
          "        float angle = -distanceToNeutral / NeutralRadius;\r",
          "        float angleClamped=  clamp(angle, StartAngle,  AngleEnd + StartAngle + StartAngle );\r",
          "        float restAngle = angleClamped;\r",
          "                \r",
          "        float3 rest = Orientation*(restAngle - angle) * NeutralRadius ;\r",
          "\r",
          "        Matrix mRotate = RotationMatrix( Axis, angleClamped);\r",
          "        float3 pp = (p + distanceToNeutral * Orientation - Center) * (angle*SpiralEffect+1) - rest;\r",
          "        p = mul(mRotate, float4(pp,1)).xyz; \r",
          "        p+=Center;\r",
          "\r",
          "        vertex.pos.xyz = p.xyz;        \r",
          "        vertex.normal = mul(mRotate, float4(vertex.normal,1)).xyz;\r",
          "        \r",
          "        outputStream.Append(vertex);\r",
          "    }\r",
          "    \r",
          "    outputStream.RestartStrip();\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"POSITION; NORMAL.xyz; COLOR; TEXCOORD0.xy; TANGENT0.xyz; BINORMAL0.xyz\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Mesh",
      "MetaInstanceID": "942193f0-ecd5-4432-b555-67e4262b7b1b",
      "DefaultValue": {
        "Type": "Mesh",
        "Value": "Framefield.Core.MeshValue"
      },
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.X",
      "MetaInstanceID": "041cdd66-4abf-4d32-a34b-b0aff943c11d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Y",
      "MetaInstanceID": "b04bee52-ab4e-4b59-a9a2-7f80daf1fed7",
      "DefaultValue": {
        "Type": "Float",
        "Value": "5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Center.Z",
      "MetaInstanceID": "4aaa2dcc-d96f-48fb-833f-2b8b51cacd90",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NeutralRadius",
      "MetaInstanceID": "2688c4a4-f07e-4656-8728-bb3e2b9181be",
      "DefaultValue": {
        "Type": "Float",
        "Value": "5"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "StartAngle",
      "MetaInstanceID": "08b4bba1-7056-46b4-9ad3-c8c9fb229a4d",
      "DefaultValue": {
        "Type": "Float",
        "Value": "-90"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BendAngle",
      "MetaInstanceID": "7d46934d-bcdf-4bfe-bc6f-94a4c5c71fd4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "180"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "10000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "SpiralEffect",
      "MetaInstanceID": "103c4fb6-0caa-466a-8261-5c82a483ac60",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate.Direction",
      "MetaInstanceID": "7e24cc9a-dbca-4c19-ab32-086c8fbc2806",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Rotate.Tilt",
      "MetaInstanceID": "2c35214a-88f5-4173-899f-c1257b8c3d94",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "BendAxis",
      "MetaInstanceID": "52703fde-25af-4a70-bcc6-b4fe299f46b4",
      "DefaultValue": {
        "Type": "Float",
        "Value": "2"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-10000",
      "Max": "10000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": [
        {
          "Name": "X",
          "Value": "0"
        },
        {
          "Name": "Y",
          "Value": "1"
        },
        {
          "Name": "Z",
          "Value": "2"
        }
      ]
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "d5761b37-aa3e-4190-920a-5151ff150728",
      "MetaID": "cc257632-61ce-4950-acf1-8a25fa3e2206"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "b08db2af-c93f-4c68-b6c8-a31f35abb53a",
      "MetaID": "fd47e720-f408-4aef-afc8-9f66edc540b4",
      "Name": "BendMeshFunc",
      "Version": "de744f64-3588-4bd8-aecc-a8ef638a5549",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "using SharpDX.Direct3D;",
        "",
        "namespace Framefield.Core.IDfd47e720_f408_4aef_afc8_9f66edc540b4",
        "{",
        "    public class Class_BendMesh : FXSourceCodeFunction, IFXSceneSourceCode",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            CenterX = 1,",
        "            CenterY = 2,",
        "            CenterZ = 3,",
        "            StartAngle = 4,",
        "            BendAngle = 5,",
        "            SpiralEffect = 6,",
        "            NeutralRadius = 7,",
        "            RotateDirection = 8,",
        "            RotateTilt = 9,",
        "            Mesh = 10,",
        "            BendAxis = 11",
        "        }",
        "        //<<< _inputids",
        "",
        "        public Class_BendMesh()",
        "        {",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "                context.Mesh = _mesh;",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval)",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            if (!Changed && _mesh.Vertices != null)",
        "                return;",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var CenterX = inputs[(int)InputId.CenterX].Eval(context).Value;",
        "            var CenterY = inputs[(int)InputId.CenterY].Eval(context).Value;",
        "            var CenterZ = inputs[(int)InputId.CenterZ].Eval(context).Value;",
        "            var Center = new Vector3(CenterX, CenterY, CenterZ);",
        "            var StartAngle = inputs[(int)InputId.StartAngle].Eval(context).Value;",
        "            var BendAngle = inputs[(int)InputId.BendAngle].Eval(context).Value;",
        "            var SpiralEffect = inputs[(int)InputId.SpiralEffect].Eval(context).Value;",
        "            var NeutralRadius = inputs[(int)InputId.NeutralRadius].Eval(context).Value;",
        "            var RotateDirection = inputs[(int)InputId.RotateDirection].Eval(context).Value;",
        "            var RotateTilt = inputs[(int)InputId.RotateTilt].Eval(context).Value;",
        "            var Rotate = new Vector2(RotateDirection, RotateTilt);",
        "            var Mesh = inputs[(int)InputId.Mesh].Eval(context).Mesh;",
        "            var BendAxis = (int) inputs[(int)InputId.BendAxis].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            ",
        "            //Logger.Info(this, \"collect meshes\");",
        "//            Scene.Func.Changed = false;",
        "",
        "            if (Mesh == null)",
        "                return;",
        "",
        "            _mesh.AttributesSize = Mesh.AttributesSize;",
        "            _mesh.NumTriangles = Mesh.NumTriangles;",
        "            _mesh.InputElements = Mesh.InputElements;",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != Mesh.Vertices.Description.SizeInBytes)",
        "            {",
        "                if (_mesh.Vertices != null)",
        "                    _mesh.Vertices.Dispose();",
        "",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                    {",
        "                                                                        BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                        CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                        OptionFlags = ResourceOptionFlags.None,",
        "                                                                        SizeInBytes = _mesh.NumTriangles*Mesh.AttributesSize*3,",
        "                                                                        Usage = ResourceUsage.Default",
        "                                                                    });",
        "            }",
        "            ",
        "            Vector3 Axis, Orientation, RotateAxis, TiltAxis;",
        "            if(BendAxis < 0.5f) {",
        "                Axis = new Vector3(1,0,0);",
        "                Orientation = new Vector3(0,0,-1);",
        "                RotateAxis = new Vector3(0,1,0);",
        "                TiltAxis = new Vector3(1,0,0);",
        "            }",
        "            else if (BendAxis < 1.5f) {",
        "                Axis = new Vector3(0,1,0);            ",
        "                Orientation = new Vector3(1,0,0);",
        "                RotateAxis = new Vector3(0,0,1);",
        "                TiltAxis = new Vector3(0,1,0);",
        "            }",
        "            else {",
        "                Axis = new Vector3(0,0,1);            ",
        "                Orientation = new Vector3(1,0,0);",
        "                RotateAxis = new Vector3(0,1,0);",
        "                TiltAxis = new Vector3(1,0,0);",
        "            }",
        "",
        "            var toRad =  3.141578f /  180f;",
        "",
        "            var mRotate =  Matrix.Identity;",
        "            Matrix.RotationAxis( ref RotateAxis, RotateDirection * toRad, out mRotate);",
        "            ",
        "            var mTilt =  Matrix.Identity;",
        "            Matrix.RotationAxis( ref TiltAxis, RotateTilt * toRad, out mTilt);",
        "            mRotate*= mTilt;",
        "            ",
        "            var rotatedOrientation  = Vector3.Transform( Orientation, mRotate);",
        "            var rotatedAxis = Vector3.Transform( Axis, mRotate);",
        "            ",
        "            SetVector(\"Orientation\", Vector3.Normalize( new Vector3( rotatedOrientation.X , rotatedOrientation.Y, rotatedOrientation.Z)));",
        "            SetVector(\"Axis\",       Vector3.Normalize( new Vector3( rotatedAxis.X, rotatedAxis.Y, rotatedAxis.Z)));",
        "            ",
        "            SetVector(\"Center\", Center);",
        "            SetScalar(\"StartAngle\", StartAngle * toRad);",
        "            SetScalar(\"AngleEnd\", ( BendAngle - StartAngle) * toRad);",
        "            SetScalar(\"SpiralEffect\", SpiralEffect);",
        "            SetScalar(\"NeutralRadius\", NeutralRadius);",
        "            ",
        "            SetVector2(\"Rotate\", Rotate);",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, 0) });",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(Mesh.Vertices, Mesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw(_mesh.NumTriangles*3, 0);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "    }",
        "}",
        "    ",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "96cd6d6e-ffc4-4140-af87-ee92a46441a2",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b08db2af-c93f-4c68-b6c8-a31f35abb53a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "041cdd66-4abf-4d32-a34b-b0aff943c11d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b08db2af-c93f-4c68-b6c8-a31f35abb53a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b04bee52-ab4e-4b59-a9a2-7f80daf1fed7",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b08db2af-c93f-4c68-b6c8-a31f35abb53a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "4aaa2dcc-d96f-48fb-833f-2b8b51cacd90",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b08db2af-c93f-4c68-b6c8-a31f35abb53a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "08b4bba1-7056-46b4-9ad3-c8c9fb229a4d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b08db2af-c93f-4c68-b6c8-a31f35abb53a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7d46934d-bcdf-4bfe-bc6f-94a4c5c71fd4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b08db2af-c93f-4c68-b6c8-a31f35abb53a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "103c4fb6-0caa-466a-8261-5c82a483ac60",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b08db2af-c93f-4c68-b6c8-a31f35abb53a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2688c4a4-f07e-4656-8728-bb3e2b9181be",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b08db2af-c93f-4c68-b6c8-a31f35abb53a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7e24cc9a-dbca-4c19-ab32-086c8fbc2806",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b08db2af-c93f-4c68-b6c8-a31f35abb53a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "2c35214a-88f5-4173-899f-c1257b8c3d94",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b08db2af-c93f-4c68-b6c8-a31f35abb53a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "942193f0-ecd5-4432-b555-67e4262b7b1b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b08db2af-c93f-4c68-b6c8-a31f35abb53a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "52703fde-25af-4a70-bcc6-b4fe299f46b4",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b08db2af-c93f-4c68-b6c8-a31f35abb53a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b08db2af-c93f-4c68-b6c8-a31f35abb53a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "d5761b37-aa3e-4190-920a-5151ff150728"
    }
  ]
}