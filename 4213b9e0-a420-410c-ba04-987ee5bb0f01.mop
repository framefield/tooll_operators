{
  "Name": "KeyPressed",
  "_id": "4213b9e0-a420-410c-ba04-987ee5bb0f01",
  "Namespace": "lib.io",
  "Description": "Returns 1 if a specific key is pressing otherwise 0.\r\nSome examples for key-codes:\r\n1,2,3,A,B,C\r\nRight, Left, Up, Down\r\nEnter,Escape\r\nControlKey,ShiftKey\r\nBack,Space\r\n\r\nNOTE: This operator use to be called [KeyInput] but has been renamed.\r\n",
  "Inputs": [
    {
      "Name": "Key",
      "MetaInstanceID": "40db378e-7d9a-41f5-993d-40c40b92ba6b",
      "DefaultValue": {
        "Type": "Text",
        "Value": "1"
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Output",
      "MetaInstanceID": "4281050b-cd37-43eb-9590-4e79554a4b8c",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "6532f698-8bcc-4a38-87c4-1613ecfa1d58",
      "MetaID": "30208404-fe00-4501-ab13-dd00dfeb0fd3",
      "Name": "KeyPressedFunc",
      "Version": "af893c58-60b3-4bca-9637-0ef07fc2ea21",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using System.Windows.Forms;",
        "using Framefield.Core.Inputs;",
        "",
        "",
        "namespace Framefield.Core.ID30208404_fe00_4501_ab13_dd00dfeb0fd3",
        "{",
        "    public class Class_KeyPressed : OperatorPart.Function, Framefield.Core.OperatorPartTraits.IAsyncDependend",
        "    {",
        "        public bool AsyncChanged { get { return _asyncChanged; } }",
        "",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Key = 0",
        "        }",
        "        //<<< _inputids ",
        "",
        "        public Class_KeyPressed()",
        "        {",
        "            Input.Keyboard.KeyPressedEvent += HandleKeyboardKeyPressedEvent;",
        "            Input.Keyboard.KeyReleasedEvent += HandleKeyboardKeyReleasedEvent;",
        "        }",
        "",
        "        public override void Dispose()",
        "        {",
        "            Input.Keyboard.KeyPressedEvent -= HandleKeyboardKeyPressedEvent;",
        "            Input.Keyboard.KeyReleasedEvent -= HandleKeyboardKeyReleasedEvent;",
        "        }",
        "",
        "        void HandleKeyboardKeyPressedEvent(object o, KeyboardInput.KeyEventArgs e)",
        "        {",
        "            if (e.Keys == _key)",
        "            {",
        "                _asyncChanged = true;",
        "            }",
        "        }",
        "        void HandleKeyboardKeyReleasedEvent(object o, KeyboardInput.KeyEventArgs e)",
        "        {",
        "            if (e.Keys == _key)",
        "            {",
        "                _asyncChanged = true;",
        "            }",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            //>>> _params",
        "            var Key = inputs[(int)InputId.Key].Eval(context).Text;",
        "            //<<< _params",
        "",
        "            try",
        "            {",
        "                _key = (Keys)_keysConverter.ConvertFromString(Key);",
        "            }",
        "            catch (Exception) {",
        "            }",
        "",
        "            context.Value = Input.Keyboard.IsKeyDown(_key) ? 1 : 0;",
        "            _asyncChanged = false;",
        "            return context;",
        "        }",
        "",
        "        bool _asyncChanged = false;",
        "        KeysConverter _keysConverter = new KeysConverter();",
        "        Keys _key;",
        "    }",
        "",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "40db378e-7d9a-41f5-993d-40c40b92ba6b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "6532f698-8bcc-4a38-87c4-1613ecfa1d58"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "6532f698-8bcc-4a38-87c4-1613ecfa1d58",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "4281050b-cd37-43eb-9590-4e79554a4b8c"
    }
  ]
}