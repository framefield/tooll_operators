{
  "Name": "ParallaxMapper",
  "_id": "9d707d7d-2620-43b2-b2a3-dc287623ff7e",
  "Namespace": "lib.geometry.material",
  "Description": "",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "189f1342-bb1e-4a21-86ba-3b583bcb7862",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "#define NUM_MAX_LIGHTS 2\r",
          "\r",
          "float4x4 objectToWorldMatrix;\r",
          "float4x4 worldToCameraMatrix;\r",
          "float4x4 cameraToObjectMatrix; // modelview inverse\r",
          "float4x4 projMatrix;\r",
          "float4x4 textureMatrix;\r",
          "\r",
          "\r",
          "struct PointLight\r",
          "{\r",
          "    float4 position;\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float4 attenuation;\r",
          "};\r",
          "\r",
          "struct SpotLight\r",
          "{\r",
          "    float4 ambient;\r",
          "    float4 diffuse;\r",
          "    float4 specular;\r",
          "    float constantAttenuation;\r",
          "    float linearAttenuation;\r",
          "    float quadraticAttenuation;\r",
          "    float spotCutoff;\r",
          "    float spotCosCutoff;\r",
          "    float spotExponent;\r",
          "};\r",
          "\r",
          "cbuffer FogSettings\r",
          "{\r",
          "    float4 fogColor;\r",
          "    float fogStart;\r",
          "    float fogEnd;\r",
          "    float fogScale;\r",
          "}\r",
          "\r",
          "cbuffer MaterialBuffer\r",
          "{\r",
          "    float4 materialAmbient;\r",
          "    float4 materialDiffuse;\r",
          "    float4 materialSpecular;\r",
          "    float4 materialEmission;\r",
          "    float materialShininess;\r",
          "};\r",
          "\r",
          "\r",
          "cbuffer PointLightsBuffer\r",
          "{\r",
          "    int numPointLights;\r",
          "    PointLight pointLights[3];\r",
          "};\r",
          "\r",
          "\r",
          "Texture2D txDiffuse;\r",
          "Texture2D txNormalMap;\r",
          "Texture2D heightMap;\r",
          "TextureCube irradiance;\r",
          "float parallaxScale;\r",
          "\r",
          "\r",
          "SamplerState samLinear\r",
          "{\r",
          "    Filter = MIN_MAG_MIP_LINEAR;\r",
          "    AddressU = Wrap;\r",
          "    AddressV = Wrap;\r",
          "};\r",
          "\r",
          "\r",
          "struct VS_IN\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "struct PS_IN\r",
          "{\r",
          "    float4 pos : SV_POSITION;\r",
          "    float4 objectTFragPosition : POSITION0;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float4 vertexColor : COLOR;\r",
          "    float3 tbnTLightPosition0 : HALLO;\r",
          "    float3 tbnTLightPosition1 : HALLO1;\r",
          "    float3 tbnTLightPosition2 : HALLO2;\r",
          "    float3 tbnTCameraPosition : GALLO;\r",
          "    float fogFragCoord : FALLO;\r",
          "    float3x3 rotTbnToObject : MATRIX01;\r",
          "};\r",
          "\r",
          "\r",
          "float mod(float a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "float3 mod(float3 a, float b)\r",
          "{\r",
          "    return a - b*floor(a/b);\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "//>>>> VS2\r",
          "PS_IN VS( VS_IN input )",
          "{",
          "    PS_IN output = (PS_IN)0;",
          "",
          "    output.pos = mul(input.pos, objectToWorldMatrix);",
          "    output.pos = mul(output.pos, worldToCameraMatrix);",
          "    output.fogFragCoord = abs(output.pos.z / input.pos.w);",
          "    output.pos = mul(output.pos, projMatrix);",
          "    output.texCoord = mul(float4(input.texCoord, 0, 1), textureMatrix).xy;",
          "",
          "    float3x3 rotTbnToObject = float3x3(input.tangent, input.binormal, input.normal);",
          "    float3x3 rotObjectToTbn = transpose(rotTbnToObject);",
          "",
          "    for (int lightIdx = 0; lightIdx < numPointLights; ++lightIdx)",
          "    {",
          "        float4 camTlightPos = mul(pointLights[lightIdx].position, worldToCameraMatrix);",
          "        float4 lightPosInObject = mul(camTlightPos, cameraToObjectMatrix);",
          "        float3 lightPosInObject2 = (lightPosInObject - input.pos).xyz;",
          "",
          "        if (lightIdx == 0)",
          "            output.tbnTLightPosition0 = mul(lightPosInObject2, rotObjectToTbn);",
          "        else if (lightIdx == 1)",
          "            output.tbnTLightPosition1 = mul(lightPosInObject2, rotObjectToTbn);",
          "        else ",
          "            output.tbnTLightPosition2 = mul(lightPosInObject2, rotObjectToTbn);",
          "        //    output.tbnTLightDir[lightIddx] = tbnTobj * objTview * gl_LightSource[0].spotDirection;\\n\"",
          "    }",
          "    output.tbnTCameraPosition = mul(cameraToObjectMatrix[3].xyz - input.pos, rotObjectToTbn);",
          "    output.vertexColor = input.col;",
          "    output.objectTFragPosition = input.pos;",
          "    output.rotTbnToObject = rotTbnToObject;",
          "    return output;",
          "}",
          "//<<< VS\r",
          "\r",
          "float4 calcLightSource(float3 tbnTLightPosition, float3 tbnTLightDir, int lightIdx, float3 cameraVector, float3 norm, float4 baseColor)\r",
          "{\r",
          "    float dist = length(tbnTLightPosition);\r",
          "    float3 lightVector = normalize(tbnTLightPosition);\r",
          "    float nxDir = max(0.0, dot(norm, lightVector));\r",
          "    float4 diffuse = pointLights[lightIdx].diffuse * nxDir;\r",
          "    float specularPower = 0.0;\r",
          "    if (nxDir > 0.0)\r",
          "    {\r",
          "        float3 halfVector = normalize(lightVector + cameraVector);\r",
          "        float nxHalf = max(0.0, dot(norm, halfVector));\r",
          "        specularPower = pow(nxHalf, materialShininess);\r",
          "    }\r",
          "    float attenuation = 1.0 / (pointLights[lightIdx].attenuation.x +\r",
          "                               pointLights[lightIdx].attenuation.y * dist +\r",
          "                               pointLights[lightIdx].attenuation.z * dist * dist);\r",
          "\r",
          "/*\r",
          "    if (gl_LightSource[lightIdx].spotCutoff != 180.0)\r",
          "    {\r",
          "        float spotDot = dot(-lightVector, normalize(tbnTLightDir));\r",
          "        float spotAttenuation = 0.0;\r",
          "        if (spotDot > gl_LightSource[lightIdx].spotCosCutoff)\r",
          "            spotAttenuation = pow(spotDot, gl_LightSource[lightIdx].spotExponent);\r",
          "        attenuation *= spotAttenuation;\r",
          "    }\r",
          "*/\r",
          "\r",
          "    float4 color = materialAmbient * pointLights[lightIdx].ambient * attenuation +\r",
          "                   materialDiffuse * (diffuse * baseColor * attenuation) +\r",
          "                   materialSpecular * pointLights[lightIdx].specular * specularPower * attenuation;\r",
          "\r",
          "    return color;\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "//>>>> PS\r",
          "float4 PS( PS_IN input ) : SV_Target\r",
          "{\r",
          "    float3 cameraVector = normalize(input.tbnTCameraPosition);\r",
          "    //float parallaxScale = 0.03;\r",
          "    float height = heightMap.Sample(samLinear, input.texCoord).r;\r",
          "    float2 height2 = float2(height, height) * parallaxScale - parallaxScale*0.5;\r",
          "\r",
          "    float2 newTexCoords = input.texCoord + (cameraVector.xy * height2);\r",
          "    float3 norm = txNormalMap.Sample(samLinear, newTexCoords).rgb * 2.0 - 1.0;\r",
          "\r",
          "    float3  normalInWorld = mul(mul(norm, input.rotTbnToObject), (float3x3)objectToWorldMatrix); \r",
          "    normalInWorld = normalize(normalInWorld);\r",
          "    float4 baseColor = txDiffuse.Sample(samLinear, newTexCoords);\r",
          "    //baseColor *= irradiance.Sample(samLinear, normalInWorld);\r",
          "    \r",
          "    float4 color = baseColor;\r",
          "\r",
          "    if (numPointLights > 0)\r",
          "        color = calcLightSource(input.tbnTLightPosition0, float3(0, 0, 0), 0, cameraVector, norm, baseColor);\r",
          "    if (numPointLights > 1)\r",
          "        color += calcLightSource(input.tbnTLightPosition1, float3(0, 0, 0), 1, cameraVector, norm, baseColor);\r",
          "    if (numPointLights > 2)\r",
          "        color += calcLightSource(input.tbnTLightPosition2, float3(0, 0, 0), 2, cameraVector, norm, baseColor);\r",
          "    \r",
          "\r",
          "    color += materialEmission*baseColor;\r",
          "    color += materialAmbient*float4(0.2, 0.2, 0.2, 1.0); //last value is default of gl_LightModelAmbient;\r",
          "\r",
          "    //if (vertexColorIntensity > 0.0)\r",
          "    //  color.rgb *= vertexColorIntensity*vertexColor.rgb;\r",
          "\r",
          "    float fog = (fogEnd - input.fogFragCoord) * fogScale;\r",
          "    fog = clamp(fog, 0.0, 1.0);\r",
          "    return float4(lerp(fogColor.rgb, color.rgb, fog), materialDiffuse.a * baseColor.a);\r",
          "}\r",
          "//<<< PS\r",
          "\r",
          "technique10 Render\r",
          "{\r",
          "    pass P0\r",
          "    {\r",
          "        SetGeometryShader( 0 );\r",
          "        SetVertexShader( CompileShader( vs_4_0, VS() ) );\r",
          "        SetPixelShader( CompileShader( ps_4_0, PS() ) );\r",
          "    }\r",
          "} "
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scene",
      "MetaInstanceID": "bc250430-e7a3-40ea-ab98-b95f8ab38558",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Image",
      "MetaInstanceID": "1fa5eb66-1099-41d2-9b4a-9b8ace3f81f5",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "NormalMap",
      "MetaInstanceID": "7f168e5d-e6c9-468c-b639-756415ee184d",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Irradiance",
      "MetaInstanceID": "5b194825-4454-4687-b0a0-ad04f67c94dc",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "HeightMap",
      "MetaInstanceID": "c7bfd421-a561-4686-aeb1-d4e256e2f56b",
      "DefaultValue": {
        "Type": "Image",
        "Value": "Framefield.Core.Image"
      },
      "MetaID": "9848060d-fd84-45b0-b658-d0d531c61dab",
      "IsMultiInput": "False",
      "Relevance": "Relevant",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "ParallaxScale",
      "MetaInstanceID": "53b540a1-d1ee-4bf5-a7c6-930f324044ca",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0.1"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "0",
      "Max": "5",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "9ea85c6f-1239-4429-aaaf-7c28d680f095",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "7bec922c-3af2-4313-b0b8-5fbf8825a81a",
      "MetaID": "7546dabe-f6cd-4e84-9e7c-dcc13f73e24c",
      "Name": "ParallaxMapperFunc",
      "Version": "517a8e4c-d35a-4d92-beea-e1c66ea1843d",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "using System;",
        "using System.Collections.Generic;",
        "using SharpDX.Direct3D11;",
        "using Framefield.Core.Rendering;",
        "",
        "namespace Framefield.Core.ID7546dabe_f6cd_4e84_9e7c_dcc13f73e24c",
        "{",
        "    public class Class_ParallaxMapper : FXSourceCodeFunction, IFXSceneSourceCode",
        "    {",
        "        #region Renderer",
        "        public class Renderer : BaseRenderer",
        "        {",
        "            public override void Dispose() {",
        "                Utilities.DisposeObj(ref _normalMap);",
        "                Utilities.DisposeObj(ref _heightMap);",
        "                Utilities.DisposeObj(ref _irradiance);",
        "                base.Dispose();",
        "            }",
        "",
        "            public ShaderResourceView NormalMap",
        "            {",
        "                set {",
        "                    Utilities.DisposeObj(ref _normalMap);",
        "                    _normalMap = value;",
        "                }",
        "            }",
        "",
        "            public ShaderResourceView HeightMap",
        "            {",
        "                set {",
        "                    Utilities.DisposeObj(ref _heightMap);",
        "                    _heightMap = value;",
        "                }",
        "            }",
        "",
        "            public ShaderResourceView Irradiance",
        "            {",
        "                set",
        "                {",
        "                    Utilities.DisposeObj(ref _irradiance);",
        "                    _irradiance = value;",
        "                }",
        "            }",
        "            ",
        "            public float ParallaxScale",
        "            {",
        "                set { _parallaxScale = value; }",
        "            }",
        "",
        "            public override void SetupEffect(OperatorPartContext context) {",
        "                base.SetupEffect(context);",
        "                var resourceVariable = context.Effect.GetVariableByName(\"txNormalMap\").AsShaderResource();",
        "                resourceVariable.SetResource(_normalMap);",
        "                resourceVariable = context.Effect.GetVariableByName(\"heightMap\").AsShaderResource();",
        "                resourceVariable.SetResource(_heightMap);",
        "                resourceVariable = context.Effect.GetVariableByName(\"irradiance\").AsShaderResource();",
        "                resourceVariable.SetResource(_irradiance);",
        "                var scalarVariable = context.Effect.GetVariableByName(\"parallaxScale\").AsScalar();",
        "                scalarVariable.Set(_parallaxScale);",
        "",
        "                try",
        "                {",
        "                    SetupMaterialConstBuffer(context);",
        "                    SetupFogSettingsConstBuffer(context);",
        "                    SetupPointLightsConstBuffer(context);",
        "                }",
        "                catch (Exception e) {",
        "                    Logger.Error(ParentFunc, \"Error building constant buffer: {0} - Source: {1}\", e.Message, e.Source);",
        "                }",
        "            }",
        "",
        "            private ShaderResourceView _normalMap;",
        "            private ShaderResourceView _heightMap;",
        "            private ShaderResourceView _irradiance;",
        "            private float _parallaxScale;",
        "            public OperatorPart.Function ParentFunc {get;set;}",
        "        }",
        "        #endregion",
        "",
        "        public Class_ParallaxMapper() {",
        "            _renderer = new Renderer(){ParentFunc = this};",
        "        }",
        "",
        "        public override void Dispose() {",
        "            Utilities.DisposeObj(ref _renderer);",
        "            Utilities.DisposeObj(ref _image);",
        "            base.Dispose();",
        "        }",
        "",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scene = 1,",
        "            Image = 2,",
        "            NormalMap = 3,",
        "            Irradiance = 4,",
        "            HeightMap = 5,",
        "            ParallaxScale = 6",
        "        }",
        "        //<<< _inputids",
        "",
        "        bool _firstEval = true;",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            if (_firstEval) {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "            var Scene = inputs[1];",
        "            if (Changed) ",
        "            {",
        "                Utilities.DisposeObj(ref _image);",
        "                var image = inputs[2].Eval(context).Image;",
        "                if (image != null)",
        "                    _image = new ShaderResourceView(context.D3DDevice, image);",
        "",
        "                var normalMap = inputs[3].Eval(context).Image;",
        "                if (normalMap != null)",
        "                    _renderer.NormalMap = new ShaderResourceView(context.D3DDevice, normalMap);",
        "",
        "                var irradiance = inputs[(int)InputId.Irradiance].Eval(context).Image;",
        "                if (irradiance != null)",
        "                    _renderer.Irradiance= new ShaderResourceView(context.D3DDevice, irradiance);",
        "",
        "                var heightMap = inputs[(int)InputId.HeightMap].Eval(context).Image;",
        "                if (heightMap != null)",
        "                    _renderer.HeightMap = new ShaderResourceView(context.D3DDevice, heightMap);",
        "",
        "                _renderer.ParallaxScale = inputs[(int)InputId.ParallaxScale].Eval(context).Value;",
        "",
        "                Changed = false;",
        "            }",
        "",
        "            var D3DDevice = context.D3DDevice;",
        "",
        "            using (new PropertyStasher<OperatorPartContext>(context, \"Effect\", \"Renderer\", \"Texture0\")) {",
        "                context.Effect = _effect;",
        "                context.Renderer = _renderer;",
        "                context.Texture0 = _image;",
        "                Scene.Eval(context);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        Renderer _renderer;",
        "        ShaderResourceView _image;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7bec922c-3af2-4313-b0b8-5fbf8825a81a",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "9ea85c6f-1239-4429-aaaf-7c28d680f095"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "189f1342-bb1e-4a21-86ba-3b583bcb7862",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7bec922c-3af2-4313-b0b8-5fbf8825a81a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bc250430-e7a3-40ea-ab98-b95f8ab38558",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7bec922c-3af2-4313-b0b8-5fbf8825a81a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "1fa5eb66-1099-41d2-9b4a-9b8ace3f81f5",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7bec922c-3af2-4313-b0b8-5fbf8825a81a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "7f168e5d-e6c9-468c-b639-756415ee184d",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7bec922c-3af2-4313-b0b8-5fbf8825a81a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5b194825-4454-4687-b0a0-ad04f67c94dc",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7bec922c-3af2-4313-b0b8-5fbf8825a81a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "c7bfd421-a561-4686-aeb1-d4e256e2f56b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7bec922c-3af2-4313-b0b8-5fbf8825a81a"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "53b540a1-d1ee-4bf5-a7c6-930f324044ca",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "7bec922c-3af2-4313-b0b8-5fbf8825a81a"
    }
  ]
}