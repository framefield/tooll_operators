{
  "Name": "SurfaceCenters",
  "_id": "dff08bf1-6f19-4ee8-8613-38bbd447de19",
  "Namespace": "user.cynic",
  "Description": "Generate a stream with a matrix for each triangle, which can be used for instancing.",
  "Inputs": [
    {
      "Name": "Code",
      "MetaInstanceID": "f12956ae-3fc8-44e6-bfa9-324d23618d30",
      "DefaultValue": {
        "Type": "Text",
        "Value": [
          "//>>> _parameters\r",
          "float Value;",
          "//<<< _parameters\r",
          "\r",
          "struct Vertex\r",
          "{\r",
          "    float4 pos : POSITION;\r",
          "    float3 normal : NORMAL;\r",
          "    float4 col : COLOR;\r",
          "    float2 texCoord : TEXCOORD0;\r",
          "    float3 tangent : TANGENT0;\r",
          "    float3 binormal : BINORMAL0;\r",
          "};\r",
          "\r",
          "\r",
          "struct Output\r",
          "{\r",
          "    float4 objToWorldRow0 : INSTANCE_OBJ_TO_WORLD_ROW0;\r",
          "    float4 objToWorldRow1 : INSTANCE_OBJ_TO_WORLD_ROW1;\r",
          "    float4 objToWorldRow2 : INSTANCE_OBJ_TO_WORLD_ROW2;\r",
          "    float4 objToWorldRow3 : INSTANCE_OBJ_TO_WORLD_ROW3;\r",
          "};\r",
          "\r",
          "\r",
          "Vertex VertexMain(Vertex input)\r",
          "{\r",
          "    return input;\r",
          "}\r",
          "\r",
          "\r",
          "\r",
          "[maxvertexcount(1)]\r",
          "void GeometryMain(triangle Vertex input[3], uint id : SV_PrimitiveID, inout PointStream<Output> outputStream)\r",
          "{\r",
          "    if (id % Value == 0)\r",
          "    {\r",
          "        Vertex v0 = input[0];\r",
          "        Vertex v1 = input[1];\r",
          "        Vertex v2 = input[2];\r",
          "        Output output;\r",
          "//        output.objToWorldRow0 = float4(v0.tangent, 0);\r",
          "//        output.objToWorldRow1 = float4(v0.binormal, 0);\r",
          "        output.objToWorldRow0 = float4(0,1,0, 0);\r",
          "        output.objToWorldRow1 = float4(0,0,1, 0);\r",
          "//        output.objToWorldRow2 = float4(1,0,0, 0);\r",
          "        output.objToWorldRow2 = float4(v0.normal, 0);\r",
          "        float3 xDir = normalize(cross(v0.normal, float3(0,1,0)));\r",
          "        output.objToWorldRow0 = float4(xDir, 0);\r",
          "        output.objToWorldRow1 = float4(normalize(cross(v0.normal, xDir)), 0);\r",
          "        output.objToWorldRow3 = (v0.pos + v1.pos + v2.pos)/3.0;\r",
          "        output.objToWorldRow3.w = 1;\r",
          "    //    output.objToWorldRow3 = float4(0, 0, 0, 1);\r",
          "    \r",
          "        outputStream.Append(output);\r",
          "        outputStream.RestartStrip();\r",
          "    }\r",
          "};\r",
          "\r",
          "\r",
          "GeometryShader pGSComp = CompileShader(gs_5_0, GeometryMain());\r",
          "GeometryShader pGSwSO = ConstructGSWithSO(pGSComp, \"INSTANCE_OBJ_TO_WORLD_ROW0; INSTANCE_OBJ_TO_WORLD_ROW1; INSTANCE_OBJ_TO_WORLD_ROW2; INSTANCE_OBJ_TO_WORLD_ROW3;\", NULL, NULL, NULL, 0);\r",
          "\r",
          "\r",
          "technique11 Render\r",
          "{\r",
          "    pass \r",
          "    {\r",
          "        SetVertexShader(CompileShader(vs_5_0, VertexMain()));\r",
          "        SetGeometryShader(pGSwSO);\r",
          "        SetPixelShader(NULL);\r",
          "    }\r",
          "}\r",
          "\r",
          ""
        ]
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Scene",
      "MetaInstanceID": "b6dbd81b-4cfd-4d77-b18e-86f811904d93",
      "DefaultValue": {
        "Type": "Scene",
        "Value": "Framefield.Core.Scene"
      },
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248",
      "IsMultiInput": "False",
      "Relevance": "Required",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "Value",
      "MetaInstanceID": "727e00c1-bcd8-4ed5-ac97-a2a4e24f248c",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "1",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Scene",
      "MetaInstanceID": "952fde53-6cfb-4d80-802b-8ae249ede2ae",
      "MetaID": "79122951-7bc4-4c68-b085-866eab828248"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "a0c666cf-ab4a-4fe3-b092-75ffdb14059f",
      "MetaID": "4e4f22ad-d36e-489d-b64b-5a99bcf0391a",
      "Name": "SurfaceCentersFunc",
      "Version": "f5e31149-40f3-4af7-bc85-09654265131b",
      "Type": "Float",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "using SharpDX.Direct3D;",
        "using Framefield.Core.OperatorPartTraits;",
        "using Framefield.Core.Rendering;",
        "using Buffer = SharpDX.Direct3D11.Buffer;",
        "",
        "namespace Framefield.Core.ID4e4f22ad_d36e_489d_b64b_5a99bcf0391a",
        "{",
        "    public class Class_SurfaceCenters : FXSourceCodeFunction, IFXSceneSourceCode, IMeshSupplier",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            Code = 0,",
        "            Scene = 1,",
        "            Value = 2",
        "        }",
        "        //<<< _inputids",
        "",
        "",
        "        public Class_SurfaceCenters()",
        "        {",
        "            _meshCollector = new MeshCollector(this);",
        "        }",
        "",
        "        public override void Dispose() ",
        "        {",
        "            Utilities.DisposeObj(ref _mesh);",
        "            base.Dispose();",
        "        }",
        "",
        "        public void AddMeshesTo(ICollection<Mesh> meshes)",
        "        {",
        "            UpdateMesh(new OperatorPartContext(), OperatorPart.Connections);",
        "            if (_mesh != null)",
        "                meshes.Add(_mesh);",
        "        }",
        "",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx)",
        "        {",
        "            try",
        "            {",
        "                UpdateMesh(context, inputs);",
        "",
        "                if (_mesh.Vertices != null)",
        "                {",
        "                    // render stream output to screen or whatever target is set",
        "                    context.Renderer.SetupEffect(context);",
        "                    context.Renderer.Render(_mesh, context);",
        "                }",
        "            }",
        "            catch (Exception exception)",
        "            {",
        "                Logger.Error(this, \"Load Effect error: {0}\", exception.Message);",
        "            }",
        "",
        "            return context;",
        "        }",
        "",
        "        bool _firstEval = true;",
        "        private void UpdateMesh(OperatorPartContext context, List<OperatorPart> inputs)",
        "        {",
        "            if (_firstEval) ",
        "            {",
        "                for (int i = 0; i < NumCodes(); ++i)",
        "                    Compile(i);",
        "                _firstEval = false;",
        "                Changed = true;",
        "            }",
        "",
        "",
        "            if (!Changed && _mesh.Vertices != null)",
        "                return;",
        "",
        "            //>>> _params",
        "            var Code = inputs[(int)InputId.Code].Eval(context).Text;",
        "            var Scene = inputs[(int)InputId.Scene];",
        "            var Value = inputs[(int)InputId.Value].Eval(context).Value;",
        "            //<<< _params",
        "",
        "            if (Scene.Func.Changed || _mesh.Vertices == null)",
        "            {",
        "                //Logger.Info(this, \"collect meshes\");",
        "                _meshCollector.Collect(Scene);",
        "                Scene.Func.Changed = false;",
        "            }",
        "",
        "            var inputMesh = _meshCollector.FirstMeshOrDefault;",
        "            if (inputMesh == null)",
        "                return;",
        "",
        "            _mesh.AttributesSize = inputMesh.AttributesSize;",
        "            _mesh.NumTriangles = inputMesh.NumTriangles;",
        "            _mesh.InputElements = inputMesh.InputElements;",
        "            int stride = (int)Value;",
        "            int targetSize = inputMesh.NumTriangles / stride + 1;",
        "            if (_mesh.Vertices == null || _mesh.Vertices.Description.SizeInBytes != targetSize)",
        "            {",
        "                Utilities.DisposeObj(ref _mesh.Vertices);",
        "                _mesh.Vertices = new Buffer(D3DDevice.Device, new BufferDescription()",
        "                                                                    {",
        "                                                                        BindFlags = BindFlags.StreamOutput | BindFlags.VertexBuffer,",
        "                                                                        CpuAccessFlags = CpuAccessFlags.None,",
        "                                                                        OptionFlags = ResourceOptionFlags.None,",
        "                                                                        SizeInBytes = targetSize*16*4,",
        "                                                                        Usage = ResourceUsage.Default",
        "                                                                    });",
        "            }",
        "//Logger.Info(this, \"surface positions with size: {0}\", _mesh.Vertices.Description.SizeInBytes/(16*4));",
        "            _effect.GetVariableByName(\"Value\").AsScalar().Set(Value);",
        "",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(_mesh.Vertices, 0) });",
        "            context.D3DDevice.ImmediateContext.OutputMerger.DepthStencilState = new DepthStencilState(context.D3DDevice,",
        "                                                                                                        new DepthStencilStateDescription()",
        "                                                                                                            {",
        "                                                                                                                IsDepthEnabled = false,",
        "                                                                                                                IsStencilEnabled = false",
        "                                                                                                            });",
        "            context.D3DDevice.ImmediateContext.InputAssembler.InputLayout = context.InputLayout;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;",
        "            context.D3DDevice.ImmediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(inputMesh.Vertices, inputMesh.AttributesSize, 0));",
        "            var technique = _effect.GetTechniqueByIndex(0);",
        "            technique.GetPassByIndex(0).Apply(context.D3DDevice.ImmediateContext);",
        "            context.D3DDevice.ImmediateContext.Draw(inputMesh.NumTriangles*3, 0);",
        "            context.D3DDevice.ImmediateContext.StreamOutput.SetTargets(new [] { new StreamOutputBufferBinding(null, 0) });",
        "//Logger.Info(this, \"update surface positions\");",
        "            Changed = false;",
        "        }",
        "",
        "        private Mesh _mesh = new Mesh();",
        "        private MeshCollector _meshCollector;",
        "    }",
        "}",
        "",
        "",
        ""
      ],
      "AdditionalAssemblies": []
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "a0c666cf-ab4a-4fe3-b092-75ffdb14059f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "952fde53-6cfb-4d80-802b-8ae249ede2ae"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "f12956ae-3fc8-44e6-bfa9-324d23618d30",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a0c666cf-ab4a-4fe3-b092-75ffdb14059f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b6dbd81b-4cfd-4d77-b18e-86f811904d93",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a0c666cf-ab4a-4fe3-b092-75ffdb14059f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "727e00c1-bcd8-4ed5-ac97-a2a4e24f248c",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "a0c666cf-ab4a-4fe3-b092-75ffdb14059f"
    }
  ]
}