{
  "Name": "MidiFile",
  "_id": "81083ec7-f2fb-46f7-9077-40a3f5fd40c6",
  "Namespace": "lib.io.file",
  "Description": "Load a midiFile and provides events for channels",
  "Inputs": [
    {
      "Name": "FilePath",
      "MetaInstanceID": "b023b196-b8c4-4160-a80d-0d28f68f1b9b",
      "DefaultValue": {
        "Type": "Text",
        "Value": "test.txt"
      },
      "MetaID": "c522a66e-3260-4692-b3e3-79fd0361fa3d",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TimeRate",
      "MetaInstanceID": "5ddd1ae3-e0b0-424d-b480-d0a4f36d1229",
      "DefaultValue": {
        "Type": "Float",
        "Value": "96"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.1",
      "ScaleType": "Linear",
      "EnumValues": []
    },
    {
      "Name": "TimeOffset",
      "MetaInstanceID": "ba6e2cb4-d2a7-4a2d-a169-b75317d3c603",
      "DefaultValue": {
        "Type": "Float",
        "Value": "0"
      },
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506",
      "IsMultiInput": "False",
      "Relevance": "Optional",
      "Description": "",
      "Min": "-100000",
      "Max": "100000",
      "Scale": "0.01",
      "ScaleType": "Linear",
      "EnumValues": []
    }
  ],
  "Outputs": [
    {
      "Name": "Note",
      "MetaInstanceID": "f91d7d80-b294-4296-9f6b-1054c6a960da",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "LastNoteNumber",
      "MetaInstanceID": "212c1783-572c-4bee-a434-72344f411644",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    },
    {
      "Name": "LastNoteVelocity",
      "MetaInstanceID": "b662688b-0523-4723-a200-55db05e605b0",
      "MetaID": "3f76dee3-3897-44ac-82d6-25ce9f53a506"
    }
  ],
  "OperatorParts": [
    {
      "MetaInstanceID": "bed717c1-a6df-40f0-8d65-a0bea0f2af3f",
      "MetaID": "0eac4452-e37e-4a8d-81e6-328692e3f14e",
      "Name": "MidiFileFunc",
      "Version": "655f693d-a3fc-4e23-a0ab-9acf397b5723",
      "Type": "Dynamic",
      "IsMultiInput": "True",
      "Script": [
        "//>>> _using",
        "using System;",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "using System.Text;",
        "using SharpDX;",
        "using SharpDX.Direct3D11;",
        "using SharpDX.Windows;",
        "//<<< _using",
        "",
        "using NAudio.Midi;",
        "",
        "using System.IO;",
        "using System.Dynamic;",
        "using System.Text.RegularExpressions;",
        "",
        "namespace Framefield.Core.ID0eac4452_e37e_4a8d_81e6_328692e3f14e",
        "{",
        "    public class Class_MidiFile : OperatorPart.Function, Framefield.Core.OperatorPartTraits.ITimeAccessor",
        "    {",
        "        //>>> _inputids",
        "        private enum InputId",
        "        {",
        "            FilePath = 0,",
        "            TimeRate = 1,",
        "            TimeOffset = 2",
        "        }",
        "        //<<< _inputids",
        "",
        "        //>>> _outputids",
        "        private enum OutputId",
        "        {",
        "            Note = 0,",
        "            LastNoteNumber = 1,",
        "            LastNoteVelocity = 2",
        "        }",
        "        //<<< _outputids",
        "",
        "",
        "        struct MidiNote",
        "        {",
        "            public double StartTime;",
        "            public double Duration;",
        "            public int NoteNumber;",
        "            public int Channel;",
        "            public int Velocity;",
        "            public int TrackId;",
        "        }",
        "",
        "        private NAudio.Midi.MidiFile _midiFile;",
        "        private double _lastTime;",
        "        private int _track;",
        "        private float _timeRate;",
        "        private List<MidiNote> _notes = new List<MidiNote>();",
        "        ",
        "        private int _trackCount = 0;",
        "        public override OperatorPartContext Eval(OperatorPartContext context, List<OperatorPart> inputs, int outputIdx) {",
        "            //>>> _params",
        "            var FilePath = inputs[(int)InputId.FilePath].Eval(context).Text;",
        "            var TimeRate = inputs[(int)InputId.TimeRate].Eval(context).Value;",
        "            var TimeOffset = inputs[(int)InputId.TimeOffset].Eval(context).Value;",
        "            //<<< _params",
        "",
        "",
        "            if( FilePath != _filePath || TimeRate != _timeRate) {",
        "            ",
        "                _filePath = FilePath;",
        "                _timeRate = TimeRate;",
        "",
        "                if (!File.Exists(_filePath))",
        "                {",
        "                    Logger.Info(\"Can't find midifile {0}\", _filePath);",
        "                    return context;",
        "                }",
        "",
        "                _midiFile = new MidiFile(_filePath);",
        "",
        "                _trackCount = _midiFile.Tracks;",
        "",
        "                var playedNoteEvents = new List<NoteOnEvent>();",
        "    ",
        "                double ppqn = TimeRate;",
        "    ",
        "                if ( _midiFile != null)",
        "                {",
        "                    _notes.Clear();",
        "                    for (var trackIndex = 0; trackIndex < _trackCount; ++trackIndex)",
        "                    {",
        "                        var events = _midiFile.Events.GetTrackEvents(trackIndex);",
        "                        foreach (var e in events)",
        "                        {",
        "                            if (e.CommandCode == MidiCommandCode.NoteOn) {",
        "                                var noteOn = e as NoteOnEvent;",
        "                                _notes.Add(new MidiNote()",
        "                                {",
        "                                    TrackId = trackIndex,",
        "                                    StartTime = (double)e.AbsoluteTime / ppqn,",
        "                                    Channel = e.Channel,",
        "                                    NoteNumber = noteOn.NoteNumber,",
        "                                    Duration = (double)noteOn.NoteLength,",
        "                                    Velocity = noteOn.Velocity",
        "                                });",
        "                            }",
        "                            else if (e.CommandCode == MidiCommandCode.NoteOff) {",
        "                            }",
        "                            else if(e.CommandCode == MidiCommandCode.ControlChange) {",
        "                                var t = e.AbsoluteTime;",
        "                                var cce = e as ControlChangeEvent;",
        "                            }",
        "                            else if(e.CommandCode == MidiCommandCode.MetaEvent)",
        "                            {",
        "                                var timeEvent = e as TimeSignatureEvent;",
        "                                if (timeEvent != null)",
        "                                {",
        "                                    //Logger.Info(\"Time Event: {0}\", timeEvent);",
        "                                    continue;",
        "                                }",
        "    ",
        "                                var setTempoEvent = e as TempoEvent;",
        "                                if (setTempoEvent != null)",
        "                                {",
        "                                    ppqn = setTempoEvent.Tempo * 4;",
        "                                    continue;",
        "                                }",
        "    ",
        "                                //Logger.Info(\"Command code: {0}\", e);                                            ",
        "                            }",
        "                            else {",
        "                                //Logger.Info(\"more: {0}\", e);",
        "                                continue;",
        "                            }",
        "                        }",
        "                    }",
        "                }",
        "    ",
        "                if (_notes.Count <= 0) {",
        "                    return context;",
        "                }",
        "                _notes.Sort((s1, s2) => s1.StartTime.CompareTo(s2.StartTime));        ",
        "            }",
        "            ",
        "            if( context.Time != _lastTime) {",
        "                _playedNotes.Clear();",
        "                // Accumulate all NoteOnEvents between last time and current time",
        "                foreach( var note in _notes) {",
        "                    if (note.StartTime > _lastTime && note.StartTime <= context.Time) {",
        "                        _playedNotes.Add(note);",
        "                        _lastNote = note;",
        "                    }",
        "                }",
        "            }",
        "",
        "            switch (outputIdx)",
        "            {",
        "                case (int) OutputId.Note:",
        "                    context.Value = (_playedNotes.Count >=1) ? 1 :0;",
        "                    break;",
        "                    ",
        "                case  (int)OutputId.LastNoteNumber:",
        "                    context.Value = _lastNote.NoteNumber;  ",
        "                    break;",
        "                    ",
        "                case  (int)OutputId.LastNoteVelocity:",
        "                    context.Value = _lastNote.Velocity;  ",
        "                    break;",
        "            }",
        "            //context.Value = _list.Count;",
        "            _lastTime = context.Time;",
        "            return context;",
        "        }",
        "        ",
        "        private MidiNote _lastNote;",
        "        private string _filePath;",
        "        private string _matchString;",
        "        //private List<string> _list = new List<string>();",
        "        private List<MidiNote> _playedNotes = new List<MidiNote>();",
        "        ",
        "    }",
        "}",
        "",
        ""
      ],
      "AdditionalAssemblies": [
        "Libs/NAudio.dll"
      ]
    }
  ],
  "Operators": [],
  "Connections": [
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "b023b196-b8c4-4160-a80d-0d28f68f1b9b",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "bed717c1-a6df-40f0-8d65-a0bea0f2af3f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "5ddd1ae3-e0b0-424d-b480-d0a4f36d1229",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "bed717c1-a6df-40f0-8d65-a0bea0f2af3f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "ba6e2cb4-d2a7-4a2d-a169-b75317d3c603",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "bed717c1-a6df-40f0-8d65-a0bea0f2af3f"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bed717c1-a6df-40f0-8d65-a0bea0f2af3f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "f91d7d80-b294-4296-9f6b-1054c6a960da"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bed717c1-a6df-40f0-8d65-a0bea0f2af3f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "212c1783-572c-4bee-a434-72344f411644"
    },
    {
      "SourceOp": "00000000-0000-0000-0000-000000000000",
      "SourceOpPart": "bed717c1-a6df-40f0-8d65-a0bea0f2af3f",
      "TargetOp": "00000000-0000-0000-0000-000000000000",
      "TargetOpPart": "b662688b-0523-4723-a200-55db05e605b0"
    }
  ]
}